/*! For license information please see main.3b1261322c316d365734.js.LICENSE.txt */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(r,s,function(e){return t[e]}.bind(null,s));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=71)}([function(t,e,n){"use strict";n.d(e,"i",(function(){return Zi})),n.d(e,"l",(function(){return E.a})),n.d(e,"m",(function(){return E.b})),n.d(e,"ld",(function(){return io.a})),n.d(e,"Ad",(function(){return io.b})),n.d(e,"r",(function(){return k})),n.d(e,"s",(function(){return us})),n.d(e,"A",(function(){return cs})),n.d(e,"C",(function(){return ls})),n.d(e,"D",(function(){return hs})),n.d(e,"K",(function(){return xn})),n.d(e,"G",(function(){return ps})),n.d(e,"H",(function(){return fs})),n.d(e,"I",(function(){return ms})),n.d(e,"J",(function(){return gs})),n.d(e,"L",(function(){return ys})),n.d(e,"R",(function(){return xs.a})),n.d(e,"S",(function(){return j})),n.d(e,"T",(function(){return ws})),n.d(e,"U",(function(){return vs})),n.d(e,"V",(function(){return Os})),n.d(e,"W",(function(){return Ss})),n.d(e,"X",(function(){return Cs})),n.d(e,"Y",(function(){return ve})),n.d(e,"Z",(function(){return Is})),n.d(e,"ab",(function(){return Ns})),n.d(e,"db",(function(){return ke})),n.d(e,"eb",(function(){return Es})),n.d(e,"fb",(function(){return As})),n.d(e,"ib",(function(){return U})),n.d(e,"jb",(function(){return $s})),n.d(e,"lb",(function(){return js})),n.d(e,"ob",(function(){return Ds})),n.d(e,"tb",(function(){return Fs})),n.d(e,"vb",(function(){return _s})),n.d(e,"xb",(function(){return V})),n.d(e,"Bb",(function(){return Ye})),n.d(e,"Cb",(function(){return Ve})),n.d(e,"Eb",(function(){return Ms.a})),n.d(e,"Kb",(function(){return Bs})),n.d(e,"Lb",(function(){return Ue})),n.d(e,"Mb",(function(){return Je})),n.d(e,"Pb",(function(){return zs})),n.d(e,"Wb",(function(){return he})),n.d(e,"Xb",(function(){return Ps})),n.d(e,"Yb",(function(){return Ws})),n.d(e,"Zb",(function(){return Vs})),n.d(e,"ac",(function(){return Us})),n.d(e,"bc",(function(){return Ls})),n.d(e,"fc",(function(){return Gs})),n.d(e,"gc",(function(){return Hs})),n.d(e,"ic",(function(){return G})),n.d(e,"jc",(function(){return qs})),n.d(e,"mc",(function(){return Ks})),n.d(e,"nc",(function(){return Pr})),n.d(e,"qc",(function(){return In})),n.d(e,"rc",(function(){return hn})),n.d(e,"sc",(function(){return ea})),n.d(e,"uc",(function(){return ua})),n.d(e,"vc",(function(){return ca})),n.d(e,"xc",(function(){return la.a})),n.d(e,"Bc",(function(){return ha})),n.d(e,"Jc",(function(){return pa})),n.d(e,"Kc",(function(){return fa})),n.d(e,"ad",(function(){return pe})),n.d(e,"cd",(function(){return ge})),n.d(e,"ed",(function(){return pt})),n.d(e,"fd",(function(){return ma})),n.d(e,"jd",(function(){return Fe})),n.d(e,"ud",(function(){return _e})),n.d(e,"yd",(function(){return ga})),n.d(e,"Dc",(function(){return ka})),n.d(e,"Sc",(function(){return Mn})),n.d(e,"Tc",(function(){return Ln})),n.d(e,"Uc",(function(){return Bn})),n.d(e,"Vc",(function(){return zn})),n.d(e,"Wc",(function(){return Pn})),n.d(e,"o",(function(){return ft})),n.d(e,"p",(function(){return mt})),n.d(e,"q",(function(){return gt})),n.d(e,"x",(function(){return bt})),n.d(e,"y",(function(){return yt})),n.d(e,"z",(function(){return xt})),n.d(e,"B",(function(){return wt})),n.d(e,"P",(function(){return vt})),n.d(e,"Q",(function(){return Ot})),n.d(e,"bb",(function(){return St})),n.d(e,"cb",(function(){return Ct})),n.d(e,"pb",(function(){return It})),n.d(e,"qb",(function(){return Nt})),n.d(e,"sb",(function(){return kt})),n.d(e,"wb",(function(){return Et})),n.d(e,"Qb",(function(){return At})),n.d(e,"Rb",(function(){return Tt})),n.d(e,"kc",(function(){return Rt})),n.d(e,"yc",(function(){return jt})),n.d(e,"Fc",(function(){return Dt})),n.d(e,"Gc",(function(){return Ft})),n.d(e,"Oc",(function(){return _t})),n.d(e,"Pc",(function(){return Mt})),n.d(e,"Qc",(function(){return Pt})),n.d(e,"Rc",(function(){return Wt})),n.d(e,"Zc",(function(){return Vt})),n.d(e,"dd",(function(){return Ut})),n.d(e,"md",(function(){return Ht})),n.d(e,"nd",(function(){return qt})),n.d(e,"t",(function(){return rt})),n.d(e,"u",(function(){return st})),n.d(e,"v",(function(){return at})),n.d(e,"w",(function(){return it})),n.d(e,"cc",(function(){return ut})),n.d(e,"ec",(function(){return ct})),n.d(e,"hc",(function(){return lt})),n.d(e,"kd",(function(){return ht})),n.d(e,"tc",(function(){return dt})),n.d(e,"Tb",(function(){return sn})),n.d(e,"Ub",(function(){return an})),n.d(e,"Vb",(function(){return on})),n.d(e,"Fd",(function(){return cn})),n.d(e,"Gd",(function(){return ln})),n.d(e,"N",(function(){return D})),n.d(e,"O",(function(){return _})),n.d(e,"rb",(function(){return M})),n.d(e,"Cc",(function(){return L})),n.d(e,"gd",(function(){return B})),n.d(e,"hd",(function(){return z})),n.d(e,"zd",(function(){return P})),n.d(e,"Nc",(function(){return W})),n.d(e,"Ob",(function(){return R.a})),n.d(e,"oc",(function(){return R.b})),n.d(e,"wc",(function(){return R.d})),n.d(e,"Hc",(function(){return R.e})),n.d(e,"od",(function(){return R.f})),n.d(e,"pd",(function(){return R.g})),n.d(e,"qd",(function(){return R.h})),n.d(e,"rd",(function(){return R.j})),n.d(e,"Cd",(function(){return R.m})),n.d(e,"Hd",(function(){return R.n})),n.d(e,"pc",(function(){return R.c})),n.d(e,"Id",(function(){return R.o})),n.d(e,"xd",(function(){return Ne})),n.d(e,"Yc",(function(){return qa})),n.d(e,"Sb",(function(){return Ka})),n.d(e,"zb",(function(){return Ca})),n.d(e,"id",(function(){return Qa})),n.d(e,"vd",(function(){return ti})),n.d(e,"Ic",(function(){return ei})),n.d(e,"ub",(function(){return ni})),n.d(e,"Db",(function(){return ri})),n.d(e,"Ec",(function(){return si})),n.d(e,"Hb",(function(){return ai})),n.d(e,"bd",(function(){return ii})),n.d(e,"Ab",(function(){return oi})),n.d(e,"kb",(function(){return ui})),n.d(e,"Fb",(function(){return d})),n.d(e,"Nb",(function(){return h})),n.d(e,"yb",(function(){return p})),n.d(e,"wd",(function(){return uo})),n.d(e,"mb",(function(){return ts})),n.d(e,"dc",(function(){return es})),n.d(e,"td",(function(){return ns})),n.d(e,"hb",(function(){return rs})),n.d(e,"Ib",(function(){return ss})),n.d(e,"Mc",(function(){return as})),n.d(e,"zc",(function(){return is})),n.d(e,"E",(function(){return os})),n.d(e,"Ac",(function(){return Un.e})),n.d(e,"Dd",(function(){return H})),n.d(e,"nb",(function(){return Hn.b})),n.d(e,"Ed",(function(){return Zr})),n.d(e,"lc",(function(){return co.a})),n.d(e,"M",(function(){return a})),n.d(e,"Gb",(function(){return s})),n.d(e,"Lc",(function(){return i})),n.d(e,"Bd",(function(){return A})),n.d(e,"F",(function(){return m})),n.d(e,"sd",(function(){return C})),n.d(e,"Xc",(function(){return r})),n.d(e,"gb",(function(){return Fo})),n.d(e,"Jb",(function(){return g})),n.d(e,"d",(function(){return zo})),n.d(e,"a",(function(){return Bo})),n.d(e,"b",(function(){return y.y})),n.d(e,"e",(function(){return y.P})),n.d(e,"f",(function(){return y.U})),n.d(e,"g",(function(){return y.Z})),n.d(e,"h",(function(){return y.ab})),n.d(e,"k",(function(){return y.ob})),n.d(e,"j",(function(){return y.nb})),n.d(e,"n",(function(){return y.rb})),n.d(e,"c",(function(){return y.E}));var r={};n.r(r),n.d(r,"assertParamsValid",(function(){return Nn})),n.d(r,"maskToAxes",(function(){return kn})),n.d(r,"computeOutShape",(function(){return En})),n.d(r,"stridesWithElidedDims",(function(){return An})),n.d(r,"startIndicesWithElidedDims",(function(){return Tn})),n.d(r,"stopIndicesWithElidedDims",(function(){return $n})),n.d(r,"stridesForAxis",(function(){return Rn})),n.d(r,"startForAxis",(function(){return jn})),n.d(r,"stopForAxis",(function(){return Dn})),n.d(r,"isSliceContinous",(function(){return Fn})),n.d(r,"computeFlatOffset",(function(){return _n}));var s={};n.r(s),n.d(s,"copyModel",(function(){return ar})),n.d(s,"listModels",(function(){return rr})),n.d(s,"moveModel",(function(){return ir})),n.d(s,"removeModel",(function(){return sr})),n.d(s,"browserFiles",(function(){return Nr})),n.d(s,"browserHTTPRequest",(function(){return _r})),n.d(s,"concatenateArrayBuffers",(function(){return Kn.d})),n.d(s,"decodeWeights",(function(){return Kn.e})),n.d(s,"encodeWeights",(function(){return Kn.f})),n.d(s,"fromMemory",(function(){return Br})),n.d(s,"getLoadHandlers",(function(){return Qn})),n.d(s,"getModelArtifactsInfoForJSON",(function(){return Kn.g})),n.d(s,"getSaveHandlers",(function(){return Zn})),n.d(s,"http",(function(){return Fr})),n.d(s,"isHTTPScheme",(function(){return jr})),n.d(s,"loadWeights",(function(){return Tr})),n.d(s,"registerLoadRouter",(function(){return Jn})),n.d(s,"registerSaveRouter",(function(){return Yn})),n.d(s,"weightsLoaderFactory",(function(){return $r})),n.d(s,"withSaveHandler",(function(){return zr}));var a={};n.r(a),n.d(a,"toPixels",(function(){return Vr})),n.d(a,"fromPixels",(function(){return Ur}));var i={};n.r(i),n.d(i,"Serializable",(function(){return Xr})),n.d(i,"SerializationMap",(function(){return Yr})),n.d(i,"registerClass",(function(){return Jr}));var o={};n.r(o),n.d(o,"segOpComputeOptimalWindowSize",(function(){return xa})),n.d(o,"computeOutShape",(function(){return wa})),n.d(o,"collectGatherOpShapeInfo",(function(){return va}));var u={};n.r(u),n.d(u,"fft",(function(){return ni})),n.d(u,"ifft",(function(){return ri})),n.d(u,"rfft",(function(){return si})),n.d(u,"irfft",(function(){return ai}));var c={};n.r(c),n.d(c,"hannWindow",(function(){return li})),n.d(c,"hammingWindow",(function(){return hi})),n.d(c,"frame",(function(){return di})),n.d(c,"stft",(function(){return pi}));var l={};n.r(l),n.d(l,"Reduction",(function(){return mi})),n.d(l,"absoluteDifference",(function(){return gi})),n.d(l,"computeWeightedLoss",(function(){return bi})),n.d(l,"cosineDistance",(function(){return yi})),n.d(l,"hingeLoss",(function(){return xi})),n.d(l,"huberLoss",(function(){return wi})),n.d(l,"logLoss",(function(){return vi})),n.d(l,"meanSquaredError",(function(){return Oi})),n.d(l,"sigmoidCrossEntropy",(function(){return Si})),n.d(l,"softmaxCrossEntropy",(function(){return Ci}));var h={};n.r(h),n.d(h,"bandPart",(function(){return Ni})),n.d(h,"gramSchmidt",(function(){return ki})),n.d(h,"qr",(function(){return Ei}));var d={};n.r(d),n.d(d,"nonMaxSuppression",(function(){return Li})),n.d(d,"resizeBilinear",(function(){return Bi})),n.d(d,"resizeNearestNeighbor",(function(){return zi})),n.d(d,"nonMaxSuppressionAsync",(function(){return Pi})),n.d(d,"nonMaxSuppressionWithScore",(function(){return Wi})),n.d(d,"nonMaxSuppressionWithScoreAsync",(function(){return Vi})),n.d(d,"cropAndResize",(function(){return Ui}));var p={};n.r(p),n.d(p,"matMul",(function(){return Xi})),n.d(p,"conv2d",(function(){return Yi})),n.d(p,"depthwiseConv2d",(function(){return Ji}));var f={};n.r(f),n.d(f,"add",(function(){return k})),n.d(f,"addN",(function(){return us})),n.d(f,"atan2",(function(){return cs})),n.d(f,"avgPool",(function(){return ls})),n.d(f,"avgPool3d",(function(){return hs})),n.d(f,"batchToSpaceND",(function(){return xn})),n.d(f,"batchNorm",(function(){return ps})),n.d(f,"batchNorm2d",(function(){return fs})),n.d(f,"batchNorm3d",(function(){return ms})),n.d(f,"batchNorm4d",(function(){return gs})),n.d(f,"broadcastTo",(function(){return ys})),n.d(f,"clone",(function(){return bs})),n.d(f,"complex",(function(){return xs.a})),n.d(f,"concat",(function(){return j})),n.d(f,"concat1d",(function(){return ws})),n.d(f,"concat2d",(function(){return vs})),n.d(f,"concat3d",(function(){return Os})),n.d(f,"concat4d",(function(){return Ss})),n.d(f,"conv1d",(function(){return Cs})),n.d(f,"conv2d",(function(){return ve})),n.d(f,"conv2dTranspose",(function(){return Is})),n.d(f,"conv3d",(function(){return Ns})),n.d(f,"conv3dTranspose",(function(){return ks})),n.d(f,"cumsum",(function(){return ke})),n.d(f,"depthToSpace",(function(){return Es})),n.d(f,"depthwiseConv2d",(function(){return As})),n.d(f,"diag",(function(){return Ts})),n.d(f,"div",(function(){return U})),n.d(f,"divNoNan",(function(){return $s})),n.d(f,"dot",(function(){return Rs})),n.d(f,"elu",(function(){return js})),n.d(f,"equal",(function(){return Ds})),n.d(f,"eye",(function(){return Fs})),n.d(f,"fill",(function(){return _s})),n.d(f,"floorDiv",(function(){return V})),n.d(f,"greater",(function(){return Ye})),n.d(f,"greaterEqual",(function(){return Ve})),n.d(f,"imag",(function(){return Ms.a})),n.d(f,"leakyRelu",(function(){return Bs})),n.d(f,"less",(function(){return Ue})),n.d(f,"lessEqual",(function(){return Je})),n.d(f,"localResponseNormalization",(function(){return zs})),n.d(f,"matMul",(function(){return he})),n.d(f,"max",(function(){return Ps})),n.d(f,"maxPool",(function(){return Ws})),n.d(f,"maxPool3d",(function(){return Vs})),n.d(f,"maxPoolWithArgmax",(function(){return Us})),n.d(f,"maximum",(function(){return Ls})),n.d(f,"minimum",(function(){return Gs})),n.d(f,"mod",(function(){return Hs})),n.d(f,"mul",(function(){return G})),n.d(f,"multinomial",(function(){return qs})),n.d(f,"notEqual",(function(){return Ks})),n.d(f,"oneHot",(function(){return Pr})),n.d(f,"outerProduct",(function(){return Xs})),n.d(f,"pad",(function(){return In})),n.d(f,"pad1d",(function(){return Ys})),n.d(f,"pad2d",(function(){return Js})),n.d(f,"pad3d",(function(){return Zs})),n.d(f,"pad4d",(function(){return Qs})),n.d(f,"pool",(function(){return ta})),n.d(f,"pow",(function(){return hn})),n.d(f,"prelu",(function(){return ea})),n.d(f,"rand",(function(){return na})),n.d(f,"randomGamma",(function(){return oa})),n.d(f,"randomNormal",(function(){return ua})),n.d(f,"randomUniform",(function(){return ca})),n.d(f,"real",(function(){return la.a})),n.d(f,"relu",(function(){return ha})),n.d(f,"relu6",(function(){return da})),n.d(f,"selu",(function(){return pa})),n.d(f,"separableConv2d",(function(){return fa})),n.d(f,"spaceToBatchND",(function(){return pe})),n.d(f,"split",(function(){return ge})),n.d(f,"square",(function(){return pt})),n.d(f,"squaredDifference",(function(){return ma})),n.d(f,"sub",(function(){return Fe})),n.d(f,"tile",(function(){return _e})),n.d(f,"truncatedNormal",(function(){return ga})),n.d(f,"booleanMaskAsync",(function(){return Na})),n.d(f,"reverse",(function(){return ka})),n.d(f,"reverse1d",(function(){return Ea})),n.d(f,"reverse2d",(function(){return Aa})),n.d(f,"reverse3d",(function(){return Ta})),n.d(f,"reverse4d",(function(){return $a})),n.d(f,"slice",(function(){return Mn})),n.d(f,"slice1d",(function(){return Ln})),n.d(f,"slice2d",(function(){return Bn})),n.d(f,"slice3d",(function(){return zn})),n.d(f,"slice4d",(function(){return Pn})),n.d(f,"abs",(function(){return ft})),n.d(f,"acos",(function(){return mt})),n.d(f,"acosh",(function(){return gt})),n.d(f,"asin",(function(){return bt})),n.d(f,"asinh",(function(){return yt})),n.d(f,"atan",(function(){return xt})),n.d(f,"atanh",(function(){return wt})),n.d(f,"ceil",(function(){return vt})),n.d(f,"clipByValue",(function(){return Ot})),n.d(f,"cos",(function(){return St})),n.d(f,"cosh",(function(){return Ct})),n.d(f,"erf",(function(){return It})),n.d(f,"exp",(function(){return Nt})),n.d(f,"expm1",(function(){return kt})),n.d(f,"floor",(function(){return Et})),n.d(f,"log",(function(){return At})),n.d(f,"log1p",(function(){return Tt})),n.d(f,"logSigmoid",(function(){return $t})),n.d(f,"neg",(function(){return Rt})),n.d(f,"reciprocal",(function(){return jt})),n.d(f,"round",(function(){return Dt})),n.d(f,"rsqrt",(function(){return Ft})),n.d(f,"sigmoid",(function(){return _t})),n.d(f,"sign",(function(){return Mt})),n.d(f,"isNaN",(function(){return Lt})),n.d(f,"isInf",(function(){return Bt})),n.d(f,"isFinite",(function(){return zt})),n.d(f,"sin",(function(){return Pt})),n.d(f,"sinh",(function(){return Wt})),n.d(f,"softplus",(function(){return Vt})),n.d(f,"sqrt",(function(){return Ut})),n.d(f,"step",(function(){return Gt})),n.d(f,"tan",(function(){return Ht})),n.d(f,"tanh",(function(){return qt})),n.d(f,"all",(function(){return rt})),n.d(f,"any",(function(){return st})),n.d(f,"argMax",(function(){return at})),n.d(f,"argMin",(function(){return it})),n.d(f,"logSumExp",(function(){return ot})),n.d(f,"mean",(function(){return ut})),n.d(f,"min",(function(){return ct})),n.d(f,"moments",(function(){return lt})),n.d(f,"sum",(function(){return ht})),n.d(f,"prod",(function(){return dt})),n.d(f,"equalStrict",(function(){return Ra})),n.d(f,"greaterEqualStrict",(function(){return ja})),n.d(f,"greaterStrict",(function(){return Da})),n.d(f,"lessEqualStrict",(function(){return Fa})),n.d(f,"lessStrict",(function(){return _a})),n.d(f,"notEqualStrict",(function(){return Ma})),n.d(f,"addStrict",(function(){return La})),n.d(f,"divStrict",(function(){return Ba})),n.d(f,"maximumStrict",(function(){return za})),n.d(f,"minimumStrict",(function(){return Pa})),n.d(f,"modStrict",(function(){return Wa})),n.d(f,"mulStrict",(function(){return Va})),n.d(f,"powStrict",(function(){return Ua})),n.d(f,"squaredDifferenceStrict",(function(){return Ga})),n.d(f,"subStrict",(function(){return Ha})),n.d(f,"logicalAnd",(function(){return sn})),n.d(f,"logicalNot",(function(){return an})),n.d(f,"logicalOr",(function(){return on})),n.d(f,"logicalXor",(function(){return un})),n.d(f,"where",(function(){return cn})),n.d(f,"whereAsync",(function(){return ln})),n.d(f,"buffer",(function(){return D})),n.d(f,"print",(function(){return F})),n.d(f,"cast",(function(){return _})),n.d(f,"expandDims",(function(){return M})),n.d(f,"reshape",(function(){return L})),n.d(f,"squeeze",(function(){return B})),n.d(f,"stack",(function(){return z})),n.d(f,"unstack",(function(){return P})),n.d(f,"setdiff1dAsync",(function(){return W})),n.d(f,"linspace",(function(){return R.a})),n.d(f,"ones",(function(){return R.b})),n.d(f,"range",(function(){return R.d})),n.d(f,"scalar",(function(){return R.e})),n.d(f,"tensor",(function(){return R.f})),n.d(f,"tensor1d",(function(){return R.g})),n.d(f,"tensor2d",(function(){return R.h})),n.d(f,"tensor3d",(function(){return R.i})),n.d(f,"tensor4d",(function(){return R.j})),n.d(f,"tensor5d",(function(){return R.k})),n.d(f,"tensor6d",(function(){return R.l})),n.d(f,"variable",(function(){return R.m})),n.d(f,"zeros",(function(){return R.n})),n.d(f,"onesLike",(function(){return R.c})),n.d(f,"zerosLike",(function(){return R.o})),n.d(f,"transpose",(function(){return Ne})),n.d(f,"softmax",(function(){return qa})),n.d(f,"logSoftmax",(function(){return Ka})),n.d(f,"norm",(function(){return Xa})),n.d(f,"gather",(function(){return Ca})),n.d(f,"unsortedSegmentSum",(function(){return Ia})),n.d(f,"basicLSTMCell",(function(){return Ya})),n.d(f,"multiRNNCell",(function(){return Ja})),n.d(f,"movingAverage",(function(){return Za})),n.d(f,"stridedSlice",(function(){return Qa})),n.d(f,"topk",(function(){return ti})),n.d(f,"scatterND",(function(){return ei})),n.d(f,"fft",(function(){return ni})),n.d(f,"ifft",(function(){return ri})),n.d(f,"rfft",(function(){return si})),n.d(f,"irfft",(function(){return ai})),n.d(f,"sparseToDense",(function(){return ii})),n.d(f,"gatherND",(function(){return oi})),n.d(f,"dropout",(function(){return ui})),n.d(f,"hannWindow",(function(){return li})),n.d(f,"hammingWindow",(function(){return hi})),n.d(f,"frame",(function(){return di})),n.d(f,"stft",(function(){return pi})),n.d(f,"inTopKAsync",(function(){return fi})),n.d(f,"op",(function(){return N.a})),n.d(f,"image",(function(){return d})),n.d(f,"linalg",(function(){return h})),n.d(f,"losses",(function(){return l})),n.d(f,"spectral",(function(){return u})),n.d(f,"fused",(function(){return p})),n.d(f,"signal",(function(){return c}));var m={};n.r(m),n.d(m,"axesAreInnerMostDims",(function(){return K})),n.d(m,"combineLocations",(function(){return X})),n.d(m,"computeOutAndReduceShapes",(function(){return Y})),n.d(m,"expandShapeToKeepDim",(function(){return J})),n.d(m,"assertAxesAreInnerMostDims",(function(){return Z})),n.d(m,"getAxesPermutation",(function(){return Q})),n.d(m,"getUndoAxesPermutation",(function(){return tt})),n.d(m,"getInnerMostAxes",(function(){return et})),n.d(m,"getBroadcastDims",(function(){return x})),n.d(m,"getReductionAxes",(function(){return w})),n.d(m,"assertAndGetBroadcastShape",(function(){return v})),n.d(m,"assertParamsConsistent",(function(){return T})),n.d(m,"computeOutShape",(function(){return $})),n.d(m,"computePool2DInfo",(function(){return Xt})),n.d(m,"computePool3DInfo",(function(){return Yt})),n.d(m,"computeConv2DInfo",(function(){return Jt})),n.d(m,"computeConv3DInfo",(function(){return Zt})),n.d(m,"computeDefaultPad",(function(){return Qt})),n.d(m,"tupleValuesAreOne",(function(){return se})),n.d(m,"eitherStridesOrDilationsAreOne",(function(){return ae})),n.d(m,"convertConv2DDataFormat",(function(){return ie})),n.d(m,"PARALLELIZE_THRESHOLD",(function(){return ba})),n.d(m,"computeOptimalWindowSize",(function(){return ya})),n.d(m,"nonMaxSuppressionV3",(function(){return $i})),n.d(m,"nonMaxSuppressionV5",(function(){return Ri})),n.d(m,"upcastType",(function(){return io.b})),n.d(m,"getReshaped",(function(){return lo})),n.d(m,"getPermuted",(function(){return ho})),n.d(m,"getReshapedPermuted",(function(){return po})),n.d(m,"getSliceBeginCoords",(function(){return fo})),n.d(m,"getSliceSize",(function(){return mo})),n.d(m,"prepareAndValidate",(function(){return Gr})),n.d(m,"validateUpdateShape",(function(){return Hr})),n.d(m,"validateInput",(function(){return qr})),n.d(m,"calculateShapes",(function(){return Kr})),n.d(m,"SELU_SCALEALPHA",(function(){return gn})),n.d(m,"SELU_SCALE",(function(){return bn})),n.d(m,"shouldFuse",(function(){return Gi})),n.d(m,"ERF_P",(function(){return go})),n.d(m,"ERF_A1",(function(){return bo})),n.d(m,"ERF_A2",(function(){return yo})),n.d(m,"ERF_A3",(function(){return xo})),n.d(m,"ERF_A4",(function(){return wo})),n.d(m,"ERF_A5",(function(){return vo})),n.d(m,"warn",(function(){return Oo})),n.d(m,"log",(function(){return So})),n.d(m,"mergeRealAndImagArrays",(function(){return Co})),n.d(m,"splitRealAndImagArrays",(function(){return Io})),n.d(m,"complexWithEvenIndex",(function(){return No})),n.d(m,"complexWithOddIndex",(function(){return ko})),n.d(m,"getComplexWithIndex",(function(){return Eo})),n.d(m,"assignToTypedArray",(function(){return Ao})),n.d(m,"exponents",(function(){return To})),n.d(m,"exponent",(function(){return $o})),n.d(m,"segment_util",(function(){return o})),n.d(m,"castTensor",(function(){return Ro})),n.d(m,"reshapeTensor",(function(){return jo})),n.d(m,"linspaceImpl",(function(){return Do}));var g={};n.r(g),n.d(g,"nonMaxSuppressionV3",(function(){return $i})),n.d(g,"nonMaxSuppressionV5",(function(){return Ri})),n.d(g,"split",(function(){return _o})),n.d(g,"tile",(function(){return Mo})),n.d(g,"topkImpl",(function(){return Lo})),n.d(g,"whereImpl",(function(){return rn}));var b=n(5),y=(n(52),n(6));function x(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function w(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function v(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const O={kernelName:y.a,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{let e=t;const r=w(n.shape,s);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:()=>{let e=t;const n=w(r.shape,s);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},S={kernelName:y.b,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}};var C=n(10),I=n(3),N=n(4);const k=Object(N.a)({add_:function(t,e){let n=Object(I.a)(t,"a","add"),r=Object(I.a)(e,"b","add");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,y.a)}});var E=n(7),A=n(1);function T(t,e){const n=t[0].length;t.forEach((t,e)=>{A.assert(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),A.assert(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)A.assert(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function $(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}var R=n(8);const j=Object(N.a)({concat_:function(t,e=0){Object(A.assert)(t.length>=1,()=>"Pass at least one tensor to concat");let n=Object(I.b)(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=Object(A.parseAxisParam)(e,n[0].shape)[0],s=$(n.map(t=>t.shape),r);if(0===Object(A.sizeFromShape)(s))return Object(R.f)([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];T(n.map(t=>t.shape),r);const a=n,i={axis:e};return b.a.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},a,null,y.l,i)}});function D(t,e="float32",n){return e=e||"float32",A.assertNonNegativeIntegerDimensions(t),new E.b(t,e,n)}function F(t,e=!1){console.log(t.toString(e))}const _=Object(N.a)({cast_:function(t,e){const n=Object(I.a)(t,"x","cast");if(!A.isValidDtype(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={dtype:e};return b.a.runKernelFunc(t=>t.cast(n,e),{x:n},t=>({x:()=>t.clone()}),"Cast",r)}}),M=Object(N.a)({expandDims_:function(t,e=0){const n=Object(I.a)(t,"x","expandDims",null);A.assert(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(A.assert(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),L(n,r)}}),L=Object(N.a)({reshape_:function(t,e){const n=Object(I.a)(t,"x","reshape",null);e=A.inferFromImplicitShape(e,n.size),A.assert(n.size===A.sizeFromShape(e),()=>"new shape and old shape must have the same number of elements.");const r={shape:e};return b.a.runKernelFunc(t=>t.reshape(n,e),{x:n},t=>({x:()=>t.reshape(n.shape)}),"Reshape",r)}}),B=Object(N.a)({squeeze_:function(t,e){const n=Object(I.a)(t,"x","squeeze");return L(n,A.squeezeShape(n.shape,e).newShape)}}),z=Object(N.a)({stack_:function(t,e=0){const n=Object(I.b)(t,"tensors","stack");if(A.assert(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return n[0].expandDims(e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;A.assert(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{A.assertShapesMatch(s,t.shape,"All tensors passed to stack must have matching shapes")}),n.forEach(t=>{A.assert(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>t.expandDims(e));return j(i,e)}}),P=Object(N.a)({unstack_:function(t,e=0){e=e||0;const n=Object(I.a)(t,"x","unstack");A.assert(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={axis:e};return b.a.runKernelFunc(t=>t.unstack(n,e),{x:n},t=>({x:()=>z(t,e)}),"Unpack",r)}}),W=async function(t,e){const n=Object(I.a)(t,"x","setdiff1d"),r=Object(I.a)(e,"y","setdiff1d");A.assert(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),A.assert(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),A.assert(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const u=new E.b([o],n.dtype),c=new E.b([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(u.values[e]=s[t],c.values[e]=t,e++);return[u.toTensor(),c.toTensor()]};const V=Object(N.a)({floorDiv_:function(t,e){let n=Object(I.a)(t,"a","floorDiv"),r=Object(I.a)(e,"b","floorDiv");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},s,null,y.D)}});const U=Object(N.a)({div_:function(t,e){let n=Object(I.a)(t,"a","div"),r=Object(I.a)(e,"b","div");if([n,r]=Object(C.makeTypesMatch)(n,r),"int32"===n.dtype&&"int32"===r.dtype)return V(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,y.y,{})}});const G=Object(N.a)({mul_:function(t,e){let n=Object(I.a)(t,"a","mul"),r=Object(I.a)(e,"b","mul");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},s,null,y.Y)}});function H(t,e){A.assert(A.isFunction(t),()=>"The f passed in variableGrads(f) must be a function"),A.assert(null==e||Array.isArray(e)&&e.every(t=>t instanceof E.c),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in b.a.registeredVariables)e.push(b.a.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;e=e.filter(t=>t.trainable),A.assert(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=b.a.gradients(t,e,null,!0);A.assert(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),A.assert(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function q(t){return b.a.customGrad(t)}function K(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function X(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function Y(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function J(t,e){return X(t,e.map(t=>1),e)}function Z(t,e,n){A.assert(K(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function Q(t,e){if(K(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function tt(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function et(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}function nt(t,e,n,r,s){return e.rank<n.rank&&(e=e.reshape(J(e.shape,r))),t.rank<n.rank&&(t=t.reshape(J(t.shape,r))),{x:()=>{const r=t.mul(n.equal(e).cast(t.dtype));return null==s?r:r.transpose(s)}}}const rt=Object(N.a)({all_:function(t,e=null,n=!1){let r=Object(I.a)(t,"x","all","bool");const s=A.parseAxisParam(e,r.shape);let a=s;const i=Q(a,r.rank);null!=i&&(r=r.transpose(i),a=et(a.length,r.rank));const o=b.a.runKernelFunc(t=>t.all(r,a),{$x:r});if(n){const t=J(o.shape,s);return o.reshape(t)}return o}}),st=Object(N.a)({any_:function(t,e=null,n=!1){let r=Object(I.a)(t,"x","any","bool");const s=A.parseAxisParam(e,r.shape);let a=s;const i=Q(a,r.rank);null!=i&&(r=r.transpose(i),a=et(a.length,r.rank));const o=b.a.runKernelFunc(t=>t.any(r,a),{$x:r});if(n){const t=J(o.shape,s);return o.reshape(t)}return o}}),at=Object(N.a)({argMax_:function(t,e=0){let n=Object(I.a)(t,"x","argMax");null==e&&(e=0);let r=A.parseAxisParam(e,n.shape);const s=Q(r,n.rank);null!=s&&(n=n.transpose(s),r=et(r.length,n.rank));const a={axis:r[0]},i=[n];return b.a.runKernelFunc((t,e)=>{const s=t.argMax(n,r[0]);return e([n]),s},{x:n},(t,e)=>{const[n]=e;return{x:()=>Object(R.o)(n)}},"ArgMax",a,i)}}),it=Object(N.a)({argMin_:function(t,e=0){let n=Object(I.a)(t,"x","argMin");null==e&&(e=0);let r=A.parseAxisParam(e,n.shape);const s=Q(r,n.rank);return null!=s&&(n=n.transpose(s),r=et(r.length,n.rank)),b.a.runKernelFunc((t,e)=>{const s=t.argMin(n,r[0]);return e([n]),s},{$x:n},(t,e)=>{const[n]=e;return{$x:()=>Object(R.o)(n)}})}}),ot=Object(N.a)({logSumExp_:function(t,e=null,n=!1){const r=Object(I.a)(t,"x","logSumExp"),s=A.parseAxisParam(e,r.shape),a=r.max(s,!0),i=r.sub(a).exp().sum(s).log(),o=a.reshape(i.shape).add(i);if(n){const t=J(o.shape,s);return o.reshape(t)}return o}}),ut=Object(N.a)({mean_:function(t,e=null,n=!1){const r=Object(I.a)(t,"x","mean"),s=A.parseAxisParam(e,r.shape),a=Y(r.shape,s)[1],i=A.sizeFromShape(a);return q(t=>{const r=Object(R.e)(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});return e.reshape(n).mul(Object(R.b)(t.shape,"float32")).div(i)}}})(r)}}),ct=Object(N.a)({min_:function(t,e=null,n=!1){let r=Object(I.a)(t,"x","min");const s=r,a=A.parseAxisParam(e,r.shape);let i=a;const o=Q(i,r.rank);null!=o&&(r=r.transpose(o),i=et(i.length,r.rank));const u=[r];let c=b.a.runKernelFunc((t,e)=>{const n=t.min(r,i);return e([s,n]),n},{x:r},(t,e)=>nt(t,e[1],e[0],a,o),"Min",{axes:i},u,[!0]);if(n){const t=J(c.shape,a);c=c.reshape(t)}return c}}),lt=Object(N.a)({moments_:function(t,e=null,n=!1){t=Object(I.a)(t,"x","moments");const r=A.parseAxisParam(e,t.shape),s=t.mean(r,n);let a=s.shape;n||(a=J(s.shape,r));const i=t.toFloat().sub(s.reshape(a)).square();return{mean:s,variance:i.mean(r,n)}}}),ht=Object(N.a)({sum_:function(t,e=null,n=!1){let r=Object(I.a)(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s=A.parseAxisParam(e,r.shape);return q(t=>{const e=Q(s,t.rank);let r=s,a=t;null!=e&&(a=t.transpose(e),r=et(r.length,t.rank));const i=e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});return e.reshape(n).mul(Object(R.b)(t.shape,"float32"))},o={axes:r};let u=b.a.runKernelFunc(t=>t.sum(a,r),{x:a},t=>({x:()=>i(t)}),"Sum",o);if(n){const t=J(u.shape,s);u=u.reshape(t)}return{value:u,gradFunc:i}})(r)}}),dt=Object(N.a)({prod_:function(t,e=null,n=!1){let r=Object(I.a)(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());const s=A.parseAxisParam(e,r.shape),a=Q(s,r.rank);let i=s,o=r;null!=a&&(o=r.transpose(a),i=et(i.length,r.rank));let u=b.a.runKernelFunc(t=>t.prod(o,i),{permutedX:o});if(n){const t=J(u.shape,s);u=u.reshape(t)}return u}});const pt=Object(N.a)({square_:function(t){const e=Object(I.a)(t,"x","square"),n=[e];return b.a.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const ft=Object(N.a)({abs_:function(t){const e=Object(I.a)(t,"x","abs");return"complex64"===e.dtype?b.a.runKernelFunc(t=>t.complexAbs(e),{$x:e}):b.a.runKernelFunc((t,n)=>{const r=t.abs(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.toFloat().step(-1))}},"Abs")}}),mt=Object(N.a)({acos_:function(t){const e=Object(I.a)(t,"x","acos");return b.a.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=n.toFloat().square(),r=Object(R.e)(1).sub(e).sqrt();return t.div(r).neg()}}})}}),gt=Object(N.a)({acosh_:function(t){const e=Object(I.a)(t,"x","acosh");return b.a.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=n.toFloat().square().sub(1).sqrt();return t.div(e)}}})}}),bt=Object(N.a)({asin_:function(t){const e=Object(I.a)(t,"x","asin");return b.a.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(Object(R.e)(1).sub(n.toFloat().square()).sqrt())}})}}),yt=Object(N.a)({asinh_:function(t){const e=Object(I.a)(t,"x","asinh");return b.a.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=Object(R.e)(1).add(n.toFloat().square()).sqrt();return t.div(e)}}})}}),xt=Object(N.a)({atan_:function(t){const e=Object(I.a)(t,"x","atan");return b.a.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.toFloat().square().add(1))}})}}),wt=Object(N.a)({atanh_:function(t){const e=Object(I.a)(t,"x","atanh");return b.a.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(Object(R.e)(1).sub(n.toFloat().square()))}})}}),vt=Object(N.a)({ceil_:function(t){const e=Object(I.a)(t,"x","ceil");return b.a.runKernelFunc(t=>t.ceil(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),Ot=Object(N.a)({clipByValue_:function(t,e,n){const r=Object(I.a)(t,"x","clipByValue");A.assert(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s=[r],a={min:e,max:n};return b.a.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},{x:r},(t,r)=>{const[s]=r;return{x:()=>t.where(s.greaterEqual(e).logicalAnd(s.lessEqual(n)),Object(R.o)(t))}},"ClipByValue",a,s)}}),St=Object(N.a)({cos_:function(t){const e=Object(I.a)(t,"x","cos"),n=[e];return b.a.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().sin().neg().mul(t)}},"Cos",{},n)}}),Ct=Object(N.a)({cosh_:function(t){const e=Object(I.a)(t,"x","cosh");return b.a.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().sinh().mul(t)}})}}),It=Object(N.a)({erf_:function(t){let e=Object(I.a)(t,"x","erf");return A.assert("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat()),b.a.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}})}}),Nt=Object(N.a)({exp_:function(t){const e=Object(I.a)(t,"x","exp");return b.a.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},{x:e},(t,e)=>({x:()=>t.mul(e[0])}),"Exp",{},[],[!0])}}),kt=Object(N.a)({expm1_:function(t){const e=Object(I.a)(t,"x","expm1");return b.a.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.exp())}})}}),Et=Object(N.a)({floor_:function(t){const e=Object(I.a)(t,"x","floor");return b.a.runKernelFunc(t=>t.floor(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),At=Object(N.a)({log_:function(t){const e=Object(I.a)(t,"x","log"),n=[e];return b.a.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.toFloat())}},"Log",{},n)}}),Tt=Object(N.a)({log1p_:function(t){const e=Object(I.a)(t,"x","log1p");return b.a.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.add(1))}})}}),$t=Object(N.a)({logSigmoid_:function(t){const e=Object(I.a)(t,"x","logSigmoid");return b.a.runKernelFunc((t,n)=>{const r=t.softplus(e.neg()).neg();return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.neg().sigmoid())}})}}),Rt=Object(N.a)({neg_:function(t){const e=Object(I.a)(t,"x","neg"),n=[e];return b.a.runKernelFunc(t=>t.neg(e),{x:e},t=>({x:()=>t.neg()}),"Neg",{},n)}}),jt=Object(N.a)({reciprocal_:function(t){const e=Object(I.a)(t,"x","reciprocal");return b.a.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.square().neg())}})}}),Dt=Object(N.a)({round_:function(t){const e=Object(I.a)(t,"x","round");return b.a.runKernelFunc(t=>t.round(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),Ft=Object(N.a)({rsqrt_:function(t){const e=Object(I.a)(t,"x","rsqrt"),n=[e];return b.a.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.pow(1.5).mul(2)).neg()}},"Rsqrt",{},n)}}),_t=Object(N.a)({sigmoid_:function(t){const e=Object(I.a)(t,"x","sigmoid");return b.a.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.mul(Object(R.e)(1).sub(n)))}},"Sigmoid")}}),Mt=Object(N.a)({sign_:function(t){const e=Object(I.a)(t,"x","sign");return b.a.runKernelFunc(t=>t.sign(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),Lt=Object(N.a)({isNaN_:function(t){const e=Object(I.a)(t,"x","isNaN");return b.a.runKernelFunc(t=>t.isNaN(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),Bt=Object(N.a)({isInf_:function(t){const e=Object(I.a)(t,"x","isInf");return b.a.runKernelFunc(t=>t.isInf(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),zt=Object(N.a)({isFinite_:function(t){const e=Object(I.a)(t,"x","isFinite");return b.a.runKernelFunc(t=>t.isFinite(e),{$x:e},t=>({$x:()=>Object(R.o)(t)}))}}),Pt=Object(N.a)({sin_:function(t){const e=Object(I.a)(t,"x","sin"),n=[e];return b.a.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().cos().mul(t)}},"Sin",{},n)}}),Wt=Object(N.a)({sinh_:function(t){const e=Object(I.a)(t,"x","sinh");return b.a.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().cosh().mul(t)}})}}),Vt=Object(N.a)({softplus_:function(t){const e=Object(I.a)(t,"x","softplus");return b.a.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.sigmoid())}})}}),Ut=Object(N.a)({sqrt_:function(t){const e=Object(I.a)(t,"x","sqrt");return b.a.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.toFloat().sqrt().mul(2))}},"Sqrt",{})}}),Gt=Object(N.a)({step_:function(t,e=0){const n=Object(I.a)(t,"x","step");return b.a.runKernelFunc(t=>t.step(n,e),{$x:n},t=>({$x:()=>Object(R.o)(t)}))}}),Ht=Object(N.a)({tan_:function(t){const e=Object(I.a)(t,"x","tan");return b.a.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.cos().square())}})}}),qt=Object(N.a)({tanh_:function(t){const e=Object(I.a)(t,"x","tanh");return b.a.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>Object(R.e)(1).sub(n.square()).mul(t)}},"Tanh",{},null,[!0])}}),Kt={kernelName:y.c,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{const e=k(pt(n),pt(r));let a=G(t,U(r,e));const i=w(n.shape,s);return i.length>0&&(a=ht(a,i)),L(a,n.shape)},b:()=>{const e=k(pt(n),pt(r));let a=Rt(G(t,U(n,e)));const i=w(r.shape,s);return i.length>0&&(a=ht(a,i)),L(a,r.shape)}}}};function Xt(t,e,n,r,s,a,i="channelsLast"){const[o,u]=te(e);let c;if("channelsLast"===i)c=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);c=[o,u,t[1],t[1]]}return Jt(t,c,n,r,s,a,!1,i)}function Yt(t,e,n,r,s,a,i="NDHWC"){const[o,u,c]=ee(e);let l,h;if("NDHWC"===i)h="channelsLast",l=[o,u,c,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",l=[o,u,c,t[1],t[1]]}return Zt(t,l,n,r,s,!1,h,a)}function Jt(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,c,l,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,c,l,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,c,l]=t}const[d,p,,f]=e,[m,g]=te(n),[b,y]=te(r),x=ne(d,b),w=ne(p,y),{padInfo:v,outHeight:O,outWidth:S}=function(t,e,n,r,s,a,i,o,u){let c,l,h;if("number"==typeof t){c={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Qt(t,e,n));const a=t[0],i=t[1],o=re((a-e+2*r)/n+1,s);A.assert(A.isInt(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const u=re((i-e+2*r)/n+1,s);return A.assert(A.isInt(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[o,u]}([e,n],a,r,t,o);l=s[0],h=s[1]}else if("same"===t){l=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(l-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(t/2),d=t-u,p=Math.floor(o/2);c={top:u,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===t)c={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const d="channelsLast"===u?t[1][0]:t[2][0],p="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];c={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},l=re((e-a+d+p)/r+1,o),h=re((n-i+f+m)/s+1,o)}}return{padInfo:c,outHeight:l,outWidth:h}}(s,c,l,m,g,x,w,a,o),C=i?f*h:f;let I;return"channelsFirst"===o?I=[u,C,O,S]:"channelsLast"===o&&(I=[u,O,S,C]),{batchSize:u,dataFormat:o,inHeight:c,inWidth:l,inChannels:h,outHeight:O,outWidth:S,outChannels:C,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:b,dilationWidth:y,inShape:t,outShape:I,filterShape:e}}function Zt(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,c,l,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,c,l,h,d]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,d,c,l,h]=t}const[p,f,m,,g]=e,[b,y,x]=ee(n),[w,v,O]=ee(r),S=ne(p,w),C=ne(f,v),I=ne(m,O),{padInfo:N,outDepth:k,outHeight:E,outWidth:T}=function(t,e,n,r,s,a,i,o,u,c,l){let h,d,p,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Qt(t,e,r));const i=t[0],o=t[1],u=t[2],c=re((i-e+2*s)/r+1,a);A.assert(A.isInt(c),()=>`The output # of depths (${c}) must be an integer. Change the stride and/or zero pad parameters`);const l=re((o-e+2*s)/r+1,a);A.assert(A.isInt(l),()=>`The output # of rows (${l}) must be an integer. Change the stride and/or zero pad parameters`);const h=re((u-e+2*s)/r+1,a);return A.assert(A.isInt(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[c,l,h,n]}([e,n,r,1],o,1,s,t,l);d=a[0],p=a[1],f=a[2]}else if("same"===t){d=Math.ceil(e/s),p=Math.ceil(n/a),f=Math.ceil(r/i);const t=(d-1)*s+o-e,l=(p-1)*a+u-n,m=(f-1)*i+c-r,g=Math.floor(t/2),b=t-g,y=Math.floor(l/2),x=l-y,w=Math.floor(m/2);h={top:y,bottom:x,left:w,right:m-w,front:g,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/s),p=Math.ceil((n-u+1)/a),f=Math.ceil((r-c+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,c,l,h,b,y,x,S,C,I,o),$=a?g*d:g;let R;return"channelsFirst"===i?R=[u,$,k,E,T]:"channelsLast"===i&&(R=[u,k,E,T,$]),{batchSize:u,dataFormat:i,inDepth:c,inHeight:l,inWidth:h,inChannels:d,outDepth:k,outHeight:E,outWidth:T,outChannels:$,padInfo:N,strideDepth:b,strideHeight:y,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:C,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:O,inShape:t,outShape:R,filterShape:e}}function Qt(t,e,n,r=1){const s=ne(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function te(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ee(t){return"number"==typeof t?[t,t,t]:t}function ne(t,e){return e<=1?t:t+(t-1)*(e-1)}function re(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function se(t){const[e,n,r]=te(t);return 1===e&&1===n&&1===r}function ae(t,e){return se(t)||se(e)}function ie(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const oe=Object(N.a)({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Object(I.a)(t,"dy","avgPool3dBackprop"),u=Object(I.a)(e,"input","avgPool3dBackprop");let c=o,l=u,h=!1;4===u.rank&&(h=!0,c=L(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=L(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),A.assert(5===c.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."),A.assert(5===l.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."),A.assert(ae(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&A.assert(A.isInt(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const d={dy:c,input:l},p={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=b.a.runKernelFunc(t=>{const e=Yt(l.shape,n,r,s,a,i);return t.avgPool3dBackprop(c,l,e)},d,null,y.f,p);return h?L(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),ue={kernelName:y.e,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,c=null==i?[1,1,1]:i;return{x:()=>oe(t,r,s,a,c,o,u)}}};const ce=Object(N.a)({avgPoolBackprop_:function(t,e,n,r,s){const a=Object(I.a)(t,"dy","avgPoolBackprop"),i=Object(I.a)(e,"input","avgPoolBackprop");A.assert(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,c=!1;3===i.rank&&(c=!0,o=L(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=L(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A.assert(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),A.assert(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const l={dy:u,input:o},h={filterSize:n,strides:r,pad:s},d=b.a.runKernelFunc(t=>{const e=Xt(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)},l,null,y.g,h);return c?L(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),le={kernelName:y.d,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>ce(t,r,s,a,i)}}};const he=Object(N.a)({matMul_:function(t,e,n=!1,r=!1){let s=Object(I.a)(t,"a","matMul"),a=Object(I.a)(e,"b","matMul");[s,a]=Object(C.makeTypesMatch)(s,a),A.assert(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],c=r?a.shape[a.rank-2]:a.shape[a.rank-1],l=s.shape.slice(0,-2),h=a.shape.slice(0,-2),d=A.sizeFromShape(l),p=A.sizeFromShape(h);A.assert(A.arraysEqual(l,h),()=>`Error in matMul: outer dimensions (${l}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),A.assert(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([u,c]),m=L(s,n?[d,i,u]:[d,u,i]),g=L(a,r?[p,c,o]:[p,o,c]),x={a:m,b:g},w={transposeA:n,transposeB:r},v=b.a.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r)),x,null,y.h,w);return L(v,f)}}),de={kernelName:y.h,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>he(t,s,!1,!1),b:()=>he(t,r,!0,!1)}:a&&!i?{a:()=>he(s,t,!1,!0),b:()=>he(r,t,!1,!1)}:{a:()=>he(s,t,!0,!0),b:()=>he(t,r,!0,!0)}:{a:()=>he(t,s,!1,!0),b:()=>he(r,t,!0,!1)}}};const pe=Object(N.a)({spaceToBatchND_:function(t,e,n){const r=Object(I.a)(t,"x","spaceToBatchND");A.assert(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),A.assert(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),A.assert(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:n};return b.a.runKernelFunc(t=>t.spaceToBatchND(r,e,n),s,null,y.lb,a)}}),fe={kernelName:y.i,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>pe(t,r,s)}}},me={kernelName:y.j,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>ht(t,o,!0)}}};const ge=Object(N.a)({split_:function(t,e,n=0){const r=Object(I.a)(t,"x","split"),s=Object(A.parseAxisParam)(n,r.shape)[0];let a;"number"==typeof e?(Object(A.assert)(r.shape[s]%e==0,()=>"Number of splits must evenly divide the axis."),a=new Array(e).fill(r.shape[s]/e)):(Object(A.assert)(r.shape[s]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),a=e);const i={x:r},o={numOrSizeSplits:e,axis:n};return b.a.runKernelFunc((t,e)=>t.split(r,a,s),i,null,y.mb,o)}}),be={kernelName:y.l,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=Object(A.parseAxisParam)(s,e[0].shape)[0],i=r.map(t=>t[a]);return ge(t,i,a).map(t=>()=>t)}};const ye=Object(N.a)({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=L(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=L(e,[1,e.shape[0],e.shape[1],e.shape[2]])),A.assert(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),A.assert(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),A.assert(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const c="NHWC"===a?o.shape[3]:o.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];A.assert(c===n[2],()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`),A.assert(l===n[3],()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`),null!=i&&A.assert(A.isInt(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:o,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return b.a.runKernelFunc(t=>{const e=ie(a),c=Jt(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,c)},h,null,y.n,d)}});const xe=Object(N.a)({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){A.assert(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,u=e,c=!1;3===e.rank&&(c=!0,u=L(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),A.assert(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),A.assert(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),A.assert(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const l="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];A.assert(l===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`),A.assert(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&A.assert(A.isInt(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d={dy:u,filter:n},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i},f=b.a.runKernelFunc((t,e)=>{const c=ie(a),l=Jt(o,n.shape,r,1,s,i,!1,c),h=t.conv2dDerInput(u,n,l);return e([u,n]),h},d,null,y.o,p);return c?L(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),we={kernelName:y.m,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return A.assert(se(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>xe(r.shape,t,s,i,o,u),filter:()=>ye(r,t,s.shape,i,o,u)}}};const ve=Object(N.a)({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Object(I.a)(t,"x","conv2d"),u=Object(I.a)(e,"filter","conv2d");let c=o,l=!1;3===o.rank&&(l=!0,c=L(o,[1,o.shape[0],o.shape[1],o.shape[2]])),A.assert(4===c.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`),A.assert(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=i&&A.assert(A.isInt(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?c.shape[3]:c.shape[1];A.assert(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),A.assert(ae(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const d={x:c,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=b.a.runKernelFunc((t,e)=>{const o=ie(s),l=Jt(c.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(c,u,l);return e([c,u]),h},d,null,y.m,p);return l?L(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Oe={kernelName:y.o,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>ve(t,s,a,i,o,1,u),filter:()=>ye(t,r,s.shape,a,i,o,u)}}};const Se=Object(N.a)({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=L(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=L(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),A.assert(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),A.assert(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),A.assert(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),A.assert(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),A.assert(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},u={strides:r,pad:s};return b.a.runKernelFunc(t=>{const e=Zt(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},o,null,y.q,u)}});const Ce=Object(N.a)({conv3DBackpropInput_:function(t,e,n,r,s){A.assert(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=L(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],c=i.shape[4];A.assert(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),A.assert(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),A.assert(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),A.assert(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),A.assert(c===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`);const l={dy:i},h={pad:s},d=b.a.runKernelFunc(t=>{const e=Zt(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},l,null,y.r,h);return o?L(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Ie={kernelName:y.p,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;A.assert(se(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>Ce(i.shape,t,o,s,a),filter:()=>Se(i,t,o.shape,s,a)}}};const Ne=Object(N.a)({transpose_:function(t,e){const n=Object(I.a)(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),A.assert(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{A.assert(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={perm:e};return b.a.runKernelFunc(t=>t.transpose(n,e),{x:n},null,"Transpose",r)}});const ke=Object(N.a)({cumsum_:function(t,e=0,n=!1,r=!1){const s=Object(I.a)(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return b.a.runKernelFunc((t,a)=>{const i=Q([e],s.rank);let o=s;null!=i&&(o=Ne(s,i));const u=et(1,s.rank)[0];let c=t.cumsum(o,u,n,r);return a([s]),null!=i&&(c=Ne(c,i)),c},a,null,y.s,i)}}),Ee={kernelName:y.s,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=Q([s],r.rank);let n=ke(t,s,a,!i);return null!=e&&(n=Ne(n,e)),n}}}};const Ae=Object(N.a)({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=L(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=L(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return b.a.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),i,null,y.v)}});const Te=Object(N.a)({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=L(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=b.a.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),i,null,y.w);return a?L(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),$e={kernelName:y.u,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;A.assert(se(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,c]=e;A.assert(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),A.assert(4===c.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`),A.assert(u.shape[3]===c.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`),A.assert(ae(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&A.assert(A.isInt(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const l=Jt(u.shape,c.shape,s,o,a,i,!0);return{x:()=>Te(u.shape,t,c,l),filter:()=>Ae(u,t,c.shape,l)}}},Re={kernelName:y.y,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{const e=U(t,r.toFloat()),a=w(n.shape,s);return a.length>0?ht(e,a).reshape(n.shape):e},b:()=>{let e=G(t,n.toFloat());const a=w(r.shape,s);a.length>0&&(e=L(ht(e,a),r.shape));const i=pt(r);return Rt(U(e,i.toFloat()))}}}},je={kernelName:y.z,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>b.a.runKernelFunc(r,s,null,y.A)}}},De={kernelName:y.D,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{const e=t.div(r.toFloat()),a=w(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{let e=t.mul(n.toFloat());const a=w(r.shape,s);a.length>0&&(e=e.sum(a).reshape(r.shape));const i=r.square();return e.div(i.toFloat()).neg()}}}};const Fe=Object(N.a)({sub_:function(t,e){let n=Object(I.a)(t,"a","sub"),r=Object(I.a)(e,"b","sub");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,y.pb)}});const _e=Object(N.a)({tile_:function(t,e){const n=Object(I.a)(t,"x","tile",null);A.assert(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return b.a.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,y.qb,a,r)}}),Me={kernelName:y.F,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?Object(R.e)(1):o,c=w(a.shape,s.shape),l=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)l.push(s.shape[t]);l.push(1)}const h=Fe(s,a),d=G(t,u),p=Ft(k(i,Object(R.e)(r))),f=G(G(G(p,p),p),Object(R.e)(-.5));return{x:()=>1===a.rank?L(G(G(t,_e(p.as4D(1,1,1,a.shape[0]),l)),u),s.shape):L(G(G(t,p),u),s.shape),mean:()=>{let t=G(G(p,Object(R.e)(-1)),d);return 1===a.rank&&(t=ht(t,c)),L(t,a.shape)},variance:()=>{let t=G(G(f,h),d);return 1===a.rank&&(t=ht(t,c)),L(t,a.shape)},scale:()=>{const e=G(h,p);let n=G(t,e);return 1===a.rank&&(n=ht(n,c)),L(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=ht(e,c)),L(e,a.shape)}}}},Le={kernelName:y.I,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Object(R.o)(n),b:()=>Object(R.o)(r)}}},Be={kernelName:y.J,gradFunc:t=>({x:()=>t.toFloat()})};const ze=Object(N.a)({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return b.a.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),o,null,y.M,u)}}),Pe={kernelName:y.L,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>ze(r,s,t,a,i,o,u)}}},We={kernelName:y.P,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=A.parseAxisParam(s,a.shape),u=Q(o,a.rank),c=nt(t,i,a,o,u);return{x:()=>{let t=c.x();return null!=u&&(t=Ne(t)),t}}}};const Ve=Object(N.a)({greaterEqual_:function(t,e){let n=Object(I.a)(t,"a","greaterEqual"),r=Object(I.a)(e,"b","greaterEqual");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},s,null,y.I)}});const Ue=Object(N.a)({less_:function(t,e){let n=Object(I.a)(t,"a","less"),r=Object(I.a)(e,"b","less");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc(t=>t.less(n,r),s,null,y.N)}}),Ge={kernelName:y.V,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>G(t,_(Ve(n,r),"float32")),b:()=>G(t,_(Ue(n,r),"float32"))}}};const He=Object(N.a)({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=Object(I.a)(t,"dy","maxPool3dBackprop"),c=Object(I.a)(e,"input","maxPool3dBackprop"),l=Object(I.a)(n,"output","maxPool3dBackprop");let h=u,d=c,p=l,f=!1;4===c.rank&&(f=!0,h=L(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=L(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),p=L(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),A.assert(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),A.assert(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),A.assert(5===p.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."),A.assert(ae(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&A.assert(A.isInt(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:d,output:p},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},x=b.a.runKernelFunc(t=>{const e=Yt(d.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,d,p,e)},m,null,y.S,g);return f?L(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),qe={kernelName:y.R,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:c}=n,l=null==o?[1,1,1]:o;return{x:()=>He(t,r,s,a,i,l,u,c)}}};const Ke=Object(N.a)({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Object(I.a)(t,"dy","maxPoolBackprop"),u=Object(I.a)(e,"input","maxPoolBackprop"),c=Object(I.a)(n,"output","maxPoolBackprop");A.assert(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),A.assert(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),A.assert(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=i&&A.assert(A.isInt(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const l={dy:o,input:u,output:c},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return b.a.runKernelFunc(t=>{const e=Xt(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,c,e)},l,null,y.T,h)}}),Xe={kernelName:y.Q,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Ke(t,r,s,a,i,o)}}};const Ye=Object(N.a)({greater_:function(t,e){let n=Object(I.a)(t,"a","greater"),r=Object(I.a)(e,"b","greater");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc(t=>t.greater(n,r),s,null,y.H)}});const Je=Object(N.a)({lessEqual_:function(t,e){let n=Object(I.a)(t,"a","lessEqual"),r=Object(I.a)(e,"b","lessEqual");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},s,null,y.O)}}),Ze={kernelName:y.W,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>G(t,_(Je(n,r),"float32")),b:()=>G(t,_(Ye(n,r),"float32"))}}},Qe={kernelName:y.X,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{const e=w(n.shape,s);return e.length>0?L(ht(t,e),n.shape):t},b:()=>{const e=G(t,Rt(Et(U(n,r)))),a=w(r.shape,s);return a.length>0?L(ht(e,a),r.shape):e}}}},tn={kernelName:y.Y,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{const e=G(t,_(r,"float32")),a=w(n.shape,s);return a.length>0?L(ht(e,a),n.shape):e},b:()=>{const e=G(t,_(n,"float32")),a=w(r.shape,s);return a.length>0?L(ht(e,a),r.shape):e}}}},en={kernelName:y.cb,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Object(R.n)(n.shape,"float32")}}},nn={kernelName:y.db,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>t.slice(a,r.shape)}}};function rn(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=D(t,"int32"),s=D([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const sn=Object(N.a)({logicalAnd_:function(t,e){const n=Object(I.a)(t,"a","logicalAnd","bool"),r=Object(I.a)(e,"b","logicalAnd","bool");return v(n.shape,r.shape),b.a.runKernelFunc(t=>t.logicalAnd(n,r),{a:n,b:r},null,"LogicalAnd")}}),an=Object(N.a)({logicalNot_:function(t){const e=Object(I.a)(t,"x","logicalNot","bool");return b.a.runKernelFunc(t=>t.logicalNot(e),{$x:e})}}),on=Object(N.a)({logicalOr_:function(t,e){const n=Object(I.a)(t,"a","logicalOr","bool"),r=Object(I.a)(e,"b","logicalOr","bool");return v(n.shape,r.shape),b.a.runKernelFunc(t=>t.logicalOr(n,r),{$a:n,$b:r})}}),un=Object(N.a)({logicalXor_:function(t,e){const n=Object(I.a)(t,"a","logicalXor","bool"),r=Object(I.a)(e,"b","logicalXor","bool");return v(n.shape,r.shape),on(t,e).logicalAnd(sn(t,e).logicalNot())}}),cn=Object(N.a)({where_:function(t,e,n){const r=Object(I.a)(e,"a","where"),s=Object(I.a)(n,"b","where"),a=Object(I.a)(t,"condition","where","bool");Object(A.assertShapesMatch)(r.shape,s.shape,"Error in where: "),1===a.rank?Object(A.assert)(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."):Object(A.assertShapesMatch)(a.shape,s.shape,"Error in where: ");const i={condition:a,t:r,e:s};return b.a.runKernelFunc((t,e)=>{const n=t.select(a,r,s);return e([a]),n},i,(t,e)=>{const[n]=e;return{condition:()=>Object(R.o)(n).toFloat(),t:()=>t.mul(n.cast(t.dtype)),e:()=>t.mul(n.logicalNot().cast(t.dtype))}},y.jb)}}),ln=async function(t){const e=Object(I.a)(t,"condition","whereAsync","bool"),n=await e.data(),r=rn(e.shape,n);return t!==e&&e.dispose(),r};const hn=Object(N.a)({pow_:function(t,e){let n=Object(I.a)(t,"base","pow"),r=Object(I.a)(e,"exp","pow");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},s,null,y.eb)}}),dn={kernelName:y.eb,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=v(a.shape,i.shape);return{a:()=>{const e=_(i,"float32");let n=G(t,G(e,hn(a,Fe(e,Object(R.e)(1)))));const r=w(a.shape,o);return r.length>0&&(n=ht(n,r)),L(n,a.shape)},b:()=>{const e=Ye(a,0),n=cn(e,At(a),Object(R.o)(a));let r=G(t,G(s,n));const u=w(i.shape,o);return u.length>0&&(r=ht(r,u)),L(r,i.shape)}}}},pn={kernelName:y.fb,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=Ye(n,0);return{x:()=>cn(s,t,G(t,r)),alpha:()=>{let e=cn(s,Object(R.o)(t),G(t,n));const a=w(r.shape,t.shape);return a.length>0&&(e=ht(e,a)),L(e,r.shape)}}}},fn={kernelName:y.ib,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=G(Je(n,6),Gt(n));return{x:()=>G(t,_(r,"float32"))}}},mn={kernelName:y.hb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>G(t,_(Gt(n),"float32"))}}},gn=1.7580993408473768,bn=1.0507009873554805,yn={kernelName:y.kb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Ye(n,Object(R.e)(0)),r=Object(R.e)(gn),s=Object(R.e)(bn),a=G(t,s),i=G(G(t,r),Nt(_(n,"float32")));return cn(e,a,i)}}}};const xn=Object(N.a)({batchToSpaceND_:function(t,e,n){const r=Object(I.a)(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);A.assert(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),A.assert(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),A.assert(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:n};return b.a.runKernelFunc(t=>t.batchToSpaceND(r,e,n),a,null,y.i,i)}}),wn={kernelName:y.lb,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>xn(t,r,s)}}},vn={kernelName:y.mb,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>j(t,r)}}},On={kernelName:y.nb,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>G(t,G(n.toFloat(),2))}}},Sn={kernelName:y.ob,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Object(R.e)(2);return{a:()=>G(t,G(s,Fe(n,r))),b:()=>G(t,G(s,Fe(r,n)))}}},Cn={kernelName:y.pb,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=v(n.shape,r.shape);return{a:()=>{let e=t;const r=w(n.shape,s);return r.length>0&&(e=ht(e,r)),L(e,n.shape)},b:()=>{let e=t;const n=w(r.shape,s);return n.length>0&&(e=ht(e,n)),L(Rt(e),r.shape)}}}};const In=Object(N.a)({pad_:function(t,e,n=0){const r=Object(I.a)(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return b.a.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,y.db,s)}});function Nn(t,e,n){A.assert(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),A.assert(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)A.assert(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function kn(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function En(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function An(t,e,n){const r=[...t];for(let t=0;t<n;t++)0===t?r[e]=1:(r.splice(e,0,1),r.pop());return r}function Tn(t,e,n){const r=[...t];for(let t=0;t<n;t++)0===t?r[e]=0:(r.splice(e,0,0),r.pop());return r}function $n(t,e,n,r){const s=[...t];for(let t=0;t<n;t++)0===t?s[e]=Number.MAX_SAFE_INTEGER:(s.splice(e,0,Number.MAX_SAFE_INTEGER),s.pop());for(let t=0;t<s.length;t++)s[t]=A.clamp(0,s[t],r[t]);return s}function Rn(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function jn(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=A.clamp(0,i,u-1),i}function Dn(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?A.clamp(0,i,u):A.clamp(-1,i,u-1),i}function Fn(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function _n(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}const Mn=Object(N.a)({slice_:function(t,e,n){const r=Object(I.a)(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");let s,a;s="number"==typeof e?[e,...new Array(r.rank-1).fill(0)]:e.length<r.rank?e.concat(new Array(r.rank-e.length).fill(0)):e.slice(),s.forEach(t=>{A.assert(-1!==t,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r.rank).fill(-1):"number"==typeof n?[n,...new Array(r.rank-1).fill(-1)]:n.length<r.rank?n.concat(new Array(r.rank-n.length).fill(-1)):n,a=a.map((t,e)=>t>=0?t:(A.assert(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${e}.`),r.shape[e]-s[e])),Nn(r,s,a);const i=r.shape,o={begin:s,size:a};return b.a.runKernelFunc(t=>t.slice(r,s,a),{x:r},t=>{const e=[];for(let n=0;n<t.rank;n++)e.push([s[n],i[n]-s[n]-a[n]]);return{x:()=>In(t,e)}},"Slice",o)}}),Ln=Object(N.a)({slice1d_:function(t,e,n){const r=Object(I.a)(t,"x","slice1d");return A.assert(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Mn(r,[e],[n])}}),Bn=Object(N.a)({slice2d_:function(t,e,n){const r=Object(I.a)(t,"x","slice2d");return A.assert(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Mn(r,e,n)}}),zn=Object(N.a)({slice3d_:function(t,e,n){const r=Object(I.a)(t,"x","slice3d");return A.assert(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Mn(r,e,n)}}),Pn=Object(N.a)({slice4d_:function(t,e,n){const r=Object(I.a)(t,"x","slice4d");return A.assert(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Mn(r,e,n)}}),Wn={kernelName:y.qb,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=Object(R.o)(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=k(e,Mn(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=k(e,Mn(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=k(e,Mn(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=k(e,Mn(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},Vn={kernelName:y.rb,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=tt(s);return{x:()=>Ne(t,a)}}};var Un=n(15);const Gn=[O,S,Kt,le,ue,de,fe,me,be,we,Oe,Ie,Ee,$e,Re,je,De,Me,Le,Be,Pe,en,nn,vn,We,wn,We,Ge,Xe,qe,Ze,Qe,tn,en,nn,dn,pn,mn,fn,yn,wn,vn,On,Sn,Wn,Vn,Cn];for(const t of Gn)Object(Un.d)(t);var Hn=n(9);class qn{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}Object(Hn.b)().get("IS_BROWSER")&&Object(Hn.b)().setPlatform("browser",new qn);n(53);var Kn=n(11);class Xn{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Xn.instance&&(Xn.instance=new Xn),Xn.instance}static registerSaveRouter(t){Xn.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Xn.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Xn.getHandlers(t,"save")}static getLoadHandlers(t,e){return Xn.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Xn.getInstance().loadRouters:Xn.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const Yn=t=>Xn.registerSaveRouter(t),Jn=t=>Xn.registerLoadRouter(t),Zn=t=>Xn.getSaveHandlers(t),Qn=(t,e)=>Xn.getLoadHandlers(t,e);class tr{constructor(){this.managers={}}static getInstance(){return null==tr.instance&&(tr.instance=new tr),tr.instance}static registerManager(t,e){Object(A.assert)(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),Object(A.assert)(t.length>0,()=>"scheme must not be an empty string.");const n=tr.getInstance();Object(A.assert)(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function er(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+tr.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function nr(t,e,n=!1){Object(A.assert)(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=Xn.getLoadHandlers(t);Object(A.assert)(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),Object(A.assert)(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=Xn.getSaveHandlers(e);Object(A.assert)(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),Object(A.assert)(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=er(t).scheme,u=er(t).path,c=o===er(t).scheme,l=await s.load();n&&c&&await tr.getManager(o).removeModel(u);const h=await i.save(l);return n&&!c&&await tr.getManager(o).removeModel(u),h.modelArtifactsInfo}async function rr(){const t=tr.getSchemes(),e={};for(const n of t){const t=await tr.getManager(n).listModels();for(const r in t){e[n+"://"+r]=t[r]}}return e}async function sr(t){const e=er(t);return tr.getManager(e.scheme).removeModel(e.path)}async function ar(t,e){return nr(t,e,!1)}async function ir(t,e){return nr(t,e,!0)}function or(){if(!Object(Hn.b)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ur(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class cr{constructor(t){if(this.indexedDB=or(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ur(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Object(Kn.g)(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}cr.URL_SCHEME="indexeddb://";const lr=t=>{return Object(Hn.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(cr.URL_SCHEME)?(e=t.slice(cr.URL_SCHEME.length),new cr(e)):null;var e};Xn.registerSaveRouter(lr),Xn.registerLoadRouter(lr);class hr{constructor(){this.indexedDB=or()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>ur(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(cr.URL_SCHEME)?e.slice(cr.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ur(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(Object(Hn.b)().getBool("IS_BROWSER"))try{tr.registerManager(cr.URL_SCHEME,new hr)}catch(t){}const dr="tensorflowjs_models",pr="info",fr="model_topology",mr="weight_specs",gr="weight_data",br="model_metadata";function yr(t){return{info:[dr,t,pr].join("/"),topology:[dr,t,fr].join("/"),weightSpecs:[dr,t,mr].join("/"),weightData:[dr,t,gr].join("/"),modelMetadata:[dr,t,br].join("/")}}function xr(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class wr{constructor(t){if(!Object(Hn.b)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=yr(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Object(Kn.g)(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(Kn.a)(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=Object(Kn.b)(a),e}}wr.URL_SCHEME="localstorage://";const vr=t=>{return Object(Hn.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(wr.URL_SCHEME)?(e=t.slice(wr.URL_SCHEME.length),new wr(e)):null;var e};Xn.registerSaveRouter(vr),Xn.registerLoadRouter(vr);class Or{constructor(){Object(A.assert)(Object(Hn.b)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Object(A.assert)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=dr+"/",n="/"+pr;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[xr(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=yr(t=(e=t).startsWith(wr.URL_SCHEME)?e.slice(wr.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(Object(Hn.b)().getBool("IS_BROWSER"))try{tr.registerManager(wr.URL_SCHEME,new Or)}catch(t){}function Sr(t){return new Promise(t=>setTimeout(t)).then(t)}class Cr{constructor(t){if(!Object(Hn.b)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Cr.URL_SCHEME)&&(t=t.slice(Cr.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Sr(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Sr(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Object(Kn.g)(t)}}}}Cr.URL_SCHEME="downloads://";class Ir{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let u;try{u=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const c=[],l=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{l.push(t),h.push(null)}),c.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=l.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:c,weightData:Object(Kn.d)(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(u[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Object(Kn.c)(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=Object(Kn.c)(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function Nr(t){return new Ir(t)}function kr(t,e,n,r){!function(t){Object(A.assert)(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){Object(A.assert)(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),Object(A.assert)(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),Object(A.assert)(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}Xn.registerSaveRouter(t=>Object(Hn.b)().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Cr.URL_SCHEME)?function(t="model"){return new Cr(t)}(t.slice(Cr.URL_SCHEME.length)):null);var Er=n(27);async function Ar(t,e){null==e&&(e={});const n=null==e.fetchFunc?Object(Hn.b)().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(r):await kr(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await kr(s,e.onProgress,.5,1)}async function Tr(t,e="",n,r){return $r(t=>Ar(t,{requestInit:r}))(t,e,n)}function $r(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const u="quantization"in t?t.quantization.dtype:t.dtype,c=Er.a[u]*A.sizeFromShape(t.shape),l=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:c})};null!=r?r.forEach((e,n)=>{e===t.name&&(l(),i[n]=!0)}):l(),o.push(t.name),n+=c})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),c=[];u.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;c.push(e)})});const l=await t(c),h={};let d=0;return u.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=l[d+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(l[d+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),n=Object(Kn.e)(e,[t.manifestEntry]);for(const t in n)h[t]=n[t]}),d+=n}),h}}class Rr{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(Object(A.assert)("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=Object(Hn.b)().platform.fetch,Object(A.assert)(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&Object(A.assert)(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Object(Kn.g)(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=r){const t=await this.loadWeights(r);[u,c]=t}return{modelTopology:n,weightSpecs:u,weightData:c,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[];t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})});const o=await Ar(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[a,Object(Kn.d)(o)]}}function jr(t){return null!=t.match(Rr.URL_SCHEME_REGEX)}Rr.URL_SCHEME_REGEX=/^https?:\/\//;const Dr=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>jr(t)):jr(t),n)return Fr(t,e)}return null};function Fr(t,e){return new Rr(t,e)}function _r(t,e){return Fr(t,e)}Xn.registerSaveRouter(Dr),Xn.registerLoadRouter(Dr);class Mr{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Lr{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function Br(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Mr(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Mr({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Mr({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})}function zr(t){return new Lr(t)}const Pr=Object(N.a)({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);let s=Object(I.a)(t,"indices","oneHot","int32");const a=[...s.shape,e];s=s.flatten();const i={indices:s},o={depth:e,onValue:n,offValue:r};return b.a.runKernelFunc((t,i)=>(i([s]),L(t.oneHot(s,e,n,r),a)),i,null,y.cb,o)}});Object(N.a)({confusionMatrix_:function(t,e,n){const r=Object(I.a)(t,"labels","confusionMatrix"),s=Object(I.a)(e,"predictions","confusionMatrix");A.assert(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),A.assert(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),A.assert(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),A.assert(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),A.assert(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Pr(r.asType("int32"),n),i=Pr(s.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}});let Wr;async function Vr(t,e){let n=Object(I.a)(t,"img","toPixels");if(!(t instanceof E.a)){const t=n;n=t.toInt(),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=n.min(),u=n.max(),c=await Promise.all([o.data(),u.data()]),l=c[0],h=c[1],d=l[0],p=h[0];if(o.dispose(),u.dispose(),"float32"===n.dtype){if(d<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${d} - ${p}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(d<0||p>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${d} - ${p}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){let e,n,r,s;1===a?(e=i[t]*f,n=i[t]*f,r=i[t]*f,s=255):3===a?(e=i[3*t]*f,n=i[3*t+1]*f,r=i[3*t+2]*f,s=255):4===a&&(e=i[4*t]*f,n=i[4*t+1]*f,r=i[4*t+2]*f,s=i[4*t+3]*f);const o=4*t;m[o+0]=Math.round(e),m[o+1]=Math.round(n),m[o+2]=Math.round(r),m[o+3]=Math.round(s)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(m,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),m}const Ur=Object(N.a)({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Object(Un.b)(y.E,b.a.backendName)){const n={pixels:t},r={numChannels:e};return b.a.runKernel(y.E,n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let c,l;if(i?c=t.getContext("2d").getImageData(0,0,o,u).data:r||n?c=t.data:(a||s)&&(null==Wr&&(Wr=document.createElement("canvas").getContext("2d")),Wr.canvas.width=o,Wr.canvas.height=u,Wr.drawImage(t,0,0,o,u),c=Wr.getImageData(0,0,o,u).data),4===e)l=new Int32Array(c);else{const t=o*u;l=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)l[n*e+t]=c[4*n+t]}const h=[u,o,e];return Object(R.i)(l,h,"int32")}});function Gr(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const u=[...Object(A.computeStrides)(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,u]}function Hr(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function qr(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Hr(n,e,t)}function Kr(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:Object(A.sizeFromShape)(e.shape)/o,sliceSize:i,strides:[...Object(A.computeStrides)(n.slice(0,s)),1],outputSize:Object(A.sizeFromShape)(n)}}class Xr{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Yr{constructor(){this.classNameMap={}}static getMap(){return null==Yr.instance&&(Yr.instance=new Yr),Yr.instance}static register(t){Yr.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Jr(t){Object(A.assert)(null!=t.className,()=>"Class being registered does not have the static className property defined."),Object(A.assert)("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),Object(A.assert)(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Yr.register(t)}const Zr="2.0.1";function Qr(t){Object(Hn.b)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ts(){return b.a}function es(){return b.a.memory()}function ns(t,e){return b.a.tidy(t,e)}function rs(t){Object(C.getTensorsInContainer)(t).forEach(t=>t.dispose())}function ss(t){return b.a.keep(t)}function as(t){return b.a.setBackend(t)}function is(t,e,n=1){return b.a.registerBackend(t,e,n)}function os(){return b.a.backend}Object(E.d)(Qr);const us=Object(N.a)({addN_:function(t){A.assert(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),A.assert(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Object(I.a)(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!A.arraysEqual(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return b.a.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,y.b)}});const cs=Object(N.a)({atan2_:function(t,e){let n=Object(I.a)(t,"a","atan2"),r=Object(I.a)(e,"b","atan2");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},s,null,y.c)}});const ls=Object(N.a)({avgPool_:function(t,e,n,r,s){const a=Object(I.a)(t,"x","avgPool","float32");A.assert(ae(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=L(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A.assert(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&A.assert(A.isInt(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let l=b.a.runKernelFunc((t,a)=>{const o=Xt(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&A.arraysEqual(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},u,null,y.d,c);return l=_(l,a.dtype),o?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}});const hs=Object(N.a)({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Qr("dilations is deprecated, this field will be gone in v3.0.0.");const o=Object(I.a)(t,"x","avgPool3d","float32");let u=o,c=!1;4===o.rank&&(c=!0,u=L(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),A.assert(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),A.assert("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),A.assert(ae(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&A.assert(A.isInt(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let d=b.a.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const c=Yt(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,c)},l,null,y.e,h);return d=_(d,u.dtype),c?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});function ds(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}const ps=Object(N.a)({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Object(I.a)(t,"x","batchNorm"),o=Object(I.a)(e,"mean","batchNorm"),u=Object(I.a)(n,"variance","batchNorm");let c,l;null!=s&&(c=Object(I.a)(s,"scale","batchNorm")),null!=r&&(l=Object(I.a)(r,"offset","batchNorm")),A.assert(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),A.assert(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),A.assert(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t,e}(i),d={x:h,scale:c,offset:l,mean:o,variance:u},p={varianceEpsilon:a},f=b.a.runKernelFunc((t,e)=>(e([h,o,u,c]),t.batchNorm(h,ds(o),ds(u),ds(l),ds(c),a)),d,null,y.F,p);return L(f,i.shape)}});const fs=Object(N.a)({batchNorm2d_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"x","batchNorm"),o=Object(I.a)(e,"mean","batchNorm"),u=Object(I.a)(n,"variance","batchNorm");let c,l;return null!=s&&(c=Object(I.a)(s,"scale","batchNorm")),null!=r&&(l=Object(I.a)(r,"offset","batchNorm")),A.assert(2===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),A.assert(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),A.assert(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&A.assert(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`),null!=l&&A.assert(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`),ps(i,o,u,l,c,a)}});const ms=Object(N.a)({batchNorm3d_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"x","batchNorm"),o=Object(I.a)(e,"mean","batchNorm"),u=Object(I.a)(n,"variance","batchNorm");let c,l;return null!=s&&(c=Object(I.a)(s,"scale","batchNorm")),null!=r&&(l=Object(I.a)(r,"offset","batchNorm")),A.assert(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),A.assert(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),A.assert(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&A.assert(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`),null!=l&&A.assert(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`),ps(i,o,u,l,c,a)}});const gs=Object(N.a)({batchNorm4d_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"x","batchNorm"),o=Object(I.a)(e,"mean","batchNorm"),u=Object(I.a)(n,"variance","batchNorm");let c,l;return null!=s&&(c=Object(I.a)(s,"scale","batchNorm")),null!=r&&(l=Object(I.a)(r,"offset","batchNorm")),A.assert(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),A.assert(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),A.assert(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&A.assert(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`),null!=l&&A.assert(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`),ps(i,o,u,l,c,a)}});const bs=Object(N.a)({clone_:function(t){const e=Object(I.a)(t,"x","clone",null);return b.a.runKernelFunc(()=>b.a.makeTensorFromDataId(e.dataId,e.shape,e.dtype),{x:e},null,y.J)}});const ys=Object(N.a)({broadcastTo_:function(t,e){let n=Object(I.a)(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=L(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return bs(n);const i={x:n},o={shape:e,inputShape:s};return b.a.runKernelFunc(t=>t.tile(n,a),i,null,y.j,o)}});var xs=n(16);const ws=Object(N.a)({concat1d_:function(t){return j(t,0)}});const vs=Object(N.a)({concat2d_:function(t,e){return j(t,e)}});const Os=Object(N.a)({concat3d_:function(t,e){return j(t,e)}});const Ss=Object(N.a)({concat4d_:function(t,e){return j(t,e)}});const Cs=Object(N.a)({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Object(I.a)(t,"x","conv1d"),u=Object(I.a)(e,"filter","conv1d");let c=o,l=!1;2===o.rank&&(l=!0,c=L(o,[1,o.shape[0],o.shape[1]])),A.assert(3===c.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`),A.assert(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=i&&A.assert(A.isInt(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),A.assert(c.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`),A.assert(ae(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),A.assert("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=L(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=L(c,[c.shape[0],1,c.shape[1],c.shape[2]]),p=ve(d,h,[1,n],r,"NHWC",[1,a],i);return L(p,l?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const Is=Object(N.a)({conv2dTranspose_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"x","conv2dTranspose"),o=Object(I.a)(e,"filter","conv2dTranspose");return xe(n,i,o,r,s,"NHWC",a)}});const Ns=Object(N.a)({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Object(I.a)(t,"x","conv3d"),o=Object(I.a)(e,"filter","conv3d");let u=i,c=!1;4===i.rank&&(c=!0,u=L(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),A.assert(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),A.assert(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),A.assert(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),A.assert(ae(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),A.assert("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const l={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},d=b.a.runKernelFunc((t,e)=>{const s=Zt(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i},l,null,y.p,h);return c?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});const ks=Object(N.a)({conv3dTranspose_:function(t,e,n,r,s){const a=Object(I.a)(t,"x","conv3dTranspose"),i=Object(I.a)(e,"filter","conv3dTranspose");return Ce(n,a,i,r,s)}});const Es=Object(N.a)({depthToSpace_:function(t,e,n="NHWC"){const r=Object(I.a)(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];A.assert(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),A.assert(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),A.assert(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const o={x:r},u={blockSize:e,dataFormat:n};return b.a.runKernelFunc(t=>t.depthToSpace(r,e,n),o,null,y.t,u)}});const As=Object(N.a)({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Object(I.a)(t,"x","depthwiseConv2d"),u=Object(I.a)(e,"filter","depthwiseConv2d");let c=o,l=!1;3===o.rank&&(l=!0,c=L(o,[1,o.shape[0],o.shape[1],o.shape[2]])),A.assert(4===c.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`),A.assert(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),A.assert(c.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=i&&A.assert(A.isInt(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:c,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},p=b.a.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),A.assert(ae(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=Jt(c.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(c,u,s);return e([c,u]),o},h,null,y.u,d);return l?L(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Ts=Object(N.a)({diag_:function(t){const e=Object(I.a)(t,"x","diag").flatten(),n={x:e};return b.a.runKernelFunc(n=>{const r=n.diag(e),s=[...t.shape,...t.shape];return L(r,s)},n,null,y.x)}});const $s=Object(N.a)({divNoNan_:function(t,e){let n=Object(I.a)(t,"a","div"),r=Object(I.a)(e,"b","div");[n,r]=Object(C.makeTypesMatch)(n,r);const s=U(n,r),a=Object(R.o)(s),i=r.equal(a);return cn(i,a,s)}});const Rs=Object(N.a)({dot_:function(t,e){const n=Object(I.a)(t,"t1","dot"),r=Object(I.a)(e,"t2","dot");A.assert(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(A.assert(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=L(n,[1,-1]),e=L(r,[-1,1]),s=he(t,e);return L(s,[])}if(1===n.rank&&2===r.rank){const t=L(n,[1,-1]),e=L(r,[r.shape[0],r.shape[1]]),s=he(t,e);return L(s,[s.size])}if(2===n.rank&&1===r.rank){const t=L(r,[-1,1]),e=he(n,t);return L(e,[e.size])}{const t=L(r,[r.shape[0],r.shape[1]]);return he(n,t)}}});const js=Object(N.a)({elu_:function(t){const e=Object(I.a)(t,"x","elu"),n={x:e};return b.a.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,y.z)}});const Ds=Object(N.a)({equal_:function(t,e){let n=Object(I.a)(t,"a","equal"),r=Object(I.a)(e,"b","equal");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc(t=>t.equal(n,r),s,null,y.B)}});const Fs=Object(N.a)({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=D([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=s.toTensor().as2D(t,e);if(null==n)return i;if(1===n.length)return _e(M(i,0),[n[0],1,1]);if(2===n.length)return _e(M(M(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return _e(M(M(M(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function _s(t,e,n){const r={shape:t,value:e,dtype:n};return b.a.runKernelFunc(r=>r.fill(t,e,n),{},null,y.C,r)}var Ms=n(23);const Ls=Object(N.a)({maximum_:function(t,e){let n=Object(I.a)(t,"a","maximum"),r=Object(I.a)(e,"b","maximum");[n,r]=Object(C.makeTypesMatch)(n,r),"bool"===n.dtype&&(n=_(n,"int32"),r=_(r,"int32")),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},s,null,y.V)}});const Bs=Object(N.a)({leakyRelu_:function(t,e=.2){const n=Object(I.a)(t,"x","leakyRelu");return Ls(G(Object(R.e)(e),n),n)}});const zs=Object(N.a)({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Object(I.a)(t,"x","localResponseNormalization");A.assert(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),A.assert(A.isInt(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=L(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},c={depthRadius:e,bias:n,alpha:r,beta:s},l=b.a.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},u,null,y.L,c);return o?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}});const Ps=Object(N.a)({max_:function(t,e=null,n=!1){const r=Object(I.a)(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n},i=b.a.runKernelFunc((t,n)=>{let s=A.parseAxisParam(e,r.shape);const a=Q(s,r.rank);let i=r;null!=a&&(i=Ne(r,a),s=et(s.length,i.rank));const o=t.max(i,s);return n([r,o]),null!=a&&t.disposeData(i.dataId),o},s,null,y.P,a);return n?L(i,J(i.shape,A.parseAxisParam(e,r.shape))):i}});const Ws=Object(N.a)({maxPool_:function(t,e,n,r,s){const a=Object(I.a)(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=L(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A.assert(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),A.assert(ae(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&A.assert(A.isInt(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s},l=b.a.runKernelFunc((t,a)=>{const o=Xt(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&A.arraysEqual(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u},u,null,y.Q,c);return o?L(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Vs=Object(N.a)({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Qr("dilations is deprecated, this field will be gone in v3.0.0.");const o=Object(I.a)(t,"x","maxPool3d");let u=o,c=!1;4===o.rank&&(c=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),A.assert(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),A.assert("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),A.assert(ae(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&A.assert(A.isInt(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},d=b.a.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const c=Yt(u.shape,e,n,i,r,s,a),l=t.maxPool3d(u,c);return o([u,l]),l},l,null,y.R,h);return c?L(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Us=Object(N.a)({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Object(I.a)(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=b.a.runKernel(y.U,a,i);return{result:o[0],indexes:o[1]}}});const Gs=Object(N.a)({minimum_:function(t,e){let n=Object(I.a)(t,"a","minimum"),r=Object(I.a)(e,"b","minimum");[n,r]=Object(C.makeTypesMatch)(n,r),"bool"===n.dtype&&(n=_(n,"int32"),r=_(r,"int32")),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},s,null,y.W)}});const Hs=Object(N.a)({mod_:function(t,e){let n=Object(I.a)(t,"a","mod"),r=Object(I.a)(e,"b","mod");[n,r]=Object(C.makeTypesMatch)(n,r);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},s,null,y.X)}});const qs=Object(N.a)({multinomial_:function(t,e,n,r=!1){const s=Object(I.a)(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?s.as2D(1,-1):s,u=b.a.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?u.as1D():u}});const Ks=Object(N.a)({notEqual_:function(t,e){let n=Object(I.a)(t,"a","notEqual"),r=Object(I.a)(e,"b","notEqual");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc(t=>t.notEqual(n,r),s,null,y.bb)}});const Xs=Object(N.a)({outerProduct_:function(t,e){const n=Object(I.a)(t,"v1","outerProduct"),r=Object(I.a)(e,"v2","outerProduct");A.assert(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=L(n,[-1,1]),a=L(r,[1,-1]);return he(s,a)}});const Ys=Object(N.a)({pad1d_:function(t,e,n=0){return Object(A.assert)(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),In(t,[e],n)}});const Js=Object(N.a)({pad2d_:function(t,e,n=0){return Object(A.assert)(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),In(t,e,n)}});const Zs=Object(N.a)({pad3d_:function(t,e,n=0){return Object(A.assert)(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),In(t,e,n)}});const Qs=Object(N.a)({pad4d_:function(t,e,n=0){return Object(A.assert)(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),In(t,e,n)}});const ta=Object(N.a)({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Object(I.a)(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=L(i,[1,i.shape[0],i.shape[1],i.shape[2]])),A.assert(ae(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const c=Xt(o.shape,e,a,s,r),l=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([c.filterHeight,c.filterWidth],l):[[0,0],[0,0]];const d=1===l[0]&&1===l[1],[p,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),u=e.map((t,e)=>[r[e],o[e]]),c=e.map((t,e)=>[0,i[e]]);return[u,c]}([c.inHeight,c.inWidth],l,h),m=d?r:"valid",g=d?o:pe(o,l,p),b=("avg"===n?()=>ls(g,e,a,m):()=>Ws(g,e,a,m))(),y=d?b:xn(b,l,f);return u?L(y,[y.shape[1],y.shape[2],y.shape[3]]):y}});const ea=Object(N.a)({prelu_:function(t,e){const n=Object(I.a)(t,"x","prelu"),r=Object(I.a)(e,"alpha","prelu"),s={x:n,alpha:r};return b.a.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},s,null,y.fb)}});const na=Object(N.a)({rand_:function(t,e,n){const r=Object(A.sizeFromShape)(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return b.a.makeTensor(s,t,n)}});var ra=n(18);class sa{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=ra.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class aa{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=ra.alea(s.toString()),this.randn=new sa(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ia{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ra.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const oa=Object(N.a)({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new aa(e,n,r,s),i=D(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ua=Object(N.a)({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new sa(e,n,r,!1,s),i=D(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ca=Object(N.a)({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=D(t,r),i=new ia(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});var la=n(20);const ha=Object(N.a)({relu_:function(t){const e=Object(I.a)(t,"x","relu"),n={x:e};return b.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?e.toInt():t.relu(e)),n,null,y.hb)}});const da=Object(N.a)({relu6_:function(t){const e=Object(I.a)(t,"x","relu6"),n={x:e};return b.a.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?_(e,"int32"):t.relu6(e)),n,null,y.ib)}});const pa=Object(N.a)({selu_:function(t){const e=Object(I.a)(t,"x","selu"),n={x:e};return b.a.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,y.kb)}});const fa=Object(N.a)({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Object(I.a)(t,"x","separableConv2d"),u=Object(I.a)(e,"depthwiseFilter","separableConv2d"),c=Object(I.a)(n,"pointwiseFilter","separableConv2d");let l=o,h=!1;if(3===o.rank&&(h=!0,l=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A.assert(4===l.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`),A.assert(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),A.assert(4===c.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),A.assert(1===c.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`),A.assert(1===c.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);const d=u.shape[2],p=u.shape[3];A.assert(c.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${c.shape[2]}.`);const f=As(l,u,r,s,i,a),m=ve(f,c,1,"valid",i);return h?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}});const ma=Object(N.a)({squaredDifference_:function(t,e){let n=Object(I.a)(t,"a","squaredDifference"),r=Object(I.a)(e,"b","squaredDifference");[n,r]=Object(C.makeTypesMatch)(n,r),v(n.shape,r.shape);const s={a:n,b:r};return b.a.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,y.ob,{})}});const ga=Object(N.a)({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new sa(e,n,r,!0,s),i=D(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}}),ba=30;function ya(t){return t<=ba?t:Object(A.nearestDivisor)(t,Math.floor(Math.sqrt(t)))}function xa(t,e){let n,r=!1;for(t<=ba?(n=t,r=!0):n=Object(A.nearestDivisor)(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Object(A.nearestDivisor)(t,n+1);return n}function wa(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r}function va(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}function Oa(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Sa(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Ca=Object(N.a)({gather_:function(t,e,n=0){const r=Object(I.a)(t,"x","gather"),s=Object(I.a)(e,"indices","gather","int32");n=Object(A.parseAxisParam)(n,r.shape)[0];const a=va(r,s,n);return b.a.runKernelFunc((t,e)=>{const a=t.gather(r,s.flatten(),n);return e([s]),a},{x:r,indices:s},(t,e)=>{const[s]=e;return{x:()=>{const e=r.shape,a=s.size,i=e.slice(0,n),o=i.length,u=e.slice(n,e.length).slice(1),c=u.length,l=Oa(0,o),h=Oa(o+1,o+1+c),d=Sa([i,[a],u]),p=t.reshape(d),f=s.reshape([a]),m=Sa([[o],l,h]),g=p.transpose(m);let b=Ia(g,f,r.shape[n]);const y=tt(m);return b=b.transpose(y),b},indices:()=>s}},"Gather",{axis:n}).reshape(a.outputShape)}}),Ia=Object(N.a)({unsortedSegmentSum_:function(t,e,n){const r=Object(I.a)(t,"x","unsortedSegmentSum"),s=Object(I.a)(e,"segmentIds","unsortedSegmentSum","int32");return Object(A.assert)(Object(A.isInt)(n),()=>"numSegments must be of dtype int"),b.a.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},{$x:r},(t,e)=>{const[n]=e;return{$x:()=>function(t,e){const n=Ls(e,Object(R.o)(e)),r=Ca(t,n);let s=Ve(e,Object(R.e)(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=M(s,t+1);s=sn(s,Object(R.b)(r.shape,"bool"));const i=Object(R.o)(r);return cn(s,r,i)}(t,n)}})}});const Na=async function(t,e,n){const r=Object(I.a)(t,"tensor","boolMask"),s=Object(I.a)(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;A.assert(i>0,()=>"mask cannot be scalar"),A.assertShapesMatch(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let t=a;t<a+i;t++)u*=o[t];const c=o.slice(0,a).concat([u],o.slice(a+i)),l=r.reshape(c),h=s.reshape([-1]),d=await ln(h),p=d.squeeze([1]),f=Ca(l,p,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),p.dispose(),l.dispose(),h.dispose(),d.dispose(),f};const ka=Object(N.a)({reverse_:function(t,e){const n=Object(I.a)(t,"x","reverse");if(0===n.rank)return n.clone();const r=A.parseAxisParam(e,n.shape);return b.a.runKernelFunc(t=>t.reverse(n,r),{$x:n},t=>({$x:()=>t.reverse(r)})).reshapeAs(n)}}),Ea=Object(N.a)({reverse1d_:function(t){const e=Object(I.a)(t,"x","reverse");return A.assert(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),ka(e,0)}}),Aa=Object(N.a)({reverse2d_:function(t,e){const n=Object(I.a)(t,"x","reverse");return A.assert(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),ka(n,e)}}),Ta=Object(N.a)({reverse3d_:function(t,e){const n=Object(I.a)(t,"x","reverse");return A.assert(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),ka(n,e)}}),$a=Object(N.a)({reverse4d_:function(t,e){const n=Object(I.a)(t,"x","reverse");return A.assert(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),ka(n,e)}});const Ra=Object(N.a)({equalStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","equalStrict"),r=Object(I.a)(e,"b","equalStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),ja=Object(N.a)({greaterEqualStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","greaterEqualStrict"),r=Object(I.a)(e,"b","greaterEqualStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Da=Object(N.a)({greaterStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","greaterStrict"),r=Object(I.a)(e,"b","greaterStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Fa=Object(N.a)({lessEqualStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","lessEqualStrict"),r=Object(I.a)(e,"b","lessEqualStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),_a=Object(N.a)({lessStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","lessStrict"),r=Object(I.a)(e,"b","lessStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Ma=Object(N.a)({notEqualStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","notEqualStrict"),r=Object(I.a)(e,"b","notEqualStrict");return Object(A.assertShapesMatch)(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});const La=Object(N.a)({addStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","addStrict"),r=Object(I.a)(e,"b","addStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Ba=Object(N.a)({divStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","div"),r=Object(I.a)(e,"b","div");return A.assertShapesMatch(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),za=Object(N.a)({maximumStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","maximumStrict"),r=Object(I.a)(e,"b","maximumStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Pa=Object(N.a)({minimumStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","minimumStrict"),r=Object(I.a)(e,"b","minimumStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Wa=Object(N.a)({modStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","modStrict"),r=Object(I.a)(e,"b","modStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Va=Object(N.a)({mulStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","mul"),r=Object(I.a)(e,"b","mul");return A.assertShapesMatch(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Ua=Object(N.a)({powStrict_:function(t,e){return Qr("strict variants of ops have been deprecated and will be removed in future"),A.assertShapesMatch(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),Ga=Object(N.a)({squaredDifferenceStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","squaredDifferenceStrict"),r=Object(I.a)(e,"b","squaredDifferenceStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Ha=Object(N.a)({subStrict_:function(t,e){Qr("strict variants of ops have been deprecated and will be removed in future");const n=Object(I.a)(t,"a","subStrict"),r=Object(I.a)(e,"b","subStrict");return A.assertShapesMatch(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const qa=Object(N.a)({softmax_:function(t,e=-1){const n=Object(I.a)(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);return b.a.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},{logits:n},(t,n)=>{const[r]=n,s=t.mul(r);return{logits:()=>s.sub(s.sum([e],!0).mul(r))}},"Softmax",{dim:e},[],[!0])}}),Ka=Object(N.a)({logSoftmax_:function(t,e=-1){const n=Object(I.a)(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return q((t,n)=>{const r=t.max(e,!0),s=t.sub(r),a=s.toFloat().sub(s.exp().sum(e,!0).log());n([a]);return{value:a,gradFunc:(t,n)=>{const[r]=n,s=r.exp();return t.sub(t.sum(e,!0).mul(s))}}})(n)}});const Xa=Object(N.a)({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Object(R.e)(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Object(I.a)(t,"x","norm"),e,n);let a=s.shape;if(r){const e=Object(A.parseAxisParam)(n,t.shape);a=J(s.shape,e)}return s.reshape(a)}});const Ya=Object(N.a)({basicLSTMCell_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"forgetBias","basicLSTMCell"),o=Object(I.a)(e,"lstmKernel","basicLSTMCell"),u=Object(I.a)(n,"lstmBias","basicLSTMCell"),c=Object(I.a)(r,"data","basicLSTMCell"),l=Object(I.a)(s,"c","basicLSTMCell"),h=Object(I.a)(a,"h","basicLSTMCell"),d=c.concat(h,1).matMul(o).add(u),p=d.shape[0],f=d.shape[1]/4,m=[p,f],g=d.slice([0,0],m),b=d.slice([0,f],m),y=d.slice([0,2*f],m),x=d.slice([0,3*f],m),w=g.sigmoid().mul(b.tanh()).add(l.mul(i.add(y).sigmoid())),v=w.tanh().mul(x.sigmoid());return[w,v]}}),Ja=Object(N.a)({multiRNNCell_:function(t,e,n,r){const s=Object(I.a)(e,"data","multiRNNCell"),a=Object(I.b)(n,"c","multiRNNCell"),i=Object(I.b)(r,"h","multiRNNCell");let o=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);u.push(n[0]),u.push(n[1]),o=n[1]}const c=[],l=[];for(let t=0;t<u.length;t+=2)c.push(u[t]),l.push(u[t+1]);return[c,l]}});const Za=Object(N.a)({movingAverage_:function(t,e,n,r,s=!0){const a=Object(I.a)(t,"v","movingAverage"),i=Object(I.a)(e,"x","movingAverage"),o=Object(I.a)(n,"decay","movingAverage");Object(C.assertTypesMatch)(a,i),A.assert(A.arraysEqual(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=Object(R.e)(1),c=u.sub(o);let l=i.sub(a).mul(c);if(s){A.assert(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Object(I.a)(r,"step","movingAverage");l=l.div(u.sub(hn(o,t)))}return a.add(l)}});const Qa=Object(N.a)({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){null==r&&(r=new Array(e.length));const c=kn(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");let l=Object(I.a)(t,"x","stridedSlice");const h=l.rank-e.length,d=kn(o),p=l.shape.slice();d.forEach(t=>{e[t]=0,n[t]=1,p.splice(t,0,1)}),l=l.reshape(p);for(let t=0;t<l.rank;t++)e[t]=jn(s,e,r,l.shape,t,i),n[t]=Dn(a,n,r,l.shape,t,i),r[t]=Rn(r,t,i);if(c.length&&h>0){const t=c[0],s=h+1;e=Tn(e,t,s),n=$n(n,t,s,l.shape),r=An(r,t,s)}const f=kn(u);f.forEach(t=>{n[t]=e[t]+1,r[t]=1});const m=En(e,n,r),g=m.filter((t,e)=>-1===f.indexOf(e));return r.every(t=>1===t)?Mn(l,e,m).reshape(g):b.a.runKernelFunc(t=>t.stridedSlice(l,e,n,r),{$x:l}).reshape(g)}});const ti=Object(N.a)({topk_:function(t,e=1,n=!0){const r=Object(I.a)(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const[a,i]=b.a.runKernelFunc(t=>t.topk(r,e,n),{$x:r});return{values:a,indices:i}}});const ei=Object(N.a)({scatterND_:function(t,e,n){const r=Object(I.a)(t,"indices","scatterND","int32"),s=Object(I.a)(e,"updates","scatterND");return qr(s,r,n),b.a.runKernelFunc(t=>t.scatterND(r,s,n),{indices:r,updates:s},null,"ScatterNd",{shape:n})}});const ni=Object(N.a)({fft_:function(t){Object(A.assert)("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return b.a.runKernelFunc(t=>t.fft(r),{input:t}).reshape(t.shape)}}),ri=Object(N.a)({ifft_:function(t){Object(A.assert)("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return b.a.runKernelFunc(t=>t.ifft(r),{input:t}).reshape(t.shape)}}),si=Object(N.a)({rfft_:function(t,e){Object(A.assert)("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=t.slice(r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=t.concat(Object(R.n)(r),t.shape.length-1),n=e}else s=t;const a=s.zerosLike(),i=Object(xs.a)(s,a).as2D(r,n),o=ni(i),u=Math.floor(n/2)+1,c=Object(la.a)(o),l=Object(Ms.a)(o),h=c.split([u,n-u],c.shape.length-1),d=l.split([u,n-u],l.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,Object(xs.a)(h[0],d[0]).reshape(p)}}),ai=Object(N.a)({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){const r=t.as2D(n,e),s=ri(r);return Object(la.a)(s)}{const r=[n,2*(e-1)],s=Object(la.a)(t).as2D(n,e),a=Object(Ms.a)(t).as2D(n,e),i=s.slice([0,1],[n,e-2]).reverse(1),o=a.slice([0,1],[n,e-2]).reverse(1).mul(Object(R.e)(-1)),u=s.concat(i,1),c=a.concat(o,1),l=Object(xs.a)(u,c).as2D(r[0],r[1]),h=ri(l);return Object(la.a)(h)}}});const ii=Object(N.a)({sparseToDense_:function(t,e,n,r=0){const s=Object(I.a)(t,"sparseIndices","sparseToDense","int32"),a=Object(I.a)(e,"sparseValues","sparseToDense"),i=Object(I.a)(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),b.a.runKernelFunc(t=>t.sparseToDense(s,a,n,i),{$sparseIndices:s,$sparseValues:a,$defaultValue:i})}});const oi=Object(N.a)({gatherND_:function(t,e){const n=Object(I.a)(e,"indices","gatherND","int32"),r=Object(I.a)(t,"x","gatherND"),s={params:r,indices:n};return b.a.runKernelFunc(t=>t.gatherND(r,n),s,null,y.G)}});const ui=Object(N.a)({dropout_:function(t,e,n,r){const s=Object(I.a)(t,"x","dropout");if(A.assert("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),A.assert(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof E.a?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(A.arraysEqual(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=ca(a,0,1,"float32",r).add(i).floor().div(i);return s.mul(o)}});function ci(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return Object(R.g)(s,"float32")}const li=Object(N.a)({hannWindow_:function(t){return ci(t,.5,.5)}}),hi=Object(N.a)({hammingWindow_:function(t){return ci(t,.54,.46)}}),di=Object(N.a)({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Mn(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=j([Mn(t,a,e-r),_s([r],s)]);i.push(o),a+=n}return 0===i.length?Object(R.h)([],[0,e]):j(i).as2D(i.length,e)}}),pi=Object(N.a)({stft_:function(t,e,n,r,s=li){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=di(t,e,n),o=G(i,s(e)),u=[];for(let t=0;t<i.shape[0];t++)u.push(si(o.slice([t,0],[1,e]),r));return j(u)}});const fi=async function(t,e,n=1){const r=Object(I.a)(t,"predictions","inTopK"),s=Object(I.a)(e,"targets","inTopK");Object(A.assert)(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),Object(A.assert)(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),Object(A.assertShapesMatch)(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];Object(A.assert)(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,c]=[i.length/a,a],l=Object(A.getTypedArrayFromDType)("bool",u);for(let t=0;t<u;t++){const e=t*c,r=i.subarray(e,e+c),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),l[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){l[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),Object(R.f)(l,s.shape,"bool")};var mi;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(mi||(mi={}));const gi=Object(N.a)({absoluteDifference_:function(t,e,n,r=mi.SUM_BY_NONZERO_WEIGHTS){const s=Object(I.a)(t,"labels","absoluteDifference"),a=Object(I.a)(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Object(I.a)(n,"weights","absoluteDifference")),Object(A.assertShapesMatch)(s.shape,a.shape,"Error in absoluteDifference: ");const o=s.sub(a).abs();return bi(o,i,r)}}),bi=Object(N.a)({computeWeightedLoss_:function(t,e,n=mi.SUM_BY_NONZERO_WEIGHTS){const r=Object(I.a)(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Object(I.a)(e,"weights","computeWeightedLoss"));const a=null==s?r:r.mul(s);if(n===mi.NONE)return a;if(n===mi.SUM)return a.sum();if(n===mi.MEAN){if(null==s)return a.mean();{const t=r.size/s.size,e=a.sum().div(s.sum());return t>1?e.div(Object(R.e)(t)):e}}if(n===mi.SUM_BY_NONZERO_WEIGHTS){if(null==s)return a.sum().div(Object(R.e)(r.size));{const t=s.mul(Object(R.b)(r.shape)).notEqual(Object(R.e)(0)).sum().toFloat();return a.sum().div(t)}}throw Error("Unknown reduction: "+n)}}),yi=Object(N.a)({cosineDistance_:function(t,e,n,r,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=Object(I.a)(t,"labels","cosineDistance"),i=Object(I.a)(e,"predictions","cosineDistance");let o=null;null!=r&&(o=Object(I.a)(r,"weights","cosineDistance")),Object(A.assertShapesMatch)(a.shape,i.shape,"Error in cosineDistance: ");const u=Object(R.e)(1).sub(a.mul(i).sum(n,!0));return bi(u,o,s)}}),xi=Object(N.a)({hingeLoss_:function(t,e,n,r=mi.SUM_BY_NONZERO_WEIGHTS){let s=Object(I.a)(t,"labels","hingeLoss");const a=Object(I.a)(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Object(I.a)(n,"weights","hingeLoss")),Object(A.assertShapesMatch)(s.shape,a.shape,"Error in hingeLoss: ");const o=Object(R.e)(1);s=Object(R.e)(2).mul(s).sub(o);const u=o.sub(s.mul(a)).relu();return bi(u,i,r)}}),wi=Object(N.a)({huberLoss_:function(t,e,n,r=1,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=Object(I.a)(t,"labels","huberLoss"),i=Object(I.a)(e,"predictions","huberLoss");let o=null;null!=n&&(o=Object(I.a)(n,"weights","huberLoss")),Object(A.assertShapesMatch)(a.shape,i.shape,"Error in huberLoss: ");const u=Object(R.e)(r),c=i.sub(a).abs(),l=Gs(c,u),h=c.sub(l),d=Object(R.e)(.5).mul(l.square()).add(u.mul(h));return bi(d,o,s)}}),vi=Object(N.a)({logLoss_:function(t,e,n,r=1e-7,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=Object(I.a)(t,"labels","logLoss"),i=Object(I.a)(e,"predictions","logLoss");let o=null;null!=n&&(o=Object(I.a)(n,"weights","logLoss")),Object(A.assertShapesMatch)(a.shape,i.shape,"Error in logLoss: ");const u=Object(R.e)(1),c=Object(R.e)(r),l=a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));return bi(l,o,s)}}),Oi=Object(N.a)({meanSquaredError_:function(t,e,n,r=mi.SUM_BY_NONZERO_WEIGHTS){const s=Object(I.a)(t,"labels","meanSquaredError"),a=Object(I.a)(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Object(I.a)(n,"weights","meanSquaredError")),Object(A.assertShapesMatch)(s.shape,a.shape,"Error in meanSquaredError: ");const o=s.squaredDifference(a);return bi(o,i,r)}}),Si=Object(N.a)({sigmoidCrossEntropy_:function(t,e,n,r=0,s=mi.SUM_BY_NONZERO_WEIGHTS){let a=Object(I.a)(t,"multiClassLabels","sigmoidCrossEntropy");const i=Object(I.a)(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Object(I.a)(n,"weights","sigmoidCrossEntropy")),Object(A.assertShapesMatch)(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Object(R.e)(r),e=Object(R.e)(1),n=Object(R.e)(.5);a=a.mul(e.sub(t)).add(n.mul(t))}const u=function(t,e){const n=Object(I.a)(t,"labels","sigmoidCrossEntropyWithLogits"),r=Object(I.a)(e,"logits","sigmoidCrossEntropyWithLogits");Object(A.assertShapesMatch)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return s.sub(a).add(i)}(a,i);return bi(u,o,s)}}),Ci=Object(N.a)({softmaxCrossEntropy_:function(t,e,n,r=0,s=mi.SUM_BY_NONZERO_WEIGHTS){let a=Object(I.a)(t,"onehotLabels","softmaxCrossEntropy");const i=Object(I.a)(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Object(I.a)(n,"weights","softmaxCrossEntropy")),Object(A.assertShapesMatch)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Object(R.e)(r),e=Object(R.e)(1),n=Object(R.e)(a.shape[1]);a=a.mul(e.sub(t)).add(t.div(n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return q((t,e,r)=>{const s=e.logSumExp([n],!0),a=e.toFloat().sub(s);r([t,a]);return{value:a.mul(t).neg().sum([n]),gradFunc:(t,e)=>{const[r,s]=e,a=J(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(s.exp())),t.reshape(a).mul(s.exp().sub(r.toFloat()))]}}})(t,e)}(a,i);return bi(u,o,s)}});function Ii(t,e=!1){return b.a.tidy(()=>{if(2!==t.shape.length)throw new Error(`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=Fs(n),a=t.clone();const i=Object(R.h)([[1]],[1,1]);let o=i.clone();const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,c=s;[o,a,s]=b.a.tidy(()=>{const e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=Object(R.h)([[-1]]).where(c.greater(0),Object(R.h)([[1]])),h=c.sub(l.mul(u)),d=e.div(h);o=1===d.shape[0]?i.clone():i.concat(d.slice([1,0],[d.shape[0]-1,d.shape[1]]),0);const p=l.matMul(h).div(u).neg(),f=a.slice([t,0],[n-t,r]),m=p.mul(o),g=o.transpose();if(0===t)a=f.sub(m.matMul(g.matMul(f)));else{const e=f.sub(m.matMul(g.matMul(f)));a=a.slice([0,0],[t,r]).concat(e,0)}const b=m.transpose(),y=s.slice([0,t],[n,s.shape[1]-t]);if(0===t)s=y.sub(y.matMul(o).matMul(b));else{const e=y.sub(y.matMul(o).matMul(b));s=s.slice([0,0],[n,t]).concat(e,1)}return[o,a,s]}),rs([e,u,c])}return!e&&n>r&&(s=s.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[s,a]})}const Ni=Object(N.a)({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(`bandPart(): numLower must be an integer, got ${e}.`);if(n%1!=0)throw new Error(`bandPart(): numUpper must be an integer, got ${n}.`);const r=Object(I.a)(t,"a","bandPart");if(r.rank<2)throw new Error(`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=Object(R.d)(0,a,1,"int32").reshape([-1,1]),u=Object(R.d)(0,i,1,"int32"),c=Fe(o,u),l=sn(c.lessEqual(Object(R.e)(+e,"int32")),c.greaterEqual(Object(R.e)(-n,"int32"))),h=Object(R.n)([a,i],r.dtype);return z(P(r.reshape([-1,a,i])).map(t=>cn(l,t,h))).reshape(s)}}),ki=Object(N.a)({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Object(A.assert)(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)Object(A.assert)(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=ge(t,t.shape[0],0).map(t=>B(t,[0]));Object(A.assert)(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(b.a.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=ht(n[r].mul(t)).mul(n[r]);t=t.sub(e)}return t.div(Xa(t,"euclidean"))}));return e?z(n,0):n}}),Ei=Object(N.a)({qr_:function(t,e=!1){if(t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return Ii(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=P(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach(t=>{const[n,r]=Ii(t,e);s.push(n),a.push(r)});return[z(s,0).reshape(t.shape),z(a,0).reshape(t.shape)]}}});function Ai(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||Ti)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Ti(t,e){return t>e?1:t<e?-1:0}function $i(t,e,n,r,s){const a=ji(t,e,n,r,s,0);return a.selectedScores.dispose(),a.numValidOutputs.dispose(),a.selectedIndices}function Ri(t,e,n,r,s,a){const i=ji(t,e,n,r,s,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function ji(t,e,n,r,s,a,i=!1,o=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>s&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(_i);const c=a>0?-.5/a:0,l=[],h=[];for(;l.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=l.length-1;n>=i;--n){const i=Di(t,a,l[n]);if(i>=r){o=!0;break}if(e.score=e.score*Fi(r,c,i),e.score<=s)break}e.suppressBeginIndex=l.length,o||(e.score===n?(l.push(a),h.push(e.score)):e.score>s&&Ai(u,e,_i))}const d=l.length;return o&&(l.fill(0,d),h.fill(0,d)),{selectedIndices:Object(R.g)(l,"int32"),selectedScores:Object(R.g)(h,"float32"),numValidOutputs:Object(R.e)(d,"int32")}}function Di(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(u-i),f=(h-c)*(d-l);if(p<=0||f<=0)return 0;const m=Math.max(a,c),g=Math.max(i,l),b=Math.min(o,h),y=Math.min(u,d),x=Math.max(b-m,0)*Math.max(y-g,0);return x/(p+f-x)}function Fi(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function _i(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Mi(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),A.assert(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),A.assert(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),A.assert(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),A.assert(1===e.rank,()=>"scores must be a 1D tensor"),A.assert(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),A.assert(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Li=Object(N.a)({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Object(I.a)(t,"boxes","nonMaxSuppression"),i=Object(I.a)(e,"scores","nonMaxSuppression"),o=Mi(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return b.a.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,y.Z,u)}});const Bi=Object(N.a)({resizeBilinear_:function(t,e,n=!1){const r=Object(I.a)(t,"images","resizeBilinear");A.assert(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),A.assert(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u=b.a.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),{x:s},(t,e)=>({x:()=>b.a.runKernelFunc(r=>r.resizeBilinearBackprop(t,e[0],n),{})}),"ResizeBilinear",{alignCorners:n,newHeight:i,newWidth:o});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),zi=Object(N.a)({resizeNearestNeighbor_:function(t,e,n=!1){const r=Object(I.a)(t,"images","resizeNearestNeighbor");A.assert(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),A.assert(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),A.assert("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u=b.a.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),{batchImages:s},(t,e)=>({batchImages:()=>b.a.runKernelFunc(r=>r.resizeNearestNeighborBackprop(t,e[0],n),{})}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Pi=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Object(I.a)(t,"boxes","nonMaxSuppressionAsync"),i=Object(I.a)(e,"scores","nonMaxSuppressionAsync"),o=Mi(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),c=$i(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),c},Wi=Object(N.a)({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Object(I.a)(t,"boxes","nonMaxSuppression"),o=Object(I.a)(e,"scores","nonMaxSuppression"),u=Mi(i,o,n,r,s,a),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},l=b.a.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),Vi=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Object(I.a)(t,"boxes","nonMaxSuppressionAsync"),o=Object(I.a)(e,"scores","nonMaxSuppressionAsync"),u=Mi(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const c=await Promise.all([i.data(),o.data()]),l=Ri(c[0],c[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),l},Ui=Object(N.a)({cropAndResize_:function(t,e,n,r,s,a){const i=Object(I.a)(t,"image","cropAndResize"),o=Object(I.a)(e,"boxes","cropAndResize","float32"),u=Object(I.a)(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const c=o.shape[0];return A.assert(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),A.assert(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${o.shape}.`),A.assert(1===u.rank&&u.shape[0]===c,()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${o.shape}.`),A.assert(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),A.assert(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),A.assert("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),b.a.runKernelFunc((t,e)=>t.cropAndResize(i,o,u,r,s,a),{images:i,boxes:o,boxInd:u},null,"CropAndResize",{method:s,extrapolationValue:a,cropSize:r})}}),Gi=(t,e)=>!(t>0)||"linear"===e,Hi=(t,e,n)=>{if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Gradient for activation ${n} has not been implemented yet.`)},qi=(t,e)=>{let n=e;const r=w(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},Ki=(t,e,n)=>{if("linear"===e)return t;if("relu"===e)return ha(t);if("elu"===e)return js(t);if("relu6"===e)return da(t);if("prelu"===e)return ea(t,n);throw new Error(`Unknown fused activation ${e}.`)};const Xi=Object(N.a)({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===Gi(b.a.state.gradientDepth,a)){let o=he(t,e,n,r);return null!=s&&(o=k(o,s)),Ki(o,a,i)}let o=Object(I.a)(t,"a","fused matMul"),u=Object(I.a)(e,"b","fused matMul");[o,u]=Object(C.makeTypesMatch)(o,u);const c=n?o.shape[o.rank-2]:o.shape[o.rank-1],l=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],p=o.shape.slice(0,-2),f=u.shape.slice(0,-2),m=A.sizeFromShape(p),g=A.sizeFromShape(f);A.assert(o.rank>=2&&u.rank>=2&&o.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`),A.assert(A.arraysEqual(p,f),()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${o.shape} and `+u.shape+" must match."),A.assert(c===l,()=>`Error in fused matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,d]),x=n?o.as3D(m,c,h):o.as3D(m,h,c),w=r?u.as3D(g,d,l):u.as3D(g,l,d);let O,S;null!=s&&(O=Object(I.a)(s,"bias","fused matMul"),[O]=Object(C.makeTypesMatch)(O,o),v(y,O.shape)),null!=i&&(S=Object(I.a)(i,"prelu weights","fused matMul"));const N={a:x,b:w};null!=s&&(N.bias=O),null!=i&&(N.preluActivationWeights=S);const E=[x,w];return b.a.runKernelFunc((t,e)=>{const s=t.fusedBatchMatMul({a:x,b:w,transposeA:n,transposeB:r,bias:O,activation:a,preluActivationWeights:S});return e([x,w,s]),s},N,(t,e)=>{const[i,o,u]=e,c=Hi(t,u,a);let l={};return null!=s&&(l={bias:()=>qi(O,c)}),n||r?!n&&r?Object.assign({a:()=>c.matMul(o,!1,!1),b:()=>c.matMul(i,!0,!1)},l):n&&!r?Object.assign({a:()=>o.matMul(c,!1,!0),b:()=>i.matMul(c,!1,!1)},l):Object.assign({a:()=>o.matMul(c,!0,!0),b:()=>c.matMul(i,!0,!0)},l):Object.assign({a:()=>c.matMul(o,!1,!0),b:()=>i.matMul(c,!0,!1)},l)},"_FusedMatMul",{transposeA:n,transposeB:r,activation:a},E,[!0]).reshape(y)}}),Yi=Object(N.a)({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c}){if(u=u||"linear",!1===Gi(b.a.state.gradientDepth,u)){let l=ve(t,e,n,r,s,a,i);return null!=o&&(l=k(l,o)),Ki(l,u,c)}const l=Object(I.a)(t,"x","conv2d"),h=Object(I.a)(e,"filter","conv2d");let d=l,p=!1;3===l.rank&&(p=!0,d=l.as4D(1,l.shape[0],l.shape[1],l.shape[2])),A.assert(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),A.assert(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&A.assert(A.isInt(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),A.assert(d.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`),A.assert(ae(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),A.assert("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Jt(d.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Object(I.a)(o,"bias","fused conv2d"),[m]=Object(C.makeTypesMatch)(m,l),v(f.outShape,m.shape)),null!=c&&(g=Object(I.a)(c,"prelu weights","fused conv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=c&&(y.preluActivationWeights=g);const x=[h,d],w=b.a.runKernelFunc((t,e)=>{const n=t.fusedConv2d({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{const[s,i,c]=e,l=Hi(t,c,u);A.assert(se(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);let h={};return null!=o&&(h={bias:()=>qi(m,l)}),Object.assign({x:()=>xe(i.shape,l,s,n,r),filter:()=>ye(i,l,s.shape,n,r)},h)},"FusedConv2D",{convInfo:f,activation:u},x,[!0]);return p?w.as3D(w.shape[1],w.shape[2],w.shape[3]):w}}),Ji=Object(N.a)({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c}){if(!1===Gi(b.a.state.gradientDepth,u)){let l=As(t,e,n,r,s,a,i);return null!=o&&(l=k(l,o)),Ki(l,u,c)}const l=Object(I.a)(t,"x","depthwiseConv2d"),h=Object(I.a)(e,"filter","depthwiseConv2d");let d=l,p=!1;3===l.rank&&(p=!0,d=l.as4D(1,l.shape[0],l.shape[1],l.shape[2])),A.assert(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),A.assert(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),A.assert(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),A.assert(ae(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&A.assert(A.isInt(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Jt(d.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Object(I.a)(o,"bias","fused conv2d"),[m]=Object(C.makeTypesMatch)(m,l),v(f.outShape,m.shape)),null!=c&&(g=Object(I.a)(c,"prelu weights","fused depthwiseConv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=c&&(y.preluActivationWeights=g);const x=[h,d],w=b.a.runKernelFunc((t,e)=>{const n=t.fusedDepthwiseConv2D({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{A.assert(se(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s]=e,i=Hi(t,s,u);let c={};return null!=o&&(c={bias:()=>qi(m,i)}),Object.assign({x:()=>Te(r.shape,i,n,f),filter:()=>Ae(r,i,n.shape,f)},c)},"FusedDepthwiseConv2D",{convInfo:f,activation:u},x,[!0]);return p?w.as3D(w.shape[1],w.shape[2],w.shape[3]):w}});class Zi extends Xr{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return rs(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return H(t,e)}dispose(){null!=this.iterations_&&rs(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Object(R.e)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Zi,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Qi extends Zi{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=b.a.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=b.a.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:ns(()=>Object(R.o)(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:ns(()=>Object(R.o)(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ns(()=>{const t=a.mul(this.rho).add(s.square().mul(1-this.rho)),e=i.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=i.mul(this.rho).add(e.square().mul(1-this.rho));a.assign(t),i.assign(n);const o=e.mul(-this.learningRate).add(r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(rs(this.accumulatedGrads.map(t=>t.variable)),rs(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}Qi.className="Adadelta",Jr(Qi);class to extends Zi{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=b.a.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:ns(()=>_s(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;ns(()=>{const t=a.add(s.square());a.assign(t);const e=s.div(t.add(b.a.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&rs(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}to.className="Adagrad",Jr(to);class eo extends Zi{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ns(()=>{this.accBeta1=Object(R.e)(e).variable(),this.accBeta2=Object(R.e)(n).variable()}),null==r&&(this.epsilon=b.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ns(()=>{const n=Fe(1,this.accBeta1),r=Fe(1,this.accBeta2);e.forEach((e,s)=>{const a=b.a.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:ns(()=>Object(R.o)(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:ns(()=>Object(R.o)(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,c=o.mul(this.beta1).add(i.mul(1-this.beta1)),l=u.mul(this.beta2).add(i.square().mul(1-this.beta2)),h=c.div(n),d=l.div(r);o.assign(c),u.assign(l);const p=h.div(d.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(p)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&rs(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&rs(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),ns(()=>{this.accBeta1.assign(hn(this.beta1,this.iterations_+1)),this.accBeta2.assign(hn(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}eo.className="Adam",Jr(eo);class no extends Zi{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ns(()=>{this.iteration=Object(R.e)(0).variable(),this.accBeta1=Object(R.e)(e).variable()}),null==r&&(this.epsilon=b.a.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ns(()=>{const n=Fe(1,this.accBeta1),r=U(-this.learningRate,this.iteration.mul(this.decay).add(1));e.forEach((e,s)=>{const a=b.a.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Object(R.o)(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:Object(R.o)(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,c=o.mul(this.beta1).add(i.mul(1-this.beta1)),l=u.mul(this.beta2),h=i.abs(),d=l.maximum(h);o.assign(c),u.assign(d);const p=r.div(n).mul(c.div(d.add(this.epsilon))).add(a);a.assign(p)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&rs(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&rs(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}no.className="Adamax",Jr(no);class ro extends Zi{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=b.a.registeredVariables[e];ns(()=>{const t=this.c.mul(r).add(s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=ss(Object(R.e)(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}ro.className="SGD",Jr(ro);class so extends ro{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Object(R.e)(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=b.a.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:ns(()=>Object(R.o)(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&ns(()=>{let t;const e=this.m.mul(s).add(a);t=this.useNesterov?this.c.mul(a.add(e.mul(this.m))).add(r):this.c.mul(e).add(r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&rs(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}so.className="Momentum",Jr(so);class ao extends Zi{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=b.a.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=b.a.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:ns(()=>Object(R.o)(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:ns(()=>Object(R.o)(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:ns(()=>Object(R.o)(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ns(()=>{const t=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=e.mul(this.decay).add(s.mul(1-this.decay)),u=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.sub(o.square().add(this.epsilon)).sqrt()));a.assign(t),e.assign(o),i.assign(u);const c=r.sub(u);r.assign(c)}else{const t=a.mul(this.decay).add(s.square().mul(1-this.decay)),e=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.add(this.epsilon).sqrt()));a.assign(t),i.assign(e);const n=r.sub(e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&rs(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&rs(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&rs(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}ao.className="RMSProp",Jr(ao);var io=n(21);class oo{static sgd(t){return new ro(t)}static momentum(t,e,n=!1){return new so(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new ao(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new eo(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new Qi(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new no(t,e,n,r,s)}static adagrad(t,e=.1){return new to(t,e)}}const uo={sgd:oo.sgd,momentum:oo.momentum,adadelta:oo.adadelta,adagrad:oo.adagrad,rmsprop:oo.rmsprop,adamax:oo.adamax,adam:oo.adam};var co=n(32);function lo(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function ho(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function po(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function fo(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function mo(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const go=.3275911,bo=.254829592,yo=-.284496736,xo=1.421413741,wo=-1.453152027,vo=1.061405429;function Oo(...t){Object(Hn.b)().getBool("IS_TEST")||console.warn(...t)}function So(...t){Object(Hn.b)().getBool("IS_TEST")||console.log(...t)}function Co(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Io(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function No(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function ko(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Eo(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Ao(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function To(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function $o(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Ro(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=Object(R.n)(t.shape),r=t.toFloat(),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!Object(A.hasEncodingLoss)(t.dtype,e))return b.a.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=r.cast(e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=Object(R.e)(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function jo(t,e){return b.a.makeTensorFromDataId(t.dataId,e,t.dtype)}function Do(t,e,n){const r=(e-t)/(n-1),s=Object(A.makeZerosTypedArray)(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return Object(R.g)(s,"float32")}var Fo=n(30);function _o(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=t.slice(r,a);return r[n]+=e,i})}function Mo(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=D(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function Lo(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=Object(A.getTypedArrayFromDType)(n,i*r),c=Object(A.getTypedArrayFromDType)("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,l=u.subarray(i,i+r),h=c.subarray(i,i+r);for(let t=0;t<r;t++)l[t]=a[t].value,h[t]=a[t].index}const l=e.slice();return l[l.length-1]=r,[Object(R.f)(u,l,n),Object(R.f)(c,l,"int32")]}class Bo{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class zo{time(t){return Po("time")}read(t){return Po("read")}readSync(t){return Po("readSync")}numDataIds(){return Po("numDataIds")}disposeData(t){return Po("disposeData")}write(t,e,n){return Po("write")}move(t,e,n,r){return Po("move")}memory(){return Po("memory")}floatPrecision(){return Po("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return Po("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return Po("fusedBatchMatMul")}slice(t,e,n){return Po("slice")}stridedSlice(t,e,n,r){return Po("stridedSlice")}unstack(t,e){return Po("unstack")}reverse(t,e){return Po("reverse")}concat(t,e){return Po("concat")}neg(t){return Po("neg")}add(t,e){return Po("add")}addN(t){return Po("addN")}subtract(t,e){return Po("subtract")}multiply(t,e){return Po("multiply")}realDivide(t,e){return Po("realDivide")}floorDiv(t,e){return Po("floorDiv")}sum(t,e){return Po("sum")}prod(t,e){return Po("prod")}unsortedSegmentSum(t,e,n){return Po("unsortedSegmentSum")}argMin(t,e){return Po("argMin")}argMax(t,e){return Po("argMax")}equal(t,e){return Po("equal")}notEqual(t,e){return Po("notEqual")}less(t,e){return Po("less")}lessEqual(t,e){return Po("lessEqual")}greater(t,e){return Po("greater")}greaterEqual(t,e){return Po("greaterEqual")}logicalNot(t){return Po("logicalNot")}logicalAnd(t,e){return Po("logicalAnd")}logicalOr(t,e){return Po("logicalOr")}where(t){return Po("where")}select(t,e,n){return Po("select")}topk(t,e,n){return Po("topk")}min(t,e){return Po("min")}minimum(t,e){return Po("minimum")}mod(t,e){return Po("mod")}max(t,e){return Po("max")}maximum(t,e){return Po("maximum")}all(t,e){return Po("all")}any(t,e){return Po("any")}squaredDifference(t,e){return Po("squaredDifference")}ceil(t){return Po("ceil")}floor(t){return Po("floor")}round(t){return Po("round")}sign(t){return Po("sign")}isNaN(t){return Po("isNaN")}isInf(t){return Po("isInf")}isFinite(t){return Po("isFinite")}pow(t,e){return Po("pow")}exp(t){return Po("exp")}expm1(t){return Po("expm1")}softmax(t,e){return Po("softmax")}log(t){return Po("log")}log1p(t){return Po("log1p")}sqrt(t){return Po("sqrt")}rsqrt(t){return Po("rsqrt")}square(t){return Po("square")}reciprocal(t){return Po("reciprocal")}relu(t){return Po("relu")}relu6(t){return Po("relu6")}prelu(t,e){return Po("prelu")}elu(t){return Po("elu")}eluDer(t,e){return Po("eluDer")}selu(t){return Po("selu")}int(t){return Po("int")}clip(t,e,n){return Po("clip")}abs(t){return Po("abs")}complexAbs(t){return Po("complexAbs")}sigmoid(t){return Po("sigmoid")}softplus(t){return Po("softplus")}sin(t){return Po("sin")}cos(t){return Po("cos")}tan(t){return Po("tan")}asin(t){return Po("asin")}acos(t){return Po("acos")}atan(t){return Po("atan")}atan2(t,e){return Po("atan2")}sinh(t){return Po("sinh")}cosh(t){return Po("cosh")}tanh(t){return Po("tanh")}asinh(t){return Po("asinh")}acosh(t){return Po("acosh")}atanh(t){return Po("atanh")}erf(t){return Po("erf")}step(t,e){return Po("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Po("fusedConv2d")}conv2d(t,e,n){return Po("conv2d")}conv2dDerInput(t,e,n){return Po("conv2dDerInput")}conv2dDerFilter(t,e,n){return Po("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Po("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return Po("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return Po("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return Po("depthwiseConv2DDerFilter")}conv3d(t,e,n){return Po("conv3d")}conv3dDerInput(t,e,n){return Po("conv3dDerInput")}conv3dDerFilter(t,e,n){return Po("conv3dDerFilter")}maxPool(t,e){return Po("maxPool")}maxPoolBackprop(t,e,n,r){return Po("maxPoolBackprop")}avgPool(t,e){return Po("avgPool")}avgPoolBackprop(t,e,n){return Po("avgPoolBackprop")}avgPool3d(t,e){return Po("avgPool3d")}avgPool3dBackprop(t,e,n){return Po("avgPool3dBackprop")}maxPool3d(t,e){return Po("maxPool3d")}maxPool3dBackprop(t,e,n,r){return Po("maxPool3dBackprop")}reshape(t,e){return Po("reshape")}cast(t,e){return Po("cast")}tile(t,e){return Po("tile")}pad(t,e,n){return Po("pad")}transpose(t,e){return Po("transpose")}gather(t,e,n){return Po("gather")}gatherND(t,e){return Po("gatherND")}scatterND(t,e,n){return Po("scatterND")}batchToSpaceND(t,e,n){return Po("batchToSpaceND")}spaceToBatchND(t,e,n){return Po("spaceToBatchND")}resizeBilinear(t,e,n,r){return Po("resizeBilinear")}resizeBilinearBackprop(t,e,n){return Po("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return Po("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return Po("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return Po("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return Po("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return Po("LRNGrad")}multinomial(t,e,n,r){return Po("multinomial")}oneHot(t,e,n,r){return Po("oneHot")}cumsum(t,e,n,r){return Po("cumsum")}nonMaxSuppression(t,e,n,r,s){return Po("nonMaxSuppression")}fft(t){return Po("fft")}ifft(t){return Po("ifft")}complex(t,e){return Po("complex")}real(t){return Po("real")}imag(t){return Po("imag")}cropAndResize(t,e,n,r,s,a){return Po("cropAndResize")}depthToSpace(t,e,n){return Po("depthToSpace")}split(t,e,n){return Po("split")}sparseToDense(t,e,n,r){return Po("sparseToDense")}diag(t){return Po("diag")}fill(t,e,n){return Po("fill")}onesLike(t){return Po("onesLike")}zerosLike(t){return Po("zerosLike")}linspace(t,e,n){return Po("linspace")}dispose(){return Po("dispose")}}function Po(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}E.a.prototype.add=function(t){return this.throwIfDisposed(),k(this,t)},E.a.prototype.atan2=function(t){return this.throwIfDisposed(),cs(this,t)},E.a.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),ls(this,t,e,n,r)},E.a.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),ps(this,t,e,n,r,s)},E.a.prototype.broadcastTo=function(t){return this.throwIfDisposed(),ys(this,t)},E.a.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),xn(this,t,e)},E.a.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof E.a&&(t=[t]),j([this,...t],e)},E.a.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Cs(this,t,e,n,r,s,a)},E.a.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ve(this,t,e,n,r,s,a)},E.a.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Is(this,t,e,n,r,s)},E.a.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),ke(this,t,e,n)},E.a.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Es(this,t,e)},E.a.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),As(this,t,e,n,r,s,a)},E.a.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return Qr("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),As(this,t,e,n,r,s,a)},E.a.prototype.div=function(t){return this.throwIfDisposed(),U(this,t)},E.a.prototype.divNoNan=function(t){return this.throwIfDisposed(),$s(this,t)},E.a.prototype.dot=function(t){return this.throwIfDisposed(),Rs(this,t)},E.a.prototype.elu=function(){return this.throwIfDisposed(),js(this)},E.a.prototype.equal=function(t){return this.throwIfDisposed(),Ds(this,t)},E.a.prototype.floorDiv=function(t){return this.throwIfDisposed(),V(this,t)},E.a.prototype.greater=function(t){return this.throwIfDisposed(),Ye(this,t)},E.a.prototype.greaterEqual=function(t){return this.throwIfDisposed(),Ve(this,t)},E.a.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Bs(this,t)},E.a.prototype.less=function(t){return this.throwIfDisposed(),Ue(this,t)},E.a.prototype.lessEqual=function(t){return this.throwIfDisposed(),Je(this,t)},E.a.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),zs(this,t,e,n,r)},E.a.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),he(this,t,e,n)},E.a.prototype.max=function(t,e){return this.throwIfDisposed(),Ps(this,t,e)},E.a.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Ws(this,t,e,n,r)},E.a.prototype.maximum=function(t){return this.throwIfDisposed(),Ls(this,t)},E.a.prototype.minimum=function(t){return this.throwIfDisposed(),Gs(this,t)},E.a.prototype.mod=function(t){return this.throwIfDisposed(),Hs(this,t)},E.a.prototype.mul=function(t){return this.throwIfDisposed(),G(this,t)},E.a.prototype.notEqual=function(t){return this.throwIfDisposed(),Ks(this,t)},E.a.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Pr(this,t,e,n)},E.a.prototype.pad=function(t,e){return this.throwIfDisposed(),In(this,t,e)},E.a.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),ta(this,t,e,n,r,s)},E.a.prototype.pow=function(t){return this.throwIfDisposed(),hn(this,t)},E.a.prototype.prelu=function(t){return this.throwIfDisposed(),ea(this,t)},E.a.prototype.relu=function(){return this.throwIfDisposed(),ha(this)},E.a.prototype.relu6=function(){return this.throwIfDisposed(),da(this)},E.a.prototype.selu=function(){return this.throwIfDisposed(),pa(this)},E.a.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),fa(this,t,e,n,r,s,a)},E.a.prototype.split=function(t,e){return this.throwIfDisposed(),ge(this,t,e)},E.a.prototype.squaredDifference=function(t){return this.throwIfDisposed(),ma(this,t)},E.a.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),pe(this,t,e)},E.a.prototype.sub=function(t){return this.throwIfDisposed(),Fe(this,t)},E.a.prototype.tile=function(t){return this.throwIfDisposed(),_e(this,t)},E.a.prototype.transpose=function(t){return this.throwIfDisposed(),Ne(this,t)},Object(E.e)(f)},function(t,e,n){"use strict";n.r(e),n.d(e,"shuffle",(function(){return s})),n.d(e,"clamp",(function(){return a})),n.d(e,"nearestLargerEven",(function(){return i})),n.d(e,"sum",(function(){return o})),n.d(e,"randUniform",(function(){return u})),n.d(e,"distSquared",(function(){return c})),n.d(e,"assert",(function(){return l})),n.d(e,"assertShapesMatch",(function(){return h})),n.d(e,"assertNonNull",(function(){return d})),n.d(e,"flatten",(function(){return p})),n.d(e,"sizeFromShape",(function(){return f})),n.d(e,"isScalarShape",(function(){return m})),n.d(e,"arraysEqual",(function(){return g})),n.d(e,"isInt",(function(){return b})),n.d(e,"tanh",(function(){return y})),n.d(e,"sizeToSquarishShape",(function(){return x})),n.d(e,"createShuffledIndices",(function(){return w})),n.d(e,"rightPad",(function(){return v})),n.d(e,"repeatedTry",(function(){return O})),n.d(e,"inferFromImplicitShape",(function(){return S})),n.d(e,"parseAxisParam",(function(){return C})),n.d(e,"squeezeShape",(function(){return I})),n.d(e,"getTypedArrayFromDType",(function(){return N})),n.d(e,"getArrayFromDType",(function(){return k})),n.d(e,"checkConversionForErrors",(function(){return E})),n.d(e,"isValidDtype",(function(){return A})),n.d(e,"hasEncodingLoss",(function(){return T})),n.d(e,"isTypedArray",(function(){return $})),n.d(e,"bytesPerElement",(function(){return R})),n.d(e,"bytesFromStringArray",(function(){return j})),n.d(e,"isString",(function(){return D})),n.d(e,"isBoolean",(function(){return F})),n.d(e,"isNumber",(function(){return _})),n.d(e,"inferDtype",(function(){return M})),n.d(e,"isFunction",(function(){return L})),n.d(e,"nearestDivisor",(function(){return B})),n.d(e,"computeStrides",(function(){return z})),n.d(e,"toTypedArray",(function(){return P})),n.d(e,"toNestedArray",(function(){return W})),n.d(e,"makeOnesTypedArray",(function(){return V})),n.d(e,"makeZerosTypedArray",(function(){return U})),n.d(e,"now",(function(){return G})),n.d(e,"assertNonNegativeIntegerDimensions",(function(){return H})),n.d(e,"fetch",(function(){return q})),n.d(e,"encodeString",(function(){return K})),n.d(e,"decodeString",(function(){return X})),n.d(e,"locToIndex",(function(){return Y})),n.d(e,"indexToLoc",(function(){return J}));var r=n(9);function s(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function a(t,e,n){return Math.max(t,Math.min(e,n))}function i(t){return t%2==0?t:t+1}function o(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function u(t,e){const n=Math.random();return e*n+(1-n)*t}function c(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n}function l(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function h(t,e,n=""){l(g(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function d(t){l(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function p(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||$(t)&&!n)for(let r=0;r<t.length;++r)p(t[r],e,n);else e.push(t);return e}function f(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function m(t){return 0===t.length}function g(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function b(t){return t%1==0}function y(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function x(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function w(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return s(e),e}function v(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function O(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function S(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function C(t,e){const n=e.length;return l((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),l(t.every(t=>b(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function I(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:C(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function N(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function k(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function E(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function A(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function T(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function $(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function R(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function j(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function D(t){return"string"==typeof t||t instanceof String}function F(t){return"boolean"==typeof t}function _(t){return"number"==typeof t}function M(t){return Array.isArray(t)?M(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":_(t)?"float32":D(t)?"string":F(t)?"bool":"float32"}function L(t){return!!(t&&t.constructor&&t.call&&t.apply)}function B(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function z(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function P(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=p(t)),n&&E(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function W(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function V(t,e){const n=U(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function U(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function G(){return Object(r.b)().platform.now()}function H(t){t.forEach(e=>{l(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function q(t,e){return Object(r.b)().platform.fetch(t,e)}function K(t,e="utf-8"){return e=e||"utf-8",Object(r.b)().platform.encode(t,e)}function X(t,e="utf-8"){return e=e||"utf-8",Object(r.b)().platform.decode(t,e)}function Y(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function J(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}},function(t,e,n){"use strict";function r(t,e,n,r){const a=e.inputParams[t];if(a&&void 0!==a.inputIndexStart){const t=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?t+1:a.inputIndexEnd;if("tensor"===a.type)return s(e.inputNames[a.inputIndexStart],n,r);if("tensors"===a.type){return e.inputNames.slice(t,i).map(t=>s(t,n,r))}const o=Array.prototype.slice.call(s(e.inputNames.slice(t)[0],n,r).dataSync());return"number"===a.type?o[0]:o}const i=e.attrParams[t];return i&&i.value}function s(t,e,n){const[r,s]=u(t),a=n.currentContextIds.find(t=>!!e[o(r,t)]);return void 0!==a?e[o(r,a)][s]:void 0}function a(t,e,n){return e[o(t,n.currentContextId)]}function i(t,e){const[n,r]=u(t);return[o(n,e&&e.currentContextId),r]}function o(t,e){return e?`${t}-${e}`:t}function u(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function c(t,e){const n=[];for(let r=0;r<t.length;r+=e)n.push(t.slice(r,r+e));return n}n.d(e,"b",(function(){return r})),n.d(e,"c",(function(){return s})),n.d(e,"d",(function(){return a})),n.d(e,"a",(function(){return i})),n.d(e,"e",(function(){return u})),n.d(e,"f",(function(){return c}))},function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return l}));var r=n(5),s=n(9),a=n(7),i=n(1);function o(t,e){let n=t;if(Object(i.isTypedArray)(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Object(i.isTypedArray)(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Object(s.b)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!Object(i.isTypedArray)(e))return void Object(i.assert)(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);Object(i.assert)(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),Object(i.assert)(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],s,r.concat(n))}(t,r,[]),r}function u(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function c(t,e,n,c="numeric"){if(t instanceof a.a)return u(c,t.dtype,e,n),t;let l=Object(i.inferDtype)(t);if("string"!==l&&["bool","int32","float32"].indexOf(c)>=0&&(l=c),u(c,l,e,n),null==t||!Object(i.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const h=o(t,l);Object(i.isTypedArray)(t)||Array.isArray(t)||(t=[t]);const d="string"!==l?Object(i.toTypedArray)(t,l,Object(s.b)().getBool("DEBUG")):Object(i.flatten)(t,[],!0);return r.a.makeTensor(d,h,l)}function l(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>c(t,`${e}[${r}]`,n),r)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(5);function s(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const s=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const a=(...t)=>{r.a.startScope(n);try{const e=s(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(e),e}catch(t){throw r.a.endScope(null),t}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}},function(t,e,n){"use strict";n.d(e,"a",(function(){return p}));var r=n(9),s=n(26),a=n(15),i=n(1);class o{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new u)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});return r.forEach(n=>{n.data().then(r=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(r,n.dtype,t),s.then(s=>{let a="";null!=s.getExtraProfileInfo&&(a=s.getExtraProfileInfo()),this.logger.logKernelProfile(t,n,r,s.kernelMs,e,a)})})}),r}}class u{logKernelProfile(t,e,n,r,s,a){const o="number"==typeof r?i.rightPad(r+"ms",9):r.error,u=i.rightPad(t,25),c=e.rank,l=e.size,h=i.rightPad(e.shape.toString(),14);let d="";for(const t in s){const n=s[t].shape||e.shape,r=n.length;d+=`${t}: ${r}D ${r>0?n:""} `}console.log(`%c${u}\t%c${o}\t%c${c}D ${h}\t%c${l}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var c=n(7),l=n(10);class h{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class d{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new h}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new o(this.backendInstance),!0}setupRegisteredKernels(){Object(a.c)(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Object(a.c)(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return d.nextTensorId++}nextVariableId(){return d.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,i,o){let u,c=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,d=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=Object(a.b)(r,this.backendName);let m;if(null!=f)p=()=>{const t=this.backend.numDataIds();m=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const a=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(l){let t=this.getTensorsForGradient(r,e,a);if(null==t){null==o&&(o=[]);const e=a.filter((t,e)=>o[e]);t=(i||[]).slice().concat(e)}c=this.saveTensorsForBackwardMode(t)}return a};else{const e=t=>{l&&(c=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>t(this.backend,e));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{u=this.ENV.getBool("DEBUG")?this.profiler.profileKernel(r,e,()=>p()):p()}),l&&this.addTapeNode(r,e,u,n,c,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>e[t].shape),outputShapes:u.map(t=>t.shape)}),Array.isArray(m)?u:u[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=Object(a.a)(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(i.assert(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const o=n.filter((t,e)=>s[e]);return a.concat(o)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&i.isString(t[0])&&(s=t.map(t=>i.encodeString(t)));const a=r.write(s,e,n),o=new c.a(e,n,a,this.nextTensorId());if(this.incRef(o,r),"string"===n){const t=this.state.tensorInfo.get(a),e=Object(i.bytesFromStringArray)(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,r){n=n||"float32";const s=new c.a(e,n,t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));const s=new c.c(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*i.bytesPerElement(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof c.c||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,o){const u={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},c=Object(a.a)(t);null!=c&&(r=c.gradFunc),null!=r&&(u.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=i.makeZerosTypedArray(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,o))),this.state.activeTape.push(u)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Object(l.getTensorsInContainer)(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(i.assert(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));i.assert(s instanceof c.a,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=Object(i.makeOnesTypedArray)(Object(i.sizeFromShape)(t),"float32");return p.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const s=e[r],a=[];if(s.outputs.forEach(e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const o=s.gradient(a);for(const e in s.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[e];if(!i.arraysEqual(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=e.add(r),e.dispose()}}}}(t,a,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return i.assert(i.isFunction(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;i.assert(e.every(t=>t instanceof c.a),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),i.assert(n.value instanceof c.a,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),i.assert(i.isFunction(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];i.assert(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),i.assert(a.every(t=>t instanceof c.a),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return a.forEach((t,e)=>{o[e]=()=>t}),o})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Object(i.now)(),n=await this.backend.time(t);return n.wallMs=Object(i.now)()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new h;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}d.nextTensorId=0,d.nextVariableId=0;const p=function(){const t=Object(s.b)();if(null==t._tfengine){const e=new r.a(t);t._tfengine=new d(e)}return Object(r.c)(t._tfengine.ENV),Object(c.f)(()=>t._tfengine),t._tfengine}()},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return s})),n.d(e,"c",(function(){return a})),n.d(e,"d",(function(){return i})),n.d(e,"g",(function(){return o})),n.d(e,"e",(function(){return u})),n.d(e,"f",(function(){return c})),n.d(e,"h",(function(){return l})),n.d(e,"i",(function(){return h})),n.d(e,"j",(function(){return d})),n.d(e,"k",(function(){return p})),n.d(e,"l",(function(){return f})),n.d(e,"m",(function(){return m})),n.d(e,"n",(function(){return g})),n.d(e,"o",(function(){return b})),n.d(e,"p",(function(){return y})),n.d(e,"q",(function(){return x})),n.d(e,"r",(function(){return w})),n.d(e,"s",(function(){return v})),n.d(e,"t",(function(){return O})),n.d(e,"u",(function(){return S})),n.d(e,"v",(function(){return C})),n.d(e,"w",(function(){return I})),n.d(e,"x",(function(){return N})),n.d(e,"y",(function(){return k})),n.d(e,"z",(function(){return E})),n.d(e,"A",(function(){return A})),n.d(e,"B",(function(){return T})),n.d(e,"D",(function(){return $})),n.d(e,"C",(function(){return R})),n.d(e,"F",(function(){return j})),n.d(e,"G",(function(){return D})),n.d(e,"H",(function(){return F})),n.d(e,"I",(function(){return _})),n.d(e,"J",(function(){return M})),n.d(e,"K",(function(){return L})),n.d(e,"N",(function(){return B})),n.d(e,"O",(function(){return z})),n.d(e,"L",(function(){return P})),n.d(e,"M",(function(){return W})),n.d(e,"P",(function(){return V})),n.d(e,"V",(function(){return U})),n.d(e,"Q",(function(){return G})),n.d(e,"T",(function(){return H})),n.d(e,"R",(function(){return q})),n.d(e,"S",(function(){return K})),n.d(e,"U",(function(){return X})),n.d(e,"W",(function(){return Y})),n.d(e,"X",(function(){return J})),n.d(e,"Y",(function(){return Z})),n.d(e,"bb",(function(){return Q})),n.d(e,"Z",(function(){return tt})),n.d(e,"ab",(function(){return et})),n.d(e,"cb",(function(){return nt})),n.d(e,"db",(function(){return rt})),n.d(e,"eb",(function(){return st})),n.d(e,"fb",(function(){return at})),n.d(e,"gb",(function(){return it})),n.d(e,"hb",(function(){return ot})),n.d(e,"ib",(function(){return ut})),n.d(e,"jb",(function(){return ct})),n.d(e,"kb",(function(){return lt})),n.d(e,"lb",(function(){return ht})),n.d(e,"mb",(function(){return dt})),n.d(e,"ob",(function(){return pt})),n.d(e,"nb",(function(){return ft})),n.d(e,"pb",(function(){return mt})),n.d(e,"qb",(function(){return gt})),n.d(e,"rb",(function(){return bt})),n.d(e,"E",(function(){return yt}));const r="Add",s="AddN",a="Atan2",i="AvgPool",o="AvgPoolBackprop",u="AvgPool3D",c="AvgPool3DBackprop",l="BatchMatMul",h="BatchToSpaceND",d="BroadcastTo",p="Complex",f="Concat",m="Conv2D",g="Conv2DBackpropFilter",b="Conv2DBackpropInput",y="Conv3D",x="Conv3DBackpropFilterV2",w="Conv3DBackpropInputV2",v="Cumsum",O="DepthToSpace",S="DepthwiseConv2dNative",C="DepthwiseConv2dNativeBackpropFilter",I="DepthwiseConv2dNativeBackpropInput",N="Diag",k="Div",E="Elu",A="EluGrad",T="Equal",$="FloorDiv",R="Fill",j="FusedBatchNorm",D="GatherNd",F="Greater",_="GreaterEqual",M="Identity",L="Imag",B="Less",z="LessEqual",P="LRN",W="LRNBackprop",V="Max",U="Maximum",G="MaxPool",H="MaxPoolBackprop",q="MaxPool3D",K="MaxPool3DBackprop",X="MaxPoolWithArgmax",Y="Minimum",J="Mod",Z="Multiply",Q="NotEqual",tt="NonMaxSuppressionV3",et="NonMaxSuppressionV5",nt="OneHot",rt="PadV2",st="Pow",at="Prelu",it="Real",ot="Relu",ut="Relu6",ct="SelectV2",lt="Selu",ht="SpaceToBatchND",dt="SplitV",pt="SquaredDifference",ft="Square",mt="Sub",gt="Tile",bt="Transpose",yt="FromPixels"},function(t,e,n){"use strict";n.d(e,"b",(function(){return u})),n.d(e,"f",(function(){return d})),n.d(e,"e",(function(){return p})),n.d(e,"d",(function(){return f})),n.d(e,"a",(function(){return m})),n.d(e,"c",(function(){return g}));var r=n(1);function s(t,e,n,s){const u=Object(r.computeStrides)(e),c=function(t,e,n,s){const i=Object(r.sizeFromShape)(e),u=s[s.length-1],c=new Array(u).fill(0),l=e.length,h="complex64"===n?o(t):t;if(l>1)for(let t=0;t<i/u;t++){const e=t*u;for(let t=0;t<u;t++)c[t]=Math.max(c[t],a(h[e+t],0,n).length)}return c}(t,e,n,u),l=e.length,h=function t(e,n,r,s,u,c=!0){const l="complex64"===r?2:1,h=n[0],d=n.length;if(0===d){if("complex64"===r){return[a(o(e)[0],0,r)]}return"bool"===r?[i(e[0])]:[e[0].toString()]}if(1===d){if(h>20){const t=3*l;let n=Array.from(e.slice(0,t)),s=Array.from(e.slice((h-3)*l,h*l));return"complex64"===r&&(n=o(n),s=o(s)),["["+n.map((t,e)=>a(t,u[e],r)).join(", ")+", ..., "+s.map((t,e)=>a(t,u[h-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?o(e):Array.from(e)).map((t,e)=>a(t,u[e],r)).join(", ")+"]"]}const p=n.slice(1),f=s.slice(1),m=s[0]*l,g=[];if(h>20){for(let n=0;n<3;n++){const s=n*m,a=s+m;g.push(...t(e.slice(s,a),p,r,f,u,!1))}g.push("...");for(let n=h-3;n<h;n++){const s=n*m,a=s+m;g.push(...t(e.slice(s,a),p,r,f,u,n===h-1))}}else for(let n=0;n<h;n++){const s=n*m,a=s+m;g.push(...t(e.slice(s,a),p,r,f,u,n===h-1))}const b=2===d?",":"";g[0]="["+g[0]+b;for(let t=1;t<g.length-1;t++)g[t]=" "+g[t]+b;let y=",\n";for(let t=2;t<d;t++)y+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(c?"":y),g}(t,e,n,u,c),d=["Tensor"];return s&&(d.push("  dtype: "+n),d.push("  rank: "+l),d.push(`  shape: [${e}]`),d.push("  values:")),d.push(h.map(t=>"    "+t).join("\n")),d.join("\n")}function a(t,e,n){let s;return s=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Object(r.isString)(t)?`'${t}'`:"bool"===n?i(t):parseFloat(t.toFixed(7)).toString(),Object(r.rightPad)(s,e)}function i(t){return 0===t?"false":"true"}function o(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class u{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=r.sizeFromShape(t),null!=n){const t=n.length;r.assert(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.getArrayFromDType(e,this.size),this.strides=Object(r.computeStrides)(t)}set(t,...e){0===e.length&&(e=[0]),r.assert(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return c().makeTensor(this.values,this.shape,this.dtype)}}let c=null,l=null,h=null;function d(t){c=t}function p(t){l=t}function f(t){h=t}class m{constructor(t,e,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=r.sizeFromShape(t),this.strides=Object(r.computeStrides)(t),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}flatten(){return this.throwIfDisposed(),this.as1D()}asScalar(){return this.throwIfDisposed(),r.assert(1===this.size,()=>"The array must have only 1 element."),this.reshape([])}as1D(){return this.throwIfDisposed(),this.reshape([this.size])}as2D(t,e){return this.throwIfDisposed(),this.reshape([t,e])}as3D(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])}as4D(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])}as5D(t,e,n,r,s){return this.throwIfDisposed(),this.reshape([t,e,n,r,s])}asType(t){return this.throwIfDisposed(),l.cast(this,t)}get rank(){return this.shape.length}async buffer(){const t=await this.data();return l.buffer(this.shape,this.dtype,t)}bufferSync(){return l.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Object(r.toNestedArray)(this.shape,t)}arraySync(){return Object(r.toNestedArray)(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=c().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>r.decodeString(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=c().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>r.decodeString(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await c().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(c().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}toFloat(){return this.asType("float32")}toInt(){return this.asType("int32")}toBool(){return this.asType("bool")}print(t=!1){return l.print(this,t)}reshape(t){return this.throwIfDisposed(),l.reshape(this,t)}reshapeAs(t){return this.throwIfDisposed(),this.reshape(t.shape)}expandDims(t=0){return l.expandDims(this,t)}squeeze(t){return this.throwIfDisposed(),l.squeeze(this,t)}clone(){return this.throwIfDisposed(),l.clone(this)}toString(t=!1){return s(this.dataSync(),this.shape,this.dtype,t)}gather(t,e=0){return this.throwIfDisposed(),l.gather(this,t,e)}norm(t="euclidean",e=null,n=!1){return this.throwIfDisposed(),l.norm(this,t,e,n)}slice(t,e){return this.throwIfDisposed(),l.slice(this,t,e)}reverse(t){return this.throwIfDisposed(),l.reverse(this,t)}stack(t,e=0){return l.stack([this,t],e)}unstack(t=0){return l.unstack(this,t)}all(t=null,e=!1){return this.throwIfDisposed(),l.all(this,t,e)}any(t=null,e=!1){return this.throwIfDisposed(),l.any(this,t,e)}logSumExp(t=null,e=!1){return this.throwIfDisposed(),l.logSumExp(this,t,e)}sum(t=null,e=!1){return this.throwIfDisposed(),l.sum(this,t,e)}prod(t=null,e=!1){return this.throwIfDisposed(),l.prod(this,t,e)}mean(t=null,e=!1){return this.throwIfDisposed(),l.mean(this,t,e)}min(t=null,e=!1){return this.throwIfDisposed(),l.min(this,t,e)}argMin(t=null){return this.throwIfDisposed(),l.argMin(this,t)}argMax(t=null){return this.throwIfDisposed(),l.argMax(this,t)}cast(t){return this.throwIfDisposed(),l.cast(this,t)}addStrict(t){return this.throwIfDisposed(),l.addStrict(this,t)}subStrict(t){return this.throwIfDisposed(),l.subStrict(this,t)}powStrict(t){return this.throwIfDisposed(),l.powStrict(this,t)}mulStrict(t){return this.throwIfDisposed(),l.mulStrict(this,t)}divStrict(t){return this.throwIfDisposed(),l.divStrict(this,t)}minimumStrict(t){return this.throwIfDisposed(),l.minimumStrict(this,t)}maximumStrict(t){return this.throwIfDisposed(),l.maximumStrict(this,t)}modStrict(t){return this.throwIfDisposed(),l.modStrict(this,t)}squaredDifferenceStrict(t){return this.throwIfDisposed(),l.squaredDifferenceStrict(this,t)}notEqualStrict(t){return this.throwIfDisposed(),l.notEqualStrict(this,t)}lessStrict(t){return this.throwIfDisposed(),l.lessStrict(this,t)}equalStrict(t){return this.throwIfDisposed(),l.equalStrict(this,t)}lessEqualStrict(t){return this.throwIfDisposed(),l.lessEqualStrict(this,t)}greaterStrict(t){return this.throwIfDisposed(),l.greaterStrict(this,t)}greaterEqualStrict(t){return this.throwIfDisposed(),l.greaterEqualStrict(this,t)}logicalAnd(t){return this.throwIfDisposed(),l.logicalAnd(this,t)}logicalOr(t){return this.throwIfDisposed(),l.logicalOr(this,t)}logicalNot(){return this.throwIfDisposed(),l.logicalNot(this)}logicalXor(t){return this.throwIfDisposed(),l.logicalXor(this,t)}where(t,e){return this.throwIfDisposed(),l.where(t,this,e)}neg(){return this.throwIfDisposed(),l.neg(this)}ceil(){return this.throwIfDisposed(),l.ceil(this)}floor(){return this.throwIfDisposed(),l.floor(this)}sign(){return this.throwIfDisposed(),l.sign(this)}isNaN(){return this.throwIfDisposed(),l.isNaN(this)}isInf(){return this.throwIfDisposed(),l.isInf(this)}isFinite(){return this.throwIfDisposed(),l.isFinite(this)}exp(){return this.throwIfDisposed(),l.exp(this)}expm1(){return this.throwIfDisposed(),l.expm1(this)}log(){return this.throwIfDisposed(),l.log(this)}log1p(){return this.throwIfDisposed(),l.log1p(this)}sqrt(){return this.throwIfDisposed(),l.sqrt(this)}rsqrt(){return this.throwIfDisposed(),l.rsqrt(this)}square(){return this.throwIfDisposed(),l.square(this)}reciprocal(){return this.throwIfDisposed(),l.reciprocal(this)}abs(){return this.throwIfDisposed(),l.abs(this)}clipByValue(t,e){return this.throwIfDisposed(),l.clipByValue(this,t,e)}sigmoid(){return this.throwIfDisposed(),l.sigmoid(this)}logSigmoid(){return this.throwIfDisposed(),l.logSigmoid(this)}softplus(){return this.throwIfDisposed(),l.softplus(this)}zerosLike(){return this.throwIfDisposed(),l.zerosLike(this)}onesLike(){return this.throwIfDisposed(),l.onesLike(this)}sin(){return this.throwIfDisposed(),l.sin(this)}cos(){return this.throwIfDisposed(),l.cos(this)}tan(){return this.throwIfDisposed(),l.tan(this)}asin(){return this.throwIfDisposed(),l.asin(this)}acos(){return this.throwIfDisposed(),l.acos(this)}atan(){return this.throwIfDisposed(),l.atan(this)}sinh(){return this.throwIfDisposed(),l.sinh(this)}cosh(){return this.throwIfDisposed(),l.cosh(this)}tanh(){return this.throwIfDisposed(),l.tanh(this)}asinh(){return this.throwIfDisposed(),l.asinh(this)}acosh(){return this.throwIfDisposed(),l.acosh(this)}atanh(){return this.throwIfDisposed(),l.atanh(this)}erf(){return this.throwIfDisposed(),l.erf(this)}round(){return this.throwIfDisposed(),l.round(this)}step(t=0){return this.throwIfDisposed(),l.step(this,t)}softmax(t=-1){return this.throwIfDisposed(),l.softmax(this,t)}logSoftmax(t=-1){return this.throwIfDisposed(),l.logSoftmax(this,t)}resizeBilinear(t,e=!1){return this.throwIfDisposed(),l.image.resizeBilinear(this,t,e)}resizeNearestNeighbor(t,e=!1){return this.throwIfDisposed(),l.image.resizeNearestNeighbor(this,t,e)}variable(t=!0,e,n){return this.throwIfDisposed(),c().makeVariable(this,t,e,n)}unsortedSegmentSum(t,e){return this.throwIfDisposed(),l.unsortedSegmentSum(this,t,e)}topk(t=1,e=!0){return this.throwIfDisposed(),l.topk(this,t,e)}stridedSlice(t,e,n,r=0,s=0,a=0,i=0,o=0){return this.throwIfDisposed(),l.stridedSlice(this,t,e,n,r,s,a,i,o)}fft(){return this.throwIfDisposed(),l.spectral.fft(this)}ifft(){return this.throwIfDisposed(),l.spectral.ifft(this)}rfft(){return this.throwIfDisposed(),l.spectral.rfft(this)}irfft(){return this.throwIfDisposed(),l.spectral.irfft(this)}}Object.defineProperty(m,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class g extends m{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!r.arraysEqual(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);c().disposeTensor(this),this.dataId=t.dataId,c().incRef(this,null)}dispose(){c().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(g,Symbol.hasInstance,{value:t=>t instanceof m&&null!=t.assign&&t.assign instanceof Function})},function(t,e,n){"use strict";n.d(e,"a",(function(){return S})),n.d(e,"b",(function(){return v})),n.d(e,"d",(function(){return C})),n.d(e,"e",(function(){return p})),n.d(e,"f",(function(){return h})),n.d(e,"g",(function(){return f})),n.d(e,"h",(function(){return m})),n.d(e,"i",(function(){return g})),n.d(e,"j",(function(){return b})),n.d(e,"k",(function(){return y})),n.d(e,"l",(function(){return x})),n.d(e,"m",(function(){return w})),n.d(e,"n",(function(){return O})),n.d(e,"c",(function(){return I})),n.d(e,"o",(function(){return N}));var r=n(5),s=n(9),a=n(3),i=n(1),o=n(16),u=n(23),c=n(4),l=n(20);function h(t,e,n){return d(t,e,Object(a.c)(t,n),n)}function d(t,e,n,a){if(null==a&&(a=Object(i.inferDtype)(t)),"complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(i.isTypedArray)(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Object(i.assertNonNegativeIntegerDimensions)(e);const t=Object(i.sizeFromShape)(e),r=Object(i.sizeFromShape)(n);Object(i.assert)(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==Object(i.sizeFromShape)(e.slice(t));Object(i.assert)(n[t]===e[t]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return Object(i.isTypedArray)(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==a?Object(i.toTypedArray)(t,a,Object(s.b)().getBool("DEBUG")):Object(i.flatten)(t,[],!0),r.a.makeTensor(t,e,a)}function p(t,e){if((Object(i.isTypedArray)(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Object(i.isTypedArray)(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return d(t,[],[],e)}function f(t,e){Object(i.assertNonNull)(t);const n=Object(a.c)(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return d(t,null,n,e)}function m(t,e,n){if(Object(i.assertNonNull)(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(a.c)(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return d(t,e,r,n)}function g(t,e,n){if(Object(i.assertNonNull)(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Object(a.c)(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return d(t,e,r,n)}function b(t,e,n){if(Object(i.assertNonNull)(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(a.c)(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return d(t,e,r,n)}function y(t,e,n){if(Object(i.assertNonNull)(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Object(a.c)(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return d(t,e,r,n)}function x(t,e,n){if(Object(i.assertNonNull)(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Object(a.c)(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return d(t,e=e||r,r,n)}function w(t,e=!0,n,s){return r.a.makeVariable(t,e,n,s)}function v(t,e="float32"){if("complex64"===e){const e=v(t,"float32"),n=O(t,"float32");return Object(o.a)(e,n)}const n=Object(i.makeOnesTypedArray)(Object(i.sizeFromShape)(t),e);return r.a.makeTensor(n,t,e)}function O(t,e="float32"){if("complex64"===e){const e=O(t,"float32"),n=O(t,"float32");return Object(o.a)(e,n)}const n=Object(i.makeZerosTypedArray)(Object(i.sizeFromShape)(t),e);return r.a.makeTensor(n,t,e)}function S(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return r.a.runKernelFunc(r=>r.linspace(t,e,n),{})}function C(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return O([0],r);const s=Math.abs(Math.ceil((e-t)/n)),a=Object(i.makeZerosTypedArray)(s,r);e<t&&1===n&&(n=-1),a[0]=t;for(let t=1;t<a.length;t++)a[t]=a[t-1]+n;return f(a,r)}const I=Object(c.a)({onesLike_:function(t){const e=Object(a.a)(t,"x","onesLike");if("complex64"===e.dtype){const t=I(Object(l.a)(e)),n=N(Object(u.a)(e));return Object(o.a)(t,n)}return r.a.runKernelFunc(t=>t.onesLike(e),{x:e},(t,e)=>({x:()=>N(t)}),"OnesLike")}}),N=Object(c.a)({zerosLike_:function(t){const e=Object(a.a)(t,"x","zerosLike");return r.a.runKernelFunc(t=>t.zerosLike(e),{x:e},(t,e)=>({x:()=>N(t)}),"ZerosLike")}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return s})),n.d(e,"c",(function(){return i}));class r{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function s(){return a}let a=null;function i(t){a=t}},function(t,e,n){"use strict";n.r(e),n.d(e,"makeTypesMatch",(function(){return i})),n.d(e,"assertTypesMatch",(function(){return o})),n.d(e,"isTensorInList",(function(){return u})),n.d(e,"getTensorsInContainer",(function(){return c}));var r=n(7),s=n(21),a=n(1);function i(t,e){if(t.dtype===e.dtype)return[t,e];const n=Object(s.b)(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function o(t,e){Object(a.assert)(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function u(t,e){return e.some(e=>e.id===t.id)}function c(t){const e=[];return function t(e,n,s){if(null==e)return;if(e instanceof r.a)return void n.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const i=e;for(const e in i){const r=i[e];s.has(r)||(s.add(r),t(r,n,s))}}(t,e,new Set),e}},function(t,e,n){"use strict";(function(t){n.d(e,"f",(function(){return o})),n.d(e,"e",(function(){return u})),n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return p})),n.d(e,"d",(function(){return f})),n.d(e,"c",(function(){return m})),n.d(e,"g",(function(){return g}));var r=n(16),s=n(8),a=n(1),i=n(27);async function o(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:c(await Promise.all(r)),specs:n}}function u(t,e){const n={};let o,u=0;for(const c of e){const e=c.name,l=c.dtype,h=c.shape,d=Object(a.sizeFromShape)(h);let p;if("quantization"in c){const n=c.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${c.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${c.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${c.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${l}.`)}const r=i.a[n.dtype],s=t.slice(u,u+d*r),a="uint8"===n.dtype?new Uint8Array(s):new Uint16Array(s);if("float32"===l)if("uint8"===n.dtype||"uint16"===n.dtype){p=new Float32Array(a.length);for(let t=0;t<a.length;t++){const e=a[t];p[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===o&&(o=b()),p=o(a)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${e}': ${l}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);p=new Int32Array(a.length);for(let t=0;t<a.length;t++){const e=a[t];p[t]=Math.round(e*n.scale+n.min)}}u+=d*r}else if("string"===l){const e=Object(a.sizeFromShape)(c.shape);p=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(u,u+4))[0];u+=4;const n=new Uint8Array(t.slice(u,u+e));p.push(n),u+=e}}else{const a=i.a[l],o=t.slice(u,u+d*a);if("float32"===l)p=new Float32Array(o);else if("int32"===l)p=new Int32Array(o);else if("bool"===l)p=new Uint8Array(o);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${e}': ${l}`);{p=new Float32Array(o);const t=new Float32Array(p.length/2),a=new Float32Array(p.length/2);for(let e=0;e<t.length;e++)t[e]=p[2*e],a[e]=p[2*e+1];const i=Object(s.f)(t,h,"float32"),u=Object(s.f)(a,h,"float32");n[e]=Object(r.a)(i,u)}}u+=d*a}"complex64"!==l&&(n[e]=Object(s.f)(p,h,l))}return n}function c(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const l=void 0!==t&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function h(e){return l?t.byteLength(e):new Blob([e]).size}function d(e){if(l)return t.from(e).toString("base64");const n=new Uint8Array(e);let r="";for(let t=0,e=n.length;t<e;t++)r+=String.fromCharCode(n[t]);return btoa(r)}function p(e){if(l){const n=t.from(e,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const n=atob(e),r=new Uint8Array(n.length);for(let t=0;t<n.length;++t)r.set([n.charCodeAt(t)],t);return r.buffer}function f(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function m(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function g(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:h(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:h(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function b(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}}).call(this,n(31).Buffer)},function(t,e,n){"use strict";n.d(e,"f",(function(){return l})),n.d(e,"e",(function(){return h})),n.d(e,"d",(function(){return d})),n.d(e,"g",(function(){return p})),n.d(e,"a",(function(){return f})),n.d(e,"b",(function(){return I})),n.d(e,"c",(function(){return r}));var r,s=n(0),a=n(18),i=n(17);function o(t){return t instanceof s.l?{value:t.clone(),recurse:!1}:Object(i.e)(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class u{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class c extends u{constructor(){super(c.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function l(t){return new m(t)}function h(t){return new g(t)}function d(t,e){return new k(t,e)}function p(t,e=r.FAIL){return new E(t,e)}c.INITIAL_CAPACITY=32;class f{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new S(this,t)}filter(t){return new v(this,t)}map(t){return new O(this,t)}mapAsync(t){return new C(this,t)}serialMapAsync(t){return new C(this,t).serial()}flatmap(t){return new N(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new w(this,t,e)}columnMajorBatch(t,e=!0,n=i.f){return this.rowMajorBatch(t,e).map(t=>Object(i.d)(t,n))}concatenate(t,e){return new k(l([this,t]),e)}take(t){return t<0||null==t?this:new x(this,t)}skip(t){return t<0||null==t?this:new y(this,t)}prefetch(t){return new A(this,t)}shuffle(t,e){return new T(this,t,e)}serial(){return new b(this)}}class m extends f{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,Object(i.b)(e,o)),done:!1};var e}}class g extends f{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class b extends f{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class y extends f{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;s.hb(t.value)}return this.upstream.next()}}class x extends f{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class w extends f{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class v extends f{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;s.hb(t.value)}}}class O extends f{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.sd.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.sd.getTensorsInContainer(n);for(const t of e)s.sd.isTensorInList(t,r)||t.dispose();return{value:n,done:!1}}}class S extends f{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class C extends f{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.sd.getTensorsInContainer(t.value),n=await this.transform(t.value),r=s.sd.getTensorsInContainer(n);for(const t of e)s.sd.isTensorInList(t,r)||t.dispose();return{value:n,done:!1}}}class I extends f{constructor(){super(),this.outputQueue=new c,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class N extends I{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=s.sd.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.sd.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const t of e)s.sd.isTensorInList(t,r)||t.dispose();return!0}}class k extends f{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(r||(r={}));class E extends f{constructor(t,e=r.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const s=await Object(i.c)(this.iterators,(function(t){if(t instanceof f){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case r.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case r.SHORTEST:return{value:null,done:!0};case r.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class A extends f{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new u(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class T extends A{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=a.alea(n||s.Bd.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return S})),n.d(e,"i",(function(){return I})),n.d(e,"c",(function(){return N})),n.d(e,"f",(function(){return k})),n.d(e,"e",(function(){return T})),n.d(e,"d",(function(){return $})),n.d(e,"k",(function(){return j})),n.d(e,"g",(function(){return D})),n.d(e,"h",(function(){return F})),n.d(e,"j",(function(){return _})),n.d(e,"b",(function(){return M}));var r=n(0),s=n(19),a=n(22),i=n(2),o=n(33),u=n(34),c=n(35),l=n(36),h=n(37),d=n(38),p=n(39),f=n(40),m=n(41),g=n(42),b=n(43),y=n(44),x=n(45),w=n(46),v=n(47),O=n(48);class S{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[o,u,c,l,h,d,p,g,m,f,b,y,x,w,v,O].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&s.push(t[e.name]),t),{});let o=[];const u=[];let c={},l={};null!=e&&(c=this.mapSignatureEntries(e.inputs),l=this.mapSignatureEntries(e.outputs));const h=Object.keys(a);h.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=Object(i.a)(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(l).length?h.forEach(t=>{const e=a[t];0===e.children.length&&u.push(e)}):Object.keys(l).forEach(t=>{const[e]=Object(i.a)(t),n=a[e];null!=n&&(n.signatureKey=l[t],u.push(n))}),Object.keys(c).length>0?Object.keys(c).forEach(t=>{const[e]=Object(i.a)(t),n=a[e];n&&(n.signatureKey=c[t],o.push(n))}):o=r;let d={};return null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{})),{nodes:a,inputs:o,outputs:u,weights:s,placeholders:r,signature:e,functions:d}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=Object(a.a)(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=I(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=I(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=F(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=F(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=k(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=k(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=D(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=D(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=N(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=N(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=M(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=M(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=j(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=j(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=_(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=T(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=T(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=$(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=$(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=A(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=A(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const s=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=Object(i.a)(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:E(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n});Object.keys(r).forEach(t=>{const e=r[t];e.inputNames.forEach(t=>{const[n]=Object(i.a)(t);e.inputs.push(r[n]),r[n].children.push(e)})});const o=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=Object(i.a)(o[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))});const u=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:u}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function C(e,n){const s=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const n=Object(r.nb)().global;if(void 0!==n.atob)return n.atob(e);if(void 0!==t)return new t(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return n?s:s.toLowerCase()}function I(t,e,n,r=!1){const s=t[e];return null!=s?C(s.s,r):n}function N(t,e,n){const r=t[e];return r?r.b:n}function k(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function E(t){switch("string"==typeof t&&(t=s.a[t]),t){case s.a.DT_FLOAT:return"float32";case s.a.DT_INT32:case s.a.DT_INT64:case s.a.DT_INT8:case s.a.DT_UINT8:return"int32";case s.a.DT_BOOL:return"bool";case s.a.DT_DOUBLE:return"float32";case s.a.DT_STRING:return"string";default:return null}}function A(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function T(t,e,n){const r=t[e];return r&&r.type?E(r.type):n}function $(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map(t=>E(t)):n}function R(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function j(t,e,n){const r=t[e];return r&&r.shape?R(r.shape):n}function D(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function F(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>C(t,r)):n}function _(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(t=>R(t)):n}function M(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}}).call(this,n(31).Buffer)},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";n.d(e,"b",(function(){return i})),n.d(e,"a",(function(){return o})),n.d(e,"c",(function(){return u})),n.d(e,"e",(function(){return c})),n.d(e,"d",(function(){return l}));var r=n(26);const s=Object(r.a)("kernelRegistry",()=>new Map),a=Object(r.a)("gradRegistry",()=>new Map);function i(t,e){const n=h(t,e);return s.get(n)}function o(t){return a.get(t)}function u(t){const e=s.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function c(t){const{kernelName:e,backendName:n}=t,r=h(e,n);s.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),s.set(r,t)}function l(t){const{kernelName:e}=t;a.has(e)&&console.warn(`Overriding the gradient for '${e}'`),a.set(e,t)}function h(t,e){return`${e}_${t}`}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(5),s=n(6),a=n(3),i=n(1),o=n(4);const u=Object(o.a)({complex_:function(t,e){const n=Object(a.a)(t,"real","complex"),o=Object(a.a)(e,"imag","complex");i.assertShapesMatch(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const u={real:n,imag:o};return r.a.runKernelFunc(t=>t.complex(n,o),u,null,s.k)}})},function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"d",(function(){return i})),n.d(e,"f",(function(){return o})),n.d(e,"c",(function(){return u})),n.d(e,"e",(function(){return c})),n.d(e,"a",(function(){return l}));var r=n(0);function s(t,e){return a(t,e)}function a(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(c(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const i in t){const o=a(t[i],e,n,r);s[i]=o}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function i(t,e=o){return function t(e,n,r=new Set){const s=e[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(c(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e.map(t=>t[i]),o=t(s,n,r);a[i]=o}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(t,e)}function o(t){return null===t?null:c(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function u(t,e){const n=new Map;a(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const r=await e;n.set(t,r)}}return a(t,e,n)}function c(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof r.l))}function l(t){return null==t||(null===(e=t)||"object"!=typeof e&&"function"!=typeof e)||Array.isArray(t)||"object"==typeof t&&t instanceof r.l||r.Bd.isTypedArray(t);var e}},function(t,e,n){var r=n(59),s=n(60),a=n(61),i=n(62),o=n(63),u=n(64),c=n(65);c.alea=r,c.xor128=s,c.xorwow=a,c.xorshift7=i,c.xor4096=o,c.tychei=u,t.exports=c},function(t,e,n){"use strict";var r,s;n.d(e,"a",(function(){return r})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(r||(r={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(s||(s={}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(5),s=n(6),a=n(3),i=n(4);const o=Object(i.a)({real_:function(t){const e=Object(a.a)(t,"input","real"),n={input:e};return r.a.runKernelFunc(t=>t.real(e),n,null,s.gb)}})},function(t,e,n){"use strict";var r,s,a,i,o;n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return l})),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(r||(r={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(s||(s={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(a||(a={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(i||(i={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(o||(o={}));const u={float32:i,int32:s,bool:a,complex64:o};function c(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return u[t][e]}function l(t){return c(t,"int32")}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));const r={};function s(t){return r[t]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(5),s=n(6),a=n(3),i=n(4);const o=Object(i.a)({imag_:function(t){const e=Object(a.a)(t,"input","imag"),n={input:e};return r.a.runKernelFunc(t=>t.imag(e),n,null,s.K)}})},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){"use strict";(function(t,r){let s;function a(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function i(t,e){const n=function(){const t=a();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}n.d(e,"b",(function(){return a})),n.d(e,"a",(function(){return i}))}).call(this,n(28),n(29))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,s=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var u,c=[],l=!1,h=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var t=o(d);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new f(t,e)),1!==c.length||l||o(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(t){return[]},s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(t,e,n){"use strict";function r(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function s(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(e),n.d(e,"isMobile",(function(){return r})),n.d(e,"isBrowser",(function(){return s}))},function(t,e,n){"use strict";(function(t){var r=n(56),s=n(57),a=n(58);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(t,e){if(i()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|f(e,n),s=(t=o(t,r)).write(e,n);s!==r&&(t=t.slice(0,s));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=o(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?o(t,0):d(t,e);if("Buffer"===e.type&&a(e.data))return d(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=o(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|p(e.length);t=o(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|t}function f(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return P(t).length;default:if(r)return z(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,n);case"utf8":case"utf-8":return N(this,e,n);case"ascii":return k(this,e,n);case"latin1":case"binary":return E(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function b(t,e,n,r,s){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=s?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(s)return-1;n=t.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,s);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,s);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,s){var a,i=1,o=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;i=2,o/=2,u/=2,n/=2}function c(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(s){var l=-1;for(a=n;a<o;a++)if(c(t,a)===c(e,-1===l?0:a-l)){if(-1===l&&(l=a),a-l+1===u)return l*i}else-1!==l&&(a-=a-l),l=-1}else for(n+u>o&&(n=o-u),a=n;a>=0;a--){for(var h=!0,d=0;d<u;d++)if(c(t,a+d)!==c(e,d)){h=!1;break}if(h)return a}return-1}function x(t,e,n,r){n=Number(n)||0;var s=t.length-n;r?(r=Number(r))>s&&(r=s):r=s;var a=e.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var i=0;i<r;++i){var o=parseInt(e.substr(2*i,2),16);if(isNaN(o))return i;t[n+i]=o}return i}function w(t,e,n,r){return W(z(e,t.length-n),t,n,r)}function v(t,e,n,r){return W(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function O(t,e,n,r){return v(t,e,n,r)}function S(t,e,n,r){return W(P(e),t,n,r)}function C(t,e,n,r){return W(function(t,e){for(var n,r,s,a=[],i=0;i<t.length&&!((e-=2)<0);++i)n=t.charCodeAt(i),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function N(t,e,n){n=Math.min(t.length,n);for(var r=[],s=e;s<n;){var a,i,o,u,c=t[s],l=null,h=c>239?4:c>223?3:c>191?2:1;if(s+h<=n)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(a=t[s+1]))&&(u=(31&c)<<6|63&a)>127&&(l=u);break;case 3:a=t[s+1],i=t[s+2],128==(192&a)&&128==(192&i)&&(u=(15&c)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:a=t[s+1],i=t[s+2],o=t[s+3],128==(192&a)&&128==(192&i)&&128==(192&o)&&(u=(15&c)<<18|(63&a)<<12|(63&i)<<6|63&o)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),s+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=i(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?o(t,e):void 0!==n?"string"==typeof r?o(t,e).fill(n,r):o(t,e).fill(n):o(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,s=0,a=Math.min(n,r);s<a;++s)if(t[s]!==e[s]){n=t[s],r=e[s];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!a(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),s=0;for(n=0;n<t.length;++n){var i=t[n];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,s),s+=i.length}return r},u.byteLength=f,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?N(this,0,t):m.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,s){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),e<0||n>t.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&e>=n)return 0;if(r>=s)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(e>>>=0),o=Math.min(a,i),c=this.slice(r,s),l=t.slice(e,n),h=0;h<o;++h)if(c[h]!==l[h]){a=c[h],i=l[h];break}return a<i?-1:i<a?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-e;if((void 0===n||n>s)&&(n=s),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return v(this,t,e,n);case"latin1":case"binary":return O(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(127&t[s]);return r}function E(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(t[s]);return r}function A(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var s="",a=e;a<n;++a)s+=B(t[a]);return s}function T(t,e,n){for(var r=t.slice(e,n),s="",a=0;a<r.length;a+=2)s+=String.fromCharCode(r[a]+256*r[a+1]);return s}function $(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,n,r,s,a){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function j(t,e,n,r){e<0&&(e=65535+e+1);for(var s=0,a=Math.min(t.length-n,2);s<a;++s)t[n+s]=(e&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function D(t,e,n,r){e<0&&(e=4294967295+e+1);for(var s=0,a=Math.min(t.length-n,4);s<a;++s)t[n+s]=e>>>8*(r?s:3-s)&255}function F(t,e,n,r,s,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function _(t,e,n,r,a){return a||F(t,0,n,4),s.write(t,e,n,r,23,4),n+4}function M(t,e,n,r,a){return a||F(t,0,n,8),s.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var s=e-t;n=new u(s,void 0);for(var a=0;a<s;++a)n[a]=this[a+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t+--e],s=1;e>0&&(s*=256);)r+=this[t+--e]*s;return r},u.prototype.readUInt8=function(t,e){return e||$(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||$(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||$(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||$(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||$(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=e,s=1,a=this[t+--r];r>0&&(s*=256);)a+=this[t+--r]*s;return a>=(s*=128)&&(a-=Math.pow(2,8*e)),a},u.prototype.readInt8=function(t,e){return e||$(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||$(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||$(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||$(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||$(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||$(t,4,this.length),s.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||$(t,4,this.length),s.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||$(t,8,this.length),s.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||$(t,8,this.length),s.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||R(this,t,e,n,Math.pow(2,8*n)-1,0);var s=1,a=0;for(this[e]=255&t;++a<n&&(s*=256);)this[e+a]=t/s&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||R(this,t,e,n,Math.pow(2,8*n)-1,0);var s=n-1,a=1;for(this[e+s]=255&t;--s>=0&&(a*=256);)this[e+s]=t/a&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var s=Math.pow(2,8*n-1);R(this,t,e,n,s-1,-s)}var a=0,i=1,o=0;for(this[e]=255&t;++a<n&&(i*=256);)t<0&&0===o&&0!==this[e+a-1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var s=Math.pow(2,8*n-1);R(this,t,e,n,s-1,-s)}var a=n-1,i=1,o=0;for(this[e+a]=255&t;--a>=0&&(i*=256);)t<0&&0===o&&0!==this[e+a+1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return _(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return _(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return M(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return M(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var s,a=r-n;if(this===t&&n<e&&e<r)for(s=a-1;s>=0;--s)t[s+e]=this[s+n];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<a;++s)t[s+e]=this[s+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+a),e);return a},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var s=t.charCodeAt(0);s<256&&(t=s)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var i=u.isBuffer(t)?t:z(new u(t,r).toString()),o=i.length;for(a=0;a<n-e;++a)this[a+e]=i[a%o]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function B(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){var n;e=e||1/0;for(var r=t.length,s=null,a=[],i=0;i<r;++i){if((n=t.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(e-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(e-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function P(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function W(t,e,n,r){for(var s=0;s<r&&!(s+n>=e.length||s>=t.length);++s)e[s+n]=t[s];return s}}).call(this,n(28))},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return s}));const r="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==t?t:t=>t();function s(){return new Promise(t=>r(()=>t()))}}).call(this,n(67).setImmediate)},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(t,e,n){"use strict";n.r(e),n.d(e,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return i}));var r=n(0),s=n(12),a=n(50);class i extends s.a{decodeUTF8(){return new o(this)}}class o extends a.a{constructor(t){super(),this.upstream=t,this.impl=new u(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class u extends s.b{constructor(t){if(super(),this.upstream=t,Object(r.nb)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=n(69);this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const e=await this.upstream.next();let n,s;return!e.done&&(n=e.value,s=Object(r.nb)().get("IS_BROWSER")?this.decoder.decode(n,{stream:!0}):this.decoder.write(t.from(n.buffer)),this.outputQueue.push(s),!0)}}}).call(this,n(31).Buffer)},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n(12);class s extends r.a{split(t){return new a(this,t)}}class a extends s{constructor(t,e){super(),this.upstream=t,this.impl=new i(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class i extends r.b{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}},function(t,e,n){},function(t,e,n){"use strict";(function(t){var e=n(30),r=n(9);const s=Object(r.b)();s.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),s.registerFlag("IS_BROWSER",()=>e.isBrowser()),s.registerFlag("IS_NODE",()=>void 0!==t&&void 0!==t.versions&&void 0!==t.versions.node),s.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),s.registerFlag("PROD",()=>!1),s.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>s.getBool("DEBUG")),s.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),s.registerFlag("IS_TEST",()=>!1)}).call(this,n(29))},function(t,e,n){"use strict";(function(t){var e=n(9);const r=()=>n(54);let s;class a{constructor(){this.util=n(55),this.textEncoder=new this.util.TextEncoder}fetch(t,n){return null!=Object(e.b)().global.fetch?Object(e.b)().global.fetch(t,n):(null==s&&(s=r()),s(t,n))}now(){const e=t.hrtime();return 1e3*e[0]+e[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}Object(e.b)().get("IS_NODE")&&Object(e.b)().setPlatform("node",new a)}).call(this,n(29))},function(t,e){},function(t,e){},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),i=r[0],o=r[1],u=new a(function(t,e,n){return 3*(e+n)/4-n}(0,i,o)),l=0,h=o>0?i-4:i;for(n=0;n<h;n+=4)e=s[t.charCodeAt(n)]<<18|s[t.charCodeAt(n+1)]<<12|s[t.charCodeAt(n+2)]<<6|s[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===o&&(e=s[t.charCodeAt(n)]<<2|s[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===o&&(e=s[t.charCodeAt(n)]<<10|s[t.charCodeAt(n+1)]<<4|s[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,s=n%3,a=[],i=0,o=n-s;i<o;i+=16383)a.push(l(t,i,i+16383>o?o:i+16383));1===s?(e=t[n-1],a.push(r[e>>2]+r[e<<4&63]+"==")):2===s&&(e=(t[n-2]<<8)+t[n-1],a.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return a.join("")};for(var r=[],s=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,u=i.length;o<u;++o)r[o]=i[o],s[i.charCodeAt(o)]=o;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var s,a,i=[],o=e;o<n;o+=3)s=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(r[(a=s)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return i.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,s){var a,i,o=8*s-r-1,u=(1<<o)-1,c=u>>1,l=-7,h=n?s-1:0,d=n?-1:1,p=t[e+h];for(h+=d,a=p&(1<<-l)-1,p>>=-l,l+=o;l>0;a=256*a+t[e+h],h+=d,l-=8);for(i=a&(1<<-l)-1,a>>=-l,l+=r;l>0;i=256*i+t[e+h],h+=d,l-=8);if(0===a)a=1-c;else{if(a===u)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,r),a-=c}return(p?-1:1)*i*Math.pow(2,a-r)},e.write=function(t,e,n,r,s,a){var i,o,u,c=8*a-s-1,l=(1<<c)-1,h=l>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:a-1,f=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,i=l):(i=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-i))<1&&(i--,u*=2),(e+=i+h>=1?d/u:d*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=l?(o=0,i=l):i+h>=1?(o=(e*u-1)*Math.pow(2,s),i+=h):(o=e*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;t[n+p]=255&o,p+=f,o/=256,s-=8);for(i=i<<s|o,c+=s;c>0;t[n+p]=255&i,p+=f,i/=256,c-=8);t[n+p-f]|=128*m}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new i(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.alea=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor128=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorwow=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorshift7=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor4096=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n(14)&&n(25)?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.tychei=u}(0,t,n(14))}).call(this,n(24)(t))},function(t,e,n){var r;!function(s,a){var i,o=this,u=a.pow(256,6),c=a.pow(2,52),l=2*c;function h(t,e,n){var r=[],h=f(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(t){}return s.length?s:"string"==a?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(s)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),m(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,m(s)]}}():t,3),r),g=new d(r),b=function(){for(var t=g.g(6),e=u,n=0;t<c;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|g.g(4)},b.quick=function(){return g.g(4)/4294967296},b.double=b,f(m(g.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&p(r,g),t.state=function(){return p(g,{})}),n?(a.random=t,e):t})(b,h,"global"in e?e.global:this==a,e.state)}function d(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(a.seedrandom=h,f(a.random(),s),t.exports){t.exports=h;try{i=n(66)}catch(t){}}else void 0===(r=function(){return h}.call(e,n,e,t))||(t.exports=r)}([],Math)},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,s=Function.prototype.apply;function a(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new a(s.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new a(s.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(68),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(28))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,s,a,i,o,u=1,c={},l=!1,h=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){f(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((a=new MessageChannel).port1.onmessage=function(t){f(t.data)},r=function(t){a.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){f(t),e.onreadystatechange=null,s.removeChild(e),e=null},s.appendChild(e)}):r=function(t){setTimeout(f,0,t)}:(i="setImmediate$"+Math.random()+"$",o=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(i)&&f(+e.data.slice(i.length))},t.addEventListener?t.addEventListener("message",o,!1):t.attachEvent("onmessage",o),r=function(e){t.postMessage(i+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var s={callback:t,args:e};return c[u]=s,r(u),u++},d.clearImmediate=p}function p(t){delete c[t]}function f(t){if(l)setTimeout(f,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{p(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(28),n(29))},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.r(e),n.d(e,"ml5Features",(function(){return Ih})),n.d(e,"knn",(function(){return Nh}));var r={};n.r(r),n.d(r,"inputLayer",(function(){return Na})),n.d(r,"elu",(function(){return ka})),n.d(r,"reLU",(function(){return Ea})),n.d(r,"leakyReLU",(function(){return Aa})),n.d(r,"prelu",(function(){return Ta})),n.d(r,"softmax",(function(){return $a})),n.d(r,"thresholdedReLU",(function(){return Ra})),n.d(r,"conv1d",(function(){return ja})),n.d(r,"conv2d",(function(){return Da})),n.d(r,"conv2dTranspose",(function(){return Fa})),n.d(r,"conv3d",(function(){return _a})),n.d(r,"separableConv2d",(function(){return Ma})),n.d(r,"cropping2D",(function(){return La})),n.d(r,"upSampling2d",(function(){return Ba})),n.d(r,"depthwiseConv2d",(function(){return za})),n.d(r,"activation",(function(){return Pa})),n.d(r,"dense",(function(){return Wa})),n.d(r,"dropout",(function(){return Va})),n.d(r,"spatialDropout1d",(function(){return Ua})),n.d(r,"flatten",(function(){return Ga})),n.d(r,"repeatVector",(function(){return Ha})),n.d(r,"reshape",(function(){return qa})),n.d(r,"permute",(function(){return Ka})),n.d(r,"embedding",(function(){return Xa})),n.d(r,"add",(function(){return Ya})),n.d(r,"average",(function(){return Ja})),n.d(r,"concatenate",(function(){return Za})),n.d(r,"maximum",(function(){return Qa})),n.d(r,"minimum",(function(){return ti})),n.d(r,"multiply",(function(){return ei})),n.d(r,"dot",(function(){return ni})),n.d(r,"batchNormalization",(function(){return ri})),n.d(r,"layerNormalization",(function(){return si})),n.d(r,"zeroPadding2d",(function(){return ai})),n.d(r,"averagePooling1d",(function(){return ii})),n.d(r,"avgPool1d",(function(){return oi})),n.d(r,"avgPooling1d",(function(){return ui})),n.d(r,"averagePooling2d",(function(){return ci})),n.d(r,"avgPool2d",(function(){return li})),n.d(r,"avgPooling2d",(function(){return hi})),n.d(r,"averagePooling3d",(function(){return di})),n.d(r,"avgPool3d",(function(){return pi})),n.d(r,"avgPooling3d",(function(){return fi})),n.d(r,"globalAveragePooling1d",(function(){return mi})),n.d(r,"globalAveragePooling2d",(function(){return gi})),n.d(r,"globalMaxPooling1d",(function(){return bi})),n.d(r,"globalMaxPooling2d",(function(){return yi})),n.d(r,"maxPooling1d",(function(){return xi})),n.d(r,"maxPooling2d",(function(){return wi})),n.d(r,"maxPooling3d",(function(){return vi})),n.d(r,"gru",(function(){return Oi})),n.d(r,"gruCell",(function(){return Si})),n.d(r,"lstm",(function(){return Ci})),n.d(r,"lstmCell",(function(){return Ii})),n.d(r,"simpleRNN",(function(){return Ni})),n.d(r,"simpleRNNCell",(function(){return ki})),n.d(r,"rnn",(function(){return Ei})),n.d(r,"stackedRNNCells",(function(){return Ai})),n.d(r,"bidirectional",(function(){return Ti})),n.d(r,"timeDistributed",(function(){return $i})),n.d(r,"globalMaxPool1d",(function(){return Ri})),n.d(r,"globalMaxPool2d",(function(){return ji})),n.d(r,"maxPool1d",(function(){return Di})),n.d(r,"maxPool2d",(function(){return Fi})),n.d(r,"Layer",(function(){return nn})),n.d(r,"RNN",(function(){return pa})),n.d(r,"RNNCell",(function(){return fa})),n.d(r,"input",(function(){return Nr})),n.d(r,"gaussianNoise",(function(){return _i})),n.d(r,"gaussianDropout",(function(){return Mi})),n.d(r,"alphaDropout",(function(){return Li})),n.d(r,"masking",(function(){return Bi}));var s={};n.r(s),n.d(s,"maxImpl",(function(){return co})),n.d(s,"transposeImpl",(function(){return lo}));n(51);const a=document.querySelector("#btn-1"),i=document.querySelector("#btn-2"),o=document.querySelector("#cs1-image-counter"),u=document.querySelector("#cs2-image-counter"),c=document.querySelector("#cs1-image-upload"),l=document.querySelector("#cs2-image-upload"),h=document.querySelector("#total-cs1-img"),d=document.querySelector("#total-cs2-img"),p=document.querySelector("#webcam-doc-alert"),f=document.querySelector("#mobile-warning-alert"),m=document.querySelector("#clear-example-btn1"),g=document.querySelector("#clear-example-btn2"),b=document.querySelector("#clear-modal-btn");let y,x=document.querySelector("#cs1-video"),w=document.querySelector("#cs2-video"),v=0;let O=!0,S="";const C=new bootstrap.Modal(document.getElementById("clear-img-warning-modal"),{show:!1});async function I(t){navigator.mediaDevices.getUserMedia({video:!0}).then(e=>{t.srcObject=e,t.play()}).catch(()=>{O&&alert("ERROR ACCESSING WEBCAM!!!\n Make sure you've enabled webcam access for this web application. \n\n If you've already given permission, close other applications that are using the camera and then refresh"),O=!1,p.style.display="block"})}function N(t){const e=t;e.class1>75?(o.style.backgroundColor="rgb(0, 174, 255)",h.style.backgroundColor="rgb(0, 174, 255)"):e.class1>50?(o.style.backgroundColor="rgb(3, 238, 140)",h.style.backgroundColor="rgb(3, 238, 140)"):e.class1>25&&(o.style.backgroundColor="#ffc107",h.style.backgroundColor="#ffc107"),e.class2>75?(u.style.backgroundColor="rgb(0, 174, 255)",d.style.backgroundColor="rgb(0, 174, 255)"):e.class2>50?(u.style.backgroundColor="rgb(3, 238, 140)",d.style.backgroundColor="rgb(3, 238, 140)"):e.class2>25&&(u.style.backgroundColor="#ffc107",d.style.backgroundColor="#ffc107")}function k(){y=Nh.getCountByLabel(),y.class1?(v=y.class1,h.innerText=y.class1,y.class1=Math.round(y.class1*(100/300)),y.class2&&(v+=y.class2,d.innerText=y.class2,y.class2=Math.round(y.class2*(100/300)))):y.class2&&(v+=y.class2,d.innerText=y.class2,y.class2=Math.round(y.class2*(100/300)),y.class1&&(v=y.class1,h.innerText=y.class1,y.class2=Math.round(y.class2*(100/300)))),Nh.kNum=v<50?3:v<100?10:v<200?22:v<400?30:60,N(y),N(y)}function E(t,e,n){if(n)[...n.target.files].map(t=>{const n=new Image(460,345),r=window.URL.createObjectURL(t);n.style.display="none",n.src=r,n.onload=()=>{const t=Ih.infer(n);Nh.addExample(t,e),k(),o.style.width=y.class1?y.class1+"%":"0%",u.style.width=y.class2?y.class2+"%":"0%"}});else{const n=Ih.infer(t);Nh.addExample(n,e),Nh.addExample(n,e),k(),o.style.width=y.class1?y.class1+"%":"0%",u.style.width=y.class2?y.class2+"%":"0%"}}(function(){let t=!1;var e;return e=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(t=!0),t})()&&(f.style.display="block"),I(x),I(w),a.addEventListener("mousedown",()=>{E(x,"class1"),E(x,"class1")}),c.addEventListener("change",t=>{E(void 0,"class1",t)}),i.addEventListener("mousedown",()=>{E(w,"class2"),E(w,"class2")}),l.addEventListener("change",t=>{E(void 0,"class2",t)}),m.addEventListener("click",()=>{S="class1",C.show()}),g.addEventListener("click",()=>{S="class2",C.show()}),b.addEventListener("click",()=>{Nh.clearLabel(S),"class1"==S?(h.innerText=0,o.style.width="0%",o.style.backgroundColor="#6c757d"):"class2"==S&&(d.innerText=0,u.style.width="0%",u.style.backgroundColor="#6c757d")});const A=document.querySelector("#submit-btn"),T=document.querySelector("#result1-pc-container"),$=document.querySelector("#result2-pc-container"),R=document.querySelector("#result1-pc"),j=document.querySelector("#result2-pc"),D=document.querySelector("#cs1-name"),F=document.querySelector("#cs2-name"),_=document.querySelector("#class1-sample"),M=document.querySelector("#class2-sample"),L=document.querySelector("#result1-name"),B=document.querySelector("#result2-name"),z=document.querySelector("#result1-pc-label"),P=document.querySelector("#result2-pc-label"),W=document.querySelector("#download-dataset"),V=document.querySelector("#prev-model-input"),U=document.querySelector("#github-star-alert"),G=document.querySelector("#close-github-alert"),H=document.querySelector("#prev-model-txt"),q=document.querySelector("#recognized-class"),K=document.querySelector("#train-new-dataset"),X=document.querySelector("#powered-by"),Y=new bootstrap.Modal(document.getElementById("no-img-modal"),{show:!1});let J=document.querySelector("#result-video"),Z=!1;function Q(t){const e=Ih.infer(t);Nh.classify(e,(e,n)=>{if(e)console.error(e);else{"class1"==n.label?q.innerText=D.value:"class2"==n.label&&(q.innerText=F.value);const e=100*n.confidencesByLabel.class1,r=100*n.confidencesByLabel.class2;R.style.width=e+"%",j.style.width=r+"%",z.innerText=e.toFixed(2)+"%",P.innerText=r.toFixed(2)+"%",setTimeout(()=>{Q(t)},5)}})}function tt(){_.style.display="none",M.style.display="none",A.style.display="none",J.style.display="inline",T.style.display="inline-block",$.style.display="inline-block",R.style.display="inline-block",j.style.display="inline-block",W.style.display="block",K.style.display="block",X.style.display="block",L.innerText=D.value,B.innerText=F.value,H.innerText="Upload New Dataset";const t=JSON.parse(localStorage.getItem("showGitHubAlert"));t&&!t.showGitHubAlert?U.style.display="none":U.style.display="block"}A.addEventListener("click",()=>{const t=Nh.getCountByLabel();0!==Object.keys(t).length&&t.class1&&t.class2?(tt(),I(J)):Y.show()}),J.addEventListener("loadeddata",()=>{Q(J)}),W.addEventListener("click",()=>{Nh.save()}),K.addEventListener("click",()=>{Z=!0,window.location.reload()}),G.addEventListener("click",()=>{localStorage.setItem("showGitHubAlert",JSON.stringify({showGitHubAlert:!1}))}),V.addEventListener("change",t=>{Nh.clearAllLabels(),tt();const e=window.URL.createObjectURL(t.target.files[0]);Nh.load(e,t=>{t?alert("You have imported an invalid KNN Dataset"):(I(J),J.readyState>=4&&Q(J))})});var et=n(0);let nt;function rt(){return null==nt&&(nt=Object(et.E)().epsilon()),nt}class st extends Error{constructor(t){super(t),Object.setPrototypeOf(this,st.prototype)}}class at extends Error{constructor(t){super(t),Object.setPrototypeOf(this,at.prototype)}}class it extends Error{constructor(t){super(t),Object.setPrototypeOf(this,it.prototype)}}class ot extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ot.prototype)}}class ut extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ut.prototype)}}Error;function ct(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function lt(t,e){if(!t)throw new ut(e)}function ht(t,e){let n=0;for(const r of t)r===e&&n++;return n}function dt(t){return 1===t.length?t[0]:t}function pt(t){return Array.isArray(t)?t:[t]}function ft(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function mt(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let gt={};function bt(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function yt(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in gt)a=gt[s];else if(a=e[s],null==a)throw new it(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new it(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in gt?[o,u]=gt.className:i in e&&([o,u]=e[i]),null==o)throw new it(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(gt))t[e]=gt[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},gt);for(const t of Object.keys(n))gt[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=u(o,a.config,n,s);return gt=Object.assign({},e),r}{const t=Object.assign({},gt);for(const t of Object.keys(n))gt[t]=n[t];const e=new o(a.config);return gt=Object.assign({},t),e}}}function xt(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function wt(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function vt(t){if(null==t)throw new it("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Ot(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new it(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function St(t,e,n=0,r=1/0){return lt(n>=0),lt(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function Ct(t,e){Array.isArray(t)?(et.Bd.assert(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>Ct(t,`element ${n+1} of ${e}`))):et.Bd.assert(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function It(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Nt(t,e){return Object(et.td)(()=>et.dd(et.kd(et.ic(t,t),e,!0)))}class kt extends et.Lc.Serializable{getConfig(){return{}}}class Et extends kt{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(et.td)(()=>{const e=Nt(t,this.axis),n=et.Q(e,0,this.maxValue);return et.ic(t,et.ib(n,et.r(rt(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Et.className="MaxNorm",et.Lc.registerClass(Et);class At extends kt{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(et.td)(()=>et.ib(t,et.r(rt(),Nt(t,this.axis))))}getConfig(){return{axis:this.axis}}}At.className="UnitNorm",et.Lc.registerClass(At);class Tt extends kt{apply(t){return et.Bc(t)}}Tt.className="NonNeg",et.Lc.registerClass(Tt);class $t extends kt{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Object(et.td)(()=>{const e=Nt(t,this.axis),n=et.r(et.ic(this.rate,et.Q(e,this.minValue,this.maxValue)),et.ic(1-this.rate,e));return et.ic(t,et.ib(n,et.r(rt(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}$t.className="MinMaxNorm",et.Lc.registerClass($t);const Rt={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function jt(t){return bt(t)}function Dt(t,e={}){return yt(t,et.Lc.SerializationMap.getMap().classNameMap,e,"constraint")}function Ft(t){if(null==t)return null;if("string"==typeof t){return Dt({className:t in Rt?Rt[t]:t,config:{}})}return t instanceof kt?t:Dt(t)}const _t=["channelsFirst","channelsLast"],Mt=["valid","same","causal"],Lt=["max","avg"],Bt=["sum","mul","concat","ave"],zt=new Map;function Pt(t){Ot(_t,"DataFormat",t)}function Wt(t){Ot(Mt,"PaddingMode",t)}function Vt(t){Ot(Lt,"PoolMode",t)}const Ut=[];function Gt(t,e){Ut.push(t);try{const t=e();return Ut.pop(),t}catch(t){throw Ut.pop(),t}}function Ht(t){if(!Xt(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Ut.length?"":Ut.join("/")+"/")+t}function qt(t){if(!Xt(t))throw new Error("Not a valid tensor name: '"+t+"'");zt.has(t)||zt.set(t,0);const e=zt.get(t);if(zt.set(t,zt.get(t)+1),e>0){const n=`${t}_${e}`;return zt.set(n,1),n}return t}const Kt=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Xt(t){return!!t.match(Kt)}function Yt(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function Jt(t){return t=Array.isArray(t)?new Float32Array(t):t,Object(et.pd)(t)}function Zt(t){return et.ec(Jt(t)).dataSync()[0]}function Qt(t){return et.Xb(Jt(t)).dataSync()[0]}function te(t,e){if(e<t)throw new it(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function ee(t,e){return t.asType(e)}function ne(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function re(t,e,n){return Object(et.td)(()=>{switch(t.rank){case 1:return et.Tc(t,e,n);case 2:return et.Uc(t,[e,0],[n,t.shape[1]]);case 3:return et.Vc(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return et.Wc(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return et.Sc(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return et.Sc(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new it("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function se(t,e,n){return Object(et.td)(()=>{switch(t.rank){case 1:return et.Tc(t,e,n);case 2:return et.Uc(t,[0,e],[t.shape[0],n]);case 3:return et.Vc(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return et.Wc(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new it("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function ae(t,e,n,r){return Object(et.td)(()=>{switch(t.rank){case 1:return et.Tc(t,e,n);case 2:switch(r){case 1:return re(t,e,n);case 2:return se(t,e,n);default:throw new it("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return re(t,e,n);case 2:return et.Vc(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return se(t,e,n);default:throw new it("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return re(t,e,n);case 2:return et.Wc(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return et.Wc(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return se(t,e,n);default:throw new it("The axis is not within the rank of the tensor "+r)}default:throw new it("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function ie(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),et.S(t,e)}function oe(t,e){switch(t.rank){case 1:return et.T([t,e]);case 2:return et.U([t,e],0);case 3:return et.V([t,e],0);case 4:return et.W([t,e],0);default:throw new it("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function ue(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new it(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return et.ud(t,e)}function ce(t,e=0,n=1,r,s){return et.uc(t,e,n,r,s)}function le(t,e,n,r){if(t.rank<2||e.rank<2)throw new ot(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new ot(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){const s=!1,a=!1;return et.yb.matMul({a:t,b:e,transposeA:s,transposeB:a,bias:r?pe(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),c=[...i,o],l=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(l).reshape([u,-1]);const h=[...s,...c],d=!1,p=!1;return et.yb.matMul({a:t,b:e,transposeA:d,transposeB:p,bias:r?pe(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function he(t,e,n){return Object(et.td)(()=>(e=Array.isArray(e)?Object(et.pd)(e,"int32"):e.toInt(),et.zb(t,e,n)))}function de(t){return et.ic(t,t)}function pe(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new it("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new it("Unsupported input rank by biasAdd: "+e.rank)}function fe(t,e,n){return Object(et.td)(()=>(null==n&&(n="channelsLast"),Pt(n),t.add(pe(t.rank,e,n))))}function me(t,e,n,r){return Object(et.td)(()=>et.kb(t,e,n,r))}function ge(t,e,n=!1){return n?t():e()}const be=["fanIn","fanOut","fanAvg"],ye=["normal","uniform","truncatedNormal"];class xe extends et.Lc.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class we extends xe{apply(t,e){return Object(et.Hd)(t,e)}}we.className="Zeros",et.Lc.registerClass(we);class ve extends xe{apply(t,e){return Object(et.oc)(t,e)}}ve.className="Ones",et.Lc.registerClass(ve);class Oe extends xe{constructor(t){if(super(),"object"!=typeof t)throw new it("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new it("config must have value set but got "+t);this.value=t.value}apply(t,e){return Object(et.td)(()=>Object(et.ic)(Object(et.Hc)(this.value),Object(et.oc)(t,e)))}getConfig(){return{value:this.value}}}Oe.className="Constant",et.Lc.registerClass(Oe);class Se extends xe{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Object(et.vc)(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Se.className="RandomUniform",et.Lc.registerClass(Se);class Ce extends xe{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new ot(`randomNormal does not support dType ${e}.`);return ce(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ce.className="RandomNormal",et.Lc.registerClass(Ce);class Ie extends xe{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new ot(`truncatedNormal does not support dType ${e}.`);return Object(et.yd)(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ie.className="TruncatedNormal",et.Lc.registerClass(Ie);class Ne extends xe{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Object(et.td)(()=>{if(2!==t.length||t[0]!==t[1])throw new it("Identity matrix initializer can only be used for 2D square matrices.");return Object(et.ic)(this.gain,Object(et.tb)(t[0]))})}getConfig(){return{gain:this.gain}}}Ne.className="Identity",et.Lc.registerClass(Ne);class ke extends xe{constructor(t){if(super(),t.scale<0)throw new it("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Ot(be,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Ot(ye,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(Pt(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=Yt(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=Yt(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=Yt(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new ot(`${this.getClassName()} does not support dType ${e}.`);return Object(et.yd)(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return Object(et.vc)(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}ke.className="VarianceScaling",et.Lc.registerClass(ke);class Ee extends ke{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return ke.className}}Ee.className="GlorotUniform",et.Lc.registerClass(Ee);class Ae extends ke{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return ke.className}}Ae.className="GlorotNormal",et.Lc.registerClass(Ae);class Te extends ke{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return ke.className}}Te.className="HeNormal",et.Lc.registerClass(Te);class $e extends ke{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return ke.className}}$e.className="HeUniform",et.Lc.registerClass($e);class Re extends ke{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return ke.className}}Re.className="LeCunNormal",et.Lc.registerClass(Re);class je extends ke{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return ke.className}}je.className="LeCunNormal",et.Lc.registerClass(je);class De extends xe{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new ot("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Object(et.td)(()=>{if(2!==t.length)throw new ot("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=ce(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=et.Nb.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Object(et.ic)(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}De.className="Orthogonal",et.Lc.registerClass(De);const Fe={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function _e(t,e={}){return yt(t,et.Lc.SerializationMap.getMap().classNameMap,e,"initializer")}function Me(t){return bt(t)}function Le(t){if("string"==typeof t){const e=t in Fe?Fe[t]:t;if("GlorotNormal"===e)return new Ae;if("GlorotUniform"===e)return new Ee;if("HeNormal"===e)return new Te;if("HeUniform"===e)return new $e;if("LeCunNormal"===e)return new Re;if("LeCunUniform"===e)return new je;{const t={};return t.className=e,t.config={},_e(t)}}return t instanceof xe?t:_e(t)}let Be=0;function ze(){return Be++}const Pe={};function We(t=""){return t in Pe||(Pe[t]=0),Pe[t]+=1,t+Pe[t].toString()}function Ve(t){return Array.isArray(t)&&Array.isArray(t[0])}function Ue(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Ge(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new it("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function He(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new it("Expected exactly 1 Shape; got "+t.length)}return t}function qe(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class Ke{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=ze(),n=null==n?"Variable":n,this.originalName=Ht(n),this.name=qt(this.originalName),this.trainable_=r,this.constraint=s,this.val=et.Cd(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Xe(t){return t.map(t=>t.read())}function Ye(t){t.forEach(t=>{t[0].write(t[1])})}class Je{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Ze{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=ze(),null!=a&&(this.originalName=Ht(a),this.name=qt(this.originalName)),this.rank=e.length}}let Qe=0;class tn{constructor(t,e){this.callArgs=e,this.id=Qe++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let en=0;class nn extends et.Lc.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=en++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=ft(t)+"_"+We(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new at(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new it(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return dt(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return dt(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new st("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new st("Layer "+this.name+" is not connected, no input to return.");return dt(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new st("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new st("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return dt(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=pt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=pt(this.inputSpec);if(t.length!==e.length)throw new it(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new it(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new it(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new it(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new it(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new it(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new it(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=pt(t);let r=!0;for(const t of n)if(!(t instanceof Ze)){r=!1;break}let s=!0;for(const t of n)if(t instanceof Ze){s=!1;break}if(r===s)throw new it("Arguments to apply() must be all SymbolicTensors or all Tensors");return Gt(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of pt(t))e.push(n.shape);this.build(dt(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=pt(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=dt(a),null!=this.activityRegularizer)throw new ot("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=pt(t);const e=[];for(const n of t)e.push(n.shape);return dt(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new Ze(a,n,this,pt(t),e,this.name,r)):new Ze(a,r,this,pt(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new ot("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new st(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new st(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new at(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return qe(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Xe(t?this.trainableWeights:this.weights)}setWeights(t){Object(et.td)(()=>{const e=this.weights;if(e.length!==t.length)throw new it(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=Xe(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!et.Bd.arraysEqual(a.shape,o.shape))throw new it(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}Ye(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new it(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Le("zeros"));const o=r.apply(e,n),u=new Ke(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=pt(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=pt(t);e=pt(e),n=pt(n),r=pt(r),s=Ue(s),a=Ue(a);const u=[],c=[],l=[];for(const t of o)u.push(t.sourceLayer),c.push(t.nodeIndex),l.push(t.tensorIndex);new tn({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:l,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class rn extends nn{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:We("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new it("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new it("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new it("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new Ze(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new tn({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new it("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function sn(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new it("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;null==n&&(n="float32");return new rn({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function an(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Object(et.hb)(r)}}function on(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var un;rn.className="InputLayer",et.Lc.registerClass(rn),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(un||(un={}));class cn{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class ln{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class hn extends cn{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Object(et.td)(()=>Object(et.r)(this.totals[t],Object(et.ic)(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Object(et.td)(()=>{const n=Object(et.ic)(Object(et.ib)(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Object(et.Ib)(e[t])}))}}class dn extends cn{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class pn extends cn{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");et.Bd.isNumber(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=et.Bd.now();return(...s)=>{const a=et.Bd.now();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await an(n),r.push(this.yield(t,e,n))),r.push(Object(et.lc)()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await an(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await an(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Object(et.lc)()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await an(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await an(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Object(et.lc)()):et.Bd.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await an(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await an(t),await this.trainEnd(t))}}function fn(t,e){if(null==t&&(t={}),t instanceof cn)return[t];if(Array.isArray(t)&&t[0]instanceof cn)return t;return pt(t).map(t=>new pn(t,e))}class mn{constructor(){}static registerCallbackConstructor(t,e){et.Bd.assert(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),mn.checkForDuplicate(e),null==mn.constructors[t]&&(mn.constructors[t]=[]),mn.constructors[t].push(e)}static checkForDuplicate(t){for(const e in mn.constructors){mn.constructors[+e].forEach(e=>{if(e===t)throw new it("Duplicate callback constructor.")})}}static clear(){mn.constructors={}}static createCallbacks(t){const e=[];for(const n in mn.constructors){const r=+n;t>=r&&e.push(...mn.constructors[r])}return e.map(t=>new t)}}function gn(t,e,n,r,s,a,i,o,u){const c=new dn,l=[new hn,...mn.createCallbacks(e)];null!=t&&l.push(...t),l.push(c);const h=new ln(l);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:c}}function bn(t,e={},n=!1){return yt(t,et.Lc.SerializationMap.getMap().classNameMap,e,"layer",n)}function yn(t,e){return Object(et.td)(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=et.kd(de(t),e,!0),r=et.vb(n.shape,rt()),s=et.dd(et.bc(n,r));return et.ib(t,s)})}function xn(t,e){return Object(et.td)(()=>et.cc(de(et.jd(e,t)),-1))}function wn(t,e){return Object(et.td)(()=>et.cc(et.o(et.jd(e,t)),-1))}function vn(t,e){return Object(et.td)(()=>{const n=et.jd(t,e),r=et.Q(et.o(t),rt(),Number.MAX_VALUE),s=et.o(et.ib(n,r));return et.ic(100,et.cc(s,-1))})}function On(t,e){return Object(et.td)(()=>{const n=et.Q(e,rt(),Number.MAX_VALUE),r=et.Qb(et.r(1,n)),s=et.Q(t,rt(),Number.MAX_VALUE),a=et.Qb(et.r(1,s));return et.cc(de(et.jd(r,a)),-1)})}function Sn(t,e,n=!1){return Object(et.td)(()=>{if(n)e=et.Yc(e);else{const t=et.kd(e,e.shape.length-1,!0);e=et.ib(e,t)}return e=et.Q(e,rt(),1-rt()),et.kc(et.kd(et.ic(t.toFloat(),et.Qb(e)),e.shape.length-1))})}function Cn(t,e,n=!1){return Object(et.td)(()=>{const r=et.wb(function(t){const e=[Yt(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=et.Q(e,rt(),1-rt())).shape;return Sn(et.nc(r,s[s.length-1]).reshape(s),e,n)})}function In(t,e){return Object(et.td)(()=>{let n;return n=et.Q(e,rt(),1-rt()),n=et.Qb(et.ib(n,et.jd(1,n))),et.cc(function(t,e){if(!et.Bd.arraysEqual(t.shape,e.shape))throw new it(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Object(et.td)(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function Nn(t,e){return Object(et.td)(()=>{const n=et.Q(t,rt(),1),r=et.Q(e,rt(),1);return et.kd(et.ic(t,et.Qb(et.ib(n,r))),-1)})}function kn(t,e){return Object(et.td)(()=>{const n=yn(t,-1),r=yn(e,-1),s=et.ic(n,r);return et.kc(et.kd(s,-1))})}mn.constructors={};const En={meanSquaredError:xn,meanAbsoluteError:wn,meanAbsolutePercentageError:vn,meanSquaredLogarithmicError:On,squaredHinge:function(t,e){return Object(et.td)(()=>{const n=et.bc(0,et.jd(1,et.ic(t,e)));return et.cc(de(n),-1)})},hinge:function(t,e){return Object(et.td)(()=>{const n=et.bc(0,et.jd(1,et.ic(t,e)));return et.cc(n,-1)})},categoricalHinge:function(t,e){return Object(et.td)(()=>{const n=et.kd(et.ic(t,e),-1),r=et.Xb(et.ic(et.jd(1,t),e),-1);return et.bc(0,et.r(1,et.jd(r,n)))})},logcosh:function(t,e){return Object(et.td)(()=>{const n=Math.log(2),r=et.jd(e,t),s=et.jd(et.r(r,et.Zc(et.ic(-2,r))),n);return et.cc(s,-1)})},categoricalCrossentropy:Sn,sparseCategoricalCrossentropy:Cn,binaryCrossentropy:In,kullbackLeiblerDivergence:Nn,poisson:function(t,e){return Object(et.td)(()=>{const n=et.Qb(et.r(rt(),e));return et.cc(et.jd(e,et.ic(t,n)),-1)})},cosineProximity:kn};function An(t){if("string"==typeof t){if(t in En)return En[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new it(e)}return t}function Tn(t,e){return Object(et.td)(()=>{const n=et.ic(.5,et.pc(e)),r=ee(et.Bb(e,n),t.dtype);return et.cc(et.ob(t,r),-1)})}function $n(t,e){return Object(et.td)(()=>ee(et.ob(et.v(t,-1),et.v(e,-1)),"float32"))}function Rn(t,e){return Object(et.td)(()=>et.Tb(t.equal(1),e.equal(1)).sum().cast("float32"))}function jn(t,e){return Object(et.td)(()=>{const n=Rn(t,e),r=function(t,e){return Object(et.td)(()=>et.Tb(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return et.Fd(et.Bb(s,0),n.div(s),0).cast("float32")})}function Dn(t,e){return In(t,e)}function Fn(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),et.ob(t,e).asType("float32")}const _n=Sn,Mn=Cn,Ln={binaryAccuracy:Tn,categoricalAccuracy:$n,precision:jn,categoricalCrossentropy:_n,sparseCategoricalCrossentropy:Mn,mse:xn,MSE:xn,mae:wn,MAE:wn,mape:vn,MAPE:vn,cosine:kn};function Bn(t){if("string"==typeof t&&t in Ln)return Ln[t];if("string"!=typeof t&&null!=t)return t;throw new it("Unknown metric "+t)}function zn(t){if(lt(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(En))if(En[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Ln))if(Ln[n]===t){e=n;break}return void 0!==e?e:t.name}}function Pn(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Wn(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),Vn(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?Un(o[t],n,r):Gn(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;e=null!=t.collectedTrainableWeights?qe(t.collectedTrainableWeights):qe(t.trainableWeights);return e}(t),c=qe(t.nonTrainableWeights);r("Total params: "+(u+c)),r("Trainable params: "+u),r("Non-trainable params: "+c),r("_".repeat(e))}function Vn(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function Un(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}Vn([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Gn(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];Vn([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<a.length;++t)Vn(["","","",a[t]],e,r)}function Hn(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function qn(t,e){if(null===t)return null;if("string"==typeof t)return mt(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];Hn(e,s,r)?n.push(r):n.push(qn(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=mt(n);e[t]=qn(r,t)}}return e}}class Kn{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Kn)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new it(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Object(et.O)(e,t.dtype)}catch(n){throw new it(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Ze){if(null==this.id2Value[t.id])throw new it("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new it("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof Ze){if(null==this.id2Value[t.id])throw new it("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new it("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Object(et.hb)(this.id2Mask)}}const Xn={},Yn={};function Jn(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),u=[],c=e.names();for(const t of o)-1!==c.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const l=o.join(",")+"|"+e.names().join(",");let h,d;if(null==Xn[l]){const t=function(t,e){et.Bd.assert(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=Qn(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=Qn(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:Zn(r)}}(i,e);h=t.sorted,d=t.recipientCounts,Xn[l]=h,Yn[l]=d}h=Xn[l],d={},s||Object.assign(d,Yn[l]);const p=new Kn(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Object(et.dc)().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof rn)continue;const c=[],l=[],f=[];let m=!1;for(const t of a.inputs){const n=p.getValue(t),r=p.getMask(t);c.push(n),l.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=l[0]);const g=pt(i.apply(c,n));let b=null;i.supportsMasking&&(b=i.computeMask(c,l));const y=tr(a),x=Array.isArray(y)?y:[y];for(let t=0;t<x.length;++t){p.hasKey(x[t])||p.add(x[t],g[t],Array.isArray(b)?b[0]:b);const e=o.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}s||Object(et.hb)(f)}return p.disposeMasks(),a?u:u[0]}function Zn(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Qn(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function tr(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class er extends nn{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=We(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],wt(this.inputs).length!==this.inputs.length)throw new it("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));wt(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;lt(0===n,"input layer has >1 nodes"),lt(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof rn))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const c=r.inboundNodes[s];if(-1!==n.indexOf(c))throw new at(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(c))return;this.containerNodes.add(er.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(c)&&n.push(c);const l=c.inboundLayers.length;for(let t=0;t<l;t++){const r=c.inputTensors[t],s=c.inboundLayers[t],a=c.nodeIndices[t],i=c.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(c);n.indexOf(c)>=0;)n.splice(n.indexOf(c),1);i.push(c)},u=[],c=[];for(const t of this.outputs)o(t,u,c);const l=i.slice().reverse();for(const t of l){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],u=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const d={};for(const t in r){const e=r[t];e in d||(d[e]=[]),d[e].push(s[t])}let p=Object.keys(d).map(t=>parseInt(t,10)).sort(xt);this.layers=[];for(const t of p){const e=d[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof er&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map(t=>parseInt(t,10)).sort(xt);const f=this.inputs.slice(),m=[];for(const t of p)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new at("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new at(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new tn({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new it("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new it("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new it("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new it(`${t.length} of ${r} weights are not set: `+t)}Ye(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.0.1",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return ft(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Hn(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r],a=ft(r);n[a]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Object(et.td)(()=>{t=pt(t);const n=new Kn;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Jn(this.outputs,n,e)})}computeMask(t,e){return Object(et.td)(()=>{let n;return t=pt(t),n=null==e?ct(null,t.length):pt(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Ue(t);if(e.length!==this.inputLayers.length)throw new it(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(xt);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=Ue(e.computeOutputShape(dt(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];lt(e in n),s.push(n[e])}return dt(s)}runInternalGraph(t,e){null==e&&(e=ct(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(xt);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,c={};if(null!=t.callArgs&&(c=t.callArgs),1===a.length){const[t,n]=a[0];null==c.mask&&(c.mask=n),o=pt(e.call(t,c)),u=pt(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==c.mask&&(c.mask=i),o=pt(e.call(r,c)),u=pt(e.computeMask(r,i));if(e.activityRegularizer)throw new ot("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=u[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){lt(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof er?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=er.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new it(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new it("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new it("No such layer: "+t)}calculateLosses(){return Object(et.td)(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=er.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=er.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=e[er.nodeKey(s,a)];null==u&&(u=0),t.push([s.name,u,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=er.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=er.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],c=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const l=s[o];if(l.inboundNodes.length<=u)return void i(t,e);const h=l.inboundNodes[u];n.push(h.outputTensors[c])}n.length>0&&t.apply(dt(n),r)}function u(t){const n=t.name,a=bn(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new it("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const c=e.name,l=e.layers;for(const t of l)u(t);for(;!vt(a);)for(const t of l){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const t of p){const e=t[0],n=t[1],r=t[2];lt(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];lt(e in s);const a=s[e].inboundNodes[n].outputTensors;d.push(a[r])}return new t({inputs:h,outputs:d,name:c})}get stateful(){if(this._stateful)throw new it("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Object(et.td)(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function nr(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function rr(t,e){return nr(t,e,"classWeight")}async function sr(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Object(et.td)(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());Object(et.hb)(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),Object(et.pd)(s,"float32")}return null}function ar(t,e){return Object(et.ic)(t,e)}function ir(t,e){let n,r;const s=e;n=s.xs,r=s.ys,et.Bd.assert(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=or("input",t.inputNames,n),i=or("output",t.outputNames,r),o=a[0].shape[0];et.Bd.assert(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),et.Bd.assert(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)et.Bd.assert(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)et.Bd.assert(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function or(t,e,n){if(n instanceof et.l)return[n];if(Array.isArray(n))return et.Bd.assert(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new it(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function ur(t,e,n){const r=null!=n.batchesPerEpoch;if(et.Bd.assert(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),et.Bd.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),et.Bd.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),et.Bd.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),et.Bd.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(cr(n.validationData))et.Bd.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new ot("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let c;c=s?u.slice().concat(u.map(t=>"val_"+t)):u.slice();const l=fn(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=gn(l,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,c);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const c={};await d.onEpochBegin(f);let l=0,h=0;for(r||(m=await e.iterator());!r||l<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+l+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=ir(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=rr(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await sr(s[t],null,e[t]))}const c=r.concat(s).concat(i),p=o(c);et.hb(c);for(let t=0;t<u.length;++t){const e=u[t],n=p[t];a[e]=n,et.Ib(n)}await d.onBatchEnd(h,a),on(a),h++,l++}if(r?l>=n.batchesPerEpoch:e.done){if(s){let e;e=cr(n.validationData)?pt(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):pt(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)c["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,c),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function cr(t){return"function"==typeof t.iterator}function lr(t){et.Bd.assert(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function hr(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>re(t,e,n-e)):re(t,e,n-e)}function dr(t,e){return et.td(()=>null==t?null:Array.isArray(t)?t.map(t=>dr(t,e)):he(t,"int32"===e.dtype?e:e.toInt()))}function pr(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function fr(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,u,c,l;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;lr(h);const d=!1,p=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,h);s=p[0],a=p[1],l=p[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new ot("validationData including sample weights is not supported yet."):new it("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);u=n[0],c=n[1],f=u.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];u=hr(s,t,e),s=hr(s,0,t),c=hr(a,t,e),a=hr(a,0,t),f=u.concat(c)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(l);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),y=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=y.slice().concat(y.map(t=>"val_"+t))):(x=null,f=[],w=y.slice());const v=fn(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,u,c,l,h,d,p,f){null==s&&(s=32),null==a&&(a=1),null==l&&(l=!0),null==d&&(d=0);let m=!1;if(null!=u&&null!=c&&(m=!0),null!=f&&(m=!0,null==p))throw new it("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,s,p,"steps_per_epoch");let b;null!=g&&(b=te(0,g)),null==i&&(i=1);const{callbackList:y,history:x}=gn(o,i,a,d,g,p,s,m,h);y.setModel(t),t.history=x,await y.onTrainBegin(),t.stopTraining_=!1;for(let i=d;i<a;++i){await y.onEpochBegin(i);const a={};if(null!=p)throw new ot("stepsPerEpoch mode is not implemented yet.");{if("batch"===l)throw new ot("batch shuffling is not implemneted yet");l&&et.Bd.shuffle(b);const i=Object(et.pd)(b),o=pr(g,s);for(let l=0;l<o.length;++l){const h={};if(await y.onBatchBegin(l,h),et.td(()=>{const d=o[l][0],p=o[l][1],f=re(i,d,p-d);h.batch=l,h.size=p-d;const g=dr(n,f),b=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=b[t];h[e]=n,et.Ib(n)}if(l===o.length-1&&m){const e=t.testLoop(u,c,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];et.Ib(s),a["val_"+n]=s}}}),await y.onBatchEnd(l,h),on(h),t.stopTraining_)break}i.dispose()}if(await y.onEpochEnd(i,a),t.stopTraining_)break}return await y.onTrainEnd(),await t.history.syncData(),t.history}(t,b,g,y,h,r.epochs,r.verbose,v,x,f,r.shuffle,w,r.initialEpoch,null,null)}finally{t.isTraining=!1,gr(s,e),gr(a,n),gr(u,i),gr(c,o),null!=l&&et.hb(l)}}function mr(t){const e=[];t instanceof et.l&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(ne(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function gr(t,e){if(null==t)return;const n=[];if(e instanceof et.l)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof et.l)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function br(t){return Array.isArray(t)}function yr(t){return!function(t){return t instanceof et.l}(t)&&!br(t)}function xr(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(br(t)&&t.length>0)e=!0;else if(yr(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new it(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(yr(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new it(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(br(t)){if((t=t).length!==e.length)throw new it(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new it(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=mr(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new it(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u>=0&&o!==u)throw new it(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function wr(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new it(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new it(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new it(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u!==o)throw new it(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class vr extends er{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new it("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Wn(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>et.wd.adagrad(.01),Adadelta:()=>et.wd.adadelta(1,.95,rt()),Adam:()=>et.wd.adam(.001,.9,.999,rt()),Adamax:()=>et.wd.adamax(.002,.9,.999,rt(),0),RMSProp:()=>et.wd.rmsprop(.001,.9,0,rt()),SGD:()=>et.wd.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new it("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof et.i))throw new it("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new it(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>An(t))}else{const n=An(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new it(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(An(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Gt("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Gt("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===In?-1!==["accuracy","acc"].indexOf(i)?r=Tn:-1!==["crossentropy","ce"].indexOf(i)&&(r=Dn):this.lossFunctions[t]===Cn?-1!==["accuracy","acc"].indexOf(i)?r=Fn:-1!==["crossentropy","ce"].indexOf(i)&&(r=Mn):-1!==["accuracy","acc"].indexOf(i)?r=$n:-1!==["crossentropy","ce"].indexOf(i)&&(r=_n),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=Bn(i);a=t,n=""+zn(i)}let e;Gt(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;lr(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return dt(this.testLoop(i,a,r,n.verbose,n.steps))}finally{gr(s[0],t),gr(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new ot("Verbose mode is not implemented yet.");et.Bd.assert(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,u=0;for(;!r||u<n.batches;){const e=await i.next();if(a=et.td(()=>{if(e.value){const{xs:n,ys:r}=ir(t,e.value),i=n.concat(r),c=et.td(()=>s(i));if(et.hb(i),0===u)for(let t=0;t<c.length;++t)a.push(Object(et.Hc)(0));const l=i[0].shape[0];for(let t=0;t<c.length;++t){const e=c[t],n=a[t];a[t]=et.td(()=>et.r(a[t],et.ic(l,e))),u>0&&et.hb(n)}et.hb(c),o+=l,++u}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=et.ib(a[t],o),et.hb(e)}return dt(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new it(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new it("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new it("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new Kn;if(t instanceof et.l&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new it(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new it("No value is provided for the model's input "+e.name);a.add(e,n)}const i=Jn(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=ct(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new it("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return et.td(()=>{const r=this.checkNumSamples(t);if(n)throw new ot("Verbose predictLoop() is not implemented yet.");const s=pr(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){et.td(()=>{const n=s[e][0],r=s[e][1],a=hr(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new Kn(i);return Jn(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return dt(a.map(t=>et.S(t,0)))})}predict(t,e={}){const n=mr(t);wr(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return lr(r),this.predictLoop(n,r)}finally{gr(n,t)}}predictOnBatch(t){wr(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new at("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Cn?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=wt(t.map(t=>t.shape[0]));r.sort();const s=wt(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new it("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new it("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!et.Bd.arraysEqual(r,s))throw new it(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=xr(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=xr(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[xn,In,Sn];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Sn&&1===a.shape[a.shape.length-1])throw new it(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new it(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new it(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=rr(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await sr(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return et.td(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new ot("Verbose mode is not implemented yet.");if(null!=s)throw new ot("steps mode in testLoop() is not implemented yet");{const r=pr(a,n),s=Object(et.pd)(te(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=re(s,a,o-a),c=dr(e,u),l=t(c);if(0===n)for(let t=0;t<l.length;++t)i.push(Object(et.Hc)(0));for(let t=0;t<l.length;++t){const e=l[t];i[t]=et.r(i[t],et.ic(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=et.ib(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(ht(t,r)>1){s+="_"+ht(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new Kn(t),o=Jn(this.outputs,i,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=ar(n,s[t]));const a=et.cc(n);e.push(a),u=0===t?n:et.r(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=et.cc(e(r[s],o[s]))}et.Ib(n),a.push(n)}return u=et.cc(u),this.calculateLosses().forEach(t=>{u=et.r(u,t)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>et.td(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new Kn(a),o=Jn(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=et.cc(r(s[t],o[t]));n=0===t?a:et.r(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=et.cc(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return fr(this,t,e,n)}async fitDataset(t,e){return ur(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return et.hb(a),dt(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=et.dc().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-et.dc().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=ft(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>ft(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=ft(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[ft(zn(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>ft(zn(t)));{const t={};for(const e in this.metrics)t[e]=ft(zn(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=bn(qn(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=mt(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>mt(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=mt(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>mt(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=mt(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=et.Gb.getSaveHandlers(t);if(0===e.length)throw new it(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new it(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new it("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await et.Gb.encodeWeights(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.0.1",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await et.Gb.encodeWeights(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=et.Gb.concatenateArrayBuffers([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Pn(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Pn(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}async function Or(t,e){if(null==e&&(e={}),"string"==typeof t){const n=et.Gb.getLoadHandlers(t,e);if(0===n.length)n.push(et.Gb.browserHTTPRequest(t,e));else if(n.length>1)throw new it(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new it("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await t.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=bn(qn(s),e,i),u=r.trainingConfig;null!=u&&o.loadTrainingConfig(u);null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new it("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=et.Gb.decodeWeights(t,e),r={},s=[];return e.forEach(t=>{"optimizer"===t.group?s.push({name:t.name,tensor:n[t.name]}):r[t.name]=n[t.name]}),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Object(et.hb)(t),Object(et.hb)(e.map(t=>t.tensor))}return o}(t,void 0,e)}vr.className="Model",et.Lc.registerClass(vr);class Sr extends vr{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:We("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new it("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Sr||t instanceof vr;let n;if(e){if(n=t,1!==n.outputs.length)throw new it("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new it("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new it("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=sn({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new it(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new it("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new tn({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ct(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(He(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new vr({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new at("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new at("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new at("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new at("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new it("Legacy serialization format not supported yet.");s=e}else et.Bd.assert(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Sr))throw new ot("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=bn(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new it("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new it("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function Cr(t){return new Sr(t)}function Ir(t,e){return null==e&&(e={}),Or(t,e)}function Nr(t){return sn(t)}Sr.className="Sequential",et.Lc.registerClass(Sr);class kr extends et.Lc.Serializable{getConfig(){return{}}}class Er extends kr{apply(t,e=1){return function(t,e=1){if(1!==e)throw new ot(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return et.lb(t)}(t,e)}}Er.className="elu",et.Lc.registerClass(Er);class Ar extends kr{apply(t){return et.Jc(t)}}Ar.className="selu",et.Lc.registerClass(Ar);class Tr extends kr{apply(t){return et.Bc(t)}}Tr.className="relu",et.Lc.registerClass(Tr);class $r extends kr{apply(t){return Object(et.td)(()=>et.fc(6,et.Bc(t)))}}$r.className="relu6",et.Lc.registerClass($r);class Rr extends kr{apply(t){return t}}Rr.className="linear",et.Lc.registerClass(Rr);class jr extends kr{apply(t){return et.Oc(t)}}jr.className="sigmoid",et.Lc.registerClass(jr);class Dr extends kr{apply(t){return function(t){return Object(et.td)(()=>{const e=et.r(.5,et.ic(.2,t));return et.Q(e,0,1)})}(t)}}Dr.className="hardSigmoid",et.Lc.registerClass(Dr);class Fr extends kr{apply(t){return et.Zc(t)}}Fr.className="softplus",et.Lc.registerClass(Fr);class _r extends kr{apply(t){return function(t){return Object(et.td)(()=>et.ib(t,et.o(t).add(1)))}(t)}}_r.className="softsign",et.Lc.registerClass(_r);class Mr extends kr{apply(t){return et.nd(t)}}Mr.className="tanh",et.Lc.registerClass(Mr);class Lr extends kr{apply(t,e=-1){return et.Yc(t,e)}}Lr.className="softmax",et.Lc.registerClass(Lr);class Br extends kr{apply(t,e=-1){return et.Sb(t,e)}}function zr(t){return t.getClassName()}function Pr(t,e={}){return yt(t,et.Lc.SerializationMap.getMap().classNameMap,e,"activation")}function Wr(t){if(null==t){const t={className:"linear",config:{}};return Pr(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},Pr(e)}return t instanceof kr?t:Pr(t)}function Vr(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}Br.className="logSoftmax",et.Lc.registerClass(Br);class Ur extends et.Lc.Serializable{}class Gr extends Ur{constructor(t){super(),Vr(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Object(et.td)(()=>{let e=Object(et.Hd)([1]);return this.hasL1&&(e=Object(et.r)(e,Object(et.kd)(et.ic(this.l1,Object(et.o)(t))))),this.hasL2&&(e=Object(et.r)(e,Object(et.kd)(et.ic(this.l2,de(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Gr.className="L1L2",et.Lc.registerClass(Gr);const Hr={l1l2:"L1L2"};function qr(t){return bt(t)}function Kr(t,e={}){return yt(t,et.Lc.SerializationMap.getMap().classNameMap,e,"regularizer")}function Xr(t){if(null==t)return null;if("string"==typeof t){return Kr({className:t in Hr?Hr[t]:t,config:{}})}return t instanceof Ur?t:Kr(t)}class Yr extends nn{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Ge(t);let n=Object(et.Bc)(t);return null!=this.maxValue&&(n=Object(et.Q)(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Yr.className="ReLU",et.Lc.registerClass(Yr);class Jr extends nn{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Ge(t);return Object(et.Kb)(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Jr.className="LeakyReLU",et.Lc.registerClass(Jr);class Zr extends nn{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Le(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Xr(t.alphaRegularizer),this.alphaConstraint=Ft(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new it("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=He(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new Je({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Ge(t),Object(et.sc)(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Me(this.alphaInitializer),alphaRegularizer:qr(this.alphaRegularizer),alphaConstraint:jt(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Zr.className="PReLU",et.Lc.registerClass(Zr);class Qr extends nn{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new ot(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Ge(t);return Object(et.lb)(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Qr.className="ELU",et.Lc.registerClass(Qr);class ts extends nn{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Ge(t);return n.mul(ee(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}ts.className="ThresholdedReLU",et.Lc.registerClass(ts);class es extends nn{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Lr).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Ge(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function ns(t,e,n){if("number"==typeof t)return ct(t,e);if(t.length!==e)throw new it(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new it(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function rs(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function ss(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+Qt([n-e,0]);else{if("same"!==r)throw new it(`Unsupport padding mode: ${r}.`);t*=e}return t}function as(t,e){return Object(et.td)(()=>(Pt(e),"channelsFirst"===e?et.xd(t,[0,2,3,1]):t))}function is(t,e){return Object(et.td)(()=>(Pt(e),"channelsFirst"===e?et.xd(t,[0,2,3,4,1]):t))}function os(t,e,n,r=1,s="valid",a,i=1){return Object(et.td)(()=>{if(null==a&&(a="channelsLast"),Pt(a),3!==t.shape.length)throw new it("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new it("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new it("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=et.xd(t,[0,2,1])),"causal"===s)throw new ot("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=et.X(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=fe(o,n)),o})}function us(t,e,n,r=[1,1],s="valid",a,i,o=null){return Object(et.td)(()=>{if(null==a&&(a="channelsLast"),Pt(a),3!==t.rank&&4!==t.rank)throw new it(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new it(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=as(t,a);if("causal"===s)throw new ot("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=et.yb.conv2d({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=et.xd(u,[0,3,1,2])),u})}function cs(t,e,n,r=[1,1,1],s="valid",a,i){return Object(et.td)(()=>{if(null==a&&(a="channelsLast"),Pt(a),4!==t.rank&&5!==t.rank)throw new it("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new it("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=is(t,a);if("causal"===s)throw new ot("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=et.ab(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=fe(o,n)),"channelsFirst"===a&&(o=et.xd(o,[0,4,1,2,3])),o})}es.className="Softmax",et.Lc.registerClass(es);class ls extends nn{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",ls.verifyArgs(e),this.rank=t,Ct(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new ot(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ns(e.kernelSize,t,"kernelSize"),this.strides=ns(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Wt(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Pt(this.dataFormat),this.activation=Wr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Le(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ft(e.biasConstraint),this.biasRegularizer=Xr(e.biasRegularizer),this.activityRegularizer=Xr(e.activityRegularizer),this.dilationRate=ns(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new it("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new it("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new it("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(lt("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!St(t.kernelSize,"number",1,3))throw new it(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:zr(this.activation),useBias:this.useBias,biasInitializer:Me(this.biasInitializer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),biasConstraint:jt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class hs extends ls{constructor(t,e){super(t,e),this.kernel=null,hs.verifyArgs(e),this.filters=e.filters,Ct(this.filters,"filters"),this.kernelInitializer=Le(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ft(e.kernelConstraint),this.kernelRegularizer=Xr(e.kernelRegularizer)}build(t){t=He(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new it("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Object(et.td)(()=>{let e;t=Ge(t);const n=null==this.bias?null:this.bias.read(),r=It(this.activation.getClassName());if(null!=r&&2===this.rank)e=us(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=os(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=us(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new ot("convolutions greater than 3D are not implemented yet.");e=cs(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=He(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=rs(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Me(this.kernelInitializer),kernelRegularizer:qr(this.kernelRegularizer),kernelConstraint:jt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new it("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class ds extends hs{constructor(t){super(2,t),ds.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!St(t.kernelSize,"number",1,2))throw new it(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}ds.className="Conv2D",et.Lc.registerClass(ds);class ps extends hs{constructor(t){super(3,t),ps.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new it(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}ps.className="Conv3D",et.Lc.registerClass(ps);class fs extends ds{constructor(t){if(super(t),this.inputSpec=[new Je({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new it("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=He(t)).length)throw new it("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new it("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Je({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return et.td(()=>{let e=Ge(t);if(4!==e.shape.length)throw new it("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],c=this.kernelSize[1],l=this.strides[0],h=this.strides[1],d=[r,ss(i,l,u,this.padding),ss(o,h,c,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=et.xd(e,[0,2,3,1]));let p=et.Z(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=et.xd(p,[0,3,1,2])),null!=this.bias&&(p=fe(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(t){const e=(t=He(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=ss(e[r],o,a,this.padding),e[s]=ss(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}fs.className="Conv2DTranspose",et.Lc.registerClass(fs);class ms extends hs{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new it("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new it("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new it(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Le(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Xr(e.depthwiseRegularizer),this.depthwiseConstraint=Ft(e.depthwiseConstraint),this.pointwiseInitializer=Le(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Xr(e.pointwiseRegularizer),this.pointwiseConstraint=Ft(e.pointwiseConstraint)}build(t){if((t=He(t)).length<this.rank+2)throw new it(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new it("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new Je({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Object(et.td)(()=>{let e;if(t=Ge(t),1===this.rank)throw new ot("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=et.xd(t,[0,2,3,1])),e=et.Kc(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=fe(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=et.xd(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Me(this.depthwiseInitializer),t.pointwiseInitializer=Me(this.pointwiseInitializer),t.depthwiseRegularizer=qr(this.depthwiseRegularizer),t.pointwiseRegularizer=qr(this.pointwiseRegularizer),t.depthwiseConstraint=jt(this.depthwiseConstraint),t.pointwiseConstraint=jt(this.pointwiseConstraint),t}}ms.className="SeparableConv";class gs extends ms{constructor(t){super(2,t)}}gs.className="SeparableConv2D",et.Lc.registerClass(gs);class bs extends hs{constructor(t){super(1,t),bs.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!St(t.kernelSize,"number",1,1))throw new it(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}bs.className="Conv1D",et.Lc.registerClass(bs);class ys extends nn{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Object(et.td)(()=>{if(t=Ge(t),"channelsLast"===this.dataFormat){const e=ae(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ae(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=ae(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ae(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ys.className="Cropping2D",et.Lc.registerClass(ys);class xs extends nn{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return et.td(()=>{let e=Ge(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=et.xd(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return et.xd(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}xs.className="UpSampling2D",et.Lc.registerClass(xs);class ws extends ls{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Le(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ft(t.depthwiseConstraint),this.depthwiseRegularizer=Xr(t.depthwiseRegularizer)}build(t){if((t=He(t)).length<4)throw new it(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new it(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(et.td)(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return Object(et.td)(()=>{null==s&&(s="channelsLast"),Pt(s);let i=as(t,s);if(4!==t.rank)throw new it("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new it("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=et.fb(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=et.xd(i,[0,3,1,2])),i})}(t=Ge(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=fe(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=He(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=rs(e,this.kernelSize[0],this.padding,this.strides[0]),a=rs(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Me(this.depthwiseInitializer),t.depthwiseRegularizer=qr(this.depthwiseRegularizer),t.depthwiseConstraint=jt(this.depthwiseRegularizer),t}}ws.className="DepthwiseConv2D",et.Lc.registerClass(ws);class vs extends nn{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return ge(()=>me(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}vs.className="Dropout",et.Lc.registerClass(vs);class Os extends vs{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Os.className="SpatialDropout1D",et.Lc.registerClass(Os);class Ss extends nn{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Ct(this.units,"units"),this.activation=Wr(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Le(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Le(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ft(t.kernelConstraint),this.biasConstraint=Ft(t.biasConstraint),this.kernelRegularizer=Xr(t.kernelRegularizer),this.biasRegularizer=Xr(t.biasRegularizer),this.activityRegularizer=Xr(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=He(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=He(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t),r=It(this.activation.getClassName());let s;return null!=r?s=le(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=le(n,this.kernel.read()),null!=this.bias&&(s=fe(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:zr(this.activation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),biasInitializer:Me(this.biasInitializer),kernelRegularizer:qr(this.kernelRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),biasConstraint:jt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Ss.className="Dense",et.Lc.registerClass(Ss);class Cs extends nn{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=He(t);for(const e of t.slice(1))if(null==e)throw new it(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],Yt(t,1)]}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);let n=Ge(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new it(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],Yt(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Cs.className="Flatten",et.Lc.registerClass(Cs);class Is extends nn{constructor(t){super(t),this.supportsMasking=!0,this.activation=Wr(t.activation)}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t);return this.activation.apply(n)})}getConfig(){const t={activation:zr(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Is.className="Activation",et.Lc.registerClass(Is);class Ns extends nn{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Object(et.td)(()=>{return t=Ge(t),e=t,n=this.n,Object(et.td)(()=>{if(2!==e.shape.length)throw new it(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return ue(ne(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Ns.className="RepeatVector",et.Lc.registerClass(Ns);class ks extends nn{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new it("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=Yt(t);if(null!==a){if(0===s||i%s!=0)throw new it(n);r[a]=i/s}else if(i!==s)throw new it(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}ks.className="Reshape",et.Lc.registerClass(ks);class Es extends nn{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=te(1,t.dims.length+1);if(!et.Bd.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Je({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=He(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return Object(et.xd)(Ge(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Es.className="Permute",et.Lc.registerClass(Es);class As extends nn{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Ge(t);return Object(et.u)(Object(et.mc)(n,this.maskValue),-1)}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t),r=Object(et.u)(Object(et.mc)(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}As.className="Masking",et.Lc.registerClass(As);class Ts extends nn{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(pt(t.inputLength))}this.inputDim=t.inputDim,Ct(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Ct(this.outputDim,"outputDim"),this.embeddingsInitializer=Le(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Xr(t.embeddingsRegularizer),this.activityRegularizer=Xr(t.activityRegularizer),this.embeddingsConstraint=Ft(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Object(et.td)(()=>this.maskZero?(t=Ge(t),Object(et.mc)(t,Object(et.Id)(t))):null)}computeOutputShape(t){if(t=He(t),null==this.inputLength)return[...t,this.outputDim];const e=pt(this.inputLength);if(e.length!==t.length-1)throw new it(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new it(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);let n=Ge(t);"int32"!==n.dtype&&(n=ee(n,"int32"));return he(this.embeddings.read(),n.as1D()).reshape(He(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Me(this.embeddingsInitializer),embeddingsRegularizer:qr(this.embeddingsRegularizer),activityRegularizer:qr(this.activityRegularizer),embeddingsConstraint:jt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Ts.className="Embedding",et.Lc.registerClass(Ts);class $s extends nn{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new ot}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new it("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[He(t)]),(t=t).length<2)throw new it(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=wt(e),e.length>1)throw new it(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===wt(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Object(et.td)(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=Qt(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=ne(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(Yt(t.slice(1))));i=et.xd(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=te(1,t).concat([0]);e.push(et.xd(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=et.xd(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(te(0,s-1));r=et.xd(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=wt(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return et.td(()=>{if(null==e)return null;if(!Array.isArray(e))throw new it("`mask` should be an Array");if(!Array.isArray(t))throw new it("`inputs` should be an Array");if(e.length!==t.length)throw new it(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:et.rb(t,0)))[0];for(let t=1;t<e.length-1;++t)n=et.Tb(n,e[t]);return n})}}class Rs extends $s{constructor(t){super(t)}mergeFunction(t){return Object(et.td)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=et.r(e,t[n]);return e})}}Rs.className="Add",et.Lc.registerClass(Rs);class js extends $s{constructor(t){super(t)}mergeFunction(t){return Object(et.td)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=et.ic(e,t[n]);return e})}}js.className="Multiply",et.Lc.registerClass(js);class Ds extends $s{constructor(t){super(t)}mergeFunction(t){return Object(et.td)(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=et.r(e,t[n]);return et.ic(1/t.length,e)})}}Ds.className="Average",et.Lc.registerClass(Ds);class Fs extends $s{constructor(t){super(t)}mergeFunction(t){return Object(et.td)(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=et.bc(e,t[n]);return e})}}Fs.className="Maximum",et.Lc.registerClass(Fs);class _s extends $s{constructor(t){super(t)}mergeFunction(t){return Object(et.td)(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=et.fc(e,t[n]);return e})}}_s.className="Minimum",et.Lc.registerClass(_s);class Ms extends $s{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new it("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(et.Bd.arraysEqual(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new it("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Object(et.td)(()=>ie(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new it("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new it("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new it("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new it(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return et.td(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(et.pc(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(et.rb(e[n],-1)):r.push(e[n]);const s=et.S(r,this.axis);return et.t(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Ls(t,e){for(;t<0;)t+=e;return t}Ms.className="Concatenate",et.Lc.registerClass(Ms);class Bs extends $s{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){et.Bd.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new ot("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new it(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new it(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>Ls(e,t[n].shape.length)):[Ls(this.axes,n.shape.length),Ls(this.axes,r.shape.length)],this.normalize&&(n=yn(n,e[0]),r=yn(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new ot("batchDot is not implemented for tensors of 4D or higher rank yet");if(et.Bd.assert(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),et.Bd.assert(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new ot("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return et.td(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Ls(this.axes,t.length),Ls(this.axes,e.length)],n}computeOutputShape(t){et.Bd.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new ot("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Bs.className="Dot",et.Lc.registerClass(Bs);class zs extends nn{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t);return ge(()=>ce(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}zs.className="GaussianNoise",et.Lc.registerClass(zs);class Ps extends nn{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e);const n=Ge(t);if(this.rate>0&&this.rate<1){return ge(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(ce(n.shape,1,t))},()=>n,e.training||!1)}return n})}}Ps.className="GaussianDropout",et.Lc.registerClass(Ps);class Ws extends nn{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Ge(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Object(et.td)(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return ge(()=>{const e=Ge(t),r=-1.7580993408473766;let s=Object(et.Cb)(Object(et.vc)(n),this.rate);s=ee(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>Ge(t),e.training||!1)}return t})}}function Vs(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=et.H(t,e,n,r,s,a);else if(3===t.rank)i=et.I(t,e,n,r,s,a);else{if(4!==t.rank)throw new ot(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=et.J(t,e,n,r,s,a)}return i}function Us(t,e,n,r,s=.001){return et.Bd.arraysEqual(r.slice().sort(),te(0,t.rank-1))?function(t,e,n,r,s=.001){return Object(et.td)(()=>{const a=et.hc(t,r),i=a.mean,o=a.variance;return[Vs(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return Object(et.td)(()=>{const a=et.hc(t,r),i=a.mean,o=a.variance,u=[];for(const e of te(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const c=i.reshape(u),l=o.reshape(u),h=null==e?null:e.reshape(u),d=null==n?null:n.reshape(u);return[Vs(t,c,l,d,h,s),i,o]})}(t,e,n,r,s)}Ws.className="AlphaDropout",et.Lc.registerClass(Ws);class Gs extends nn{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Le(t.betaInitializer||"zeros"),this.gammaInitializer=Le(t.gammaInitializer||"ones"),this.movingMeanInitializer=Le(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Le(t.movingVarianceInitializer||"ones"),this.betaConstraint=Ft(t.betaConstraint),this.gammaConstraint=Ft(t.gammaConstraint),this.betaRegularizer=Xr(t.betaRegularizer),this.gammaRegularizer=Xr(t.gammaRegularizer)}build(t){t=He(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new it(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new Je({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Object(et.td)(()=>{const n=null!=e.training&&e.training,r=Ge(t),s=r.shape,a=s.length,i=te(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=ct(1,a);u[o]=s[o];const c=i.slice();c.sort();const l=!et.Bd.arraysEqual(c,te(0,a).slice(0,a-1));if(!n)return(()=>{if(l){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return Vs(r,t,e,n,s,this.epsilon)}return Vs(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=Us(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{et.td(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Me(this.betaInitializer),gammaInitializer:Me(this.gammaInitializer),movingMeanInitializer:Me(this.movingMeanInitializer),movingVarianceInitializer:Me(this.movingVarianceInitializer),betaRegularizer:qr(this.betaRegularizer),gammaRegularizer:qr(this.gammaRegularizer),betaConstraint:jt(this.betaConstraint),gammaConstraint:jt(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Gs.className="BatchNormalization",et.Lc.registerClass(Gs);class Hs extends nn{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Le(t.betaInitializer||"zeros"),this.gammaInitializer=Le(t.gammaInitializer||"ones"),this.betaRegularizer=Xr(t.betaRegularizer),this.gammaRegularizer=Xr(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=He(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==wt(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=Ge(t),r=n.shape,s=r.length;return Object(et.td)(()=>{let{mean:t,variance:e}=Object(et.hc)(n,this.axis,!0);const a=ct(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const c=[],l=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(c.push(r[t]),l.push(1)):(c.push(1),l.push(r[t]));return t=t.tile(c),e=e.tile(c),o=o.tile(l),u=u.tile(l),Vs(n,t,e,u,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Me(this.betaInitializer),gammaInitializer:Me(this.gammaInitializer),betaRegularizer:qr(this.betaRegularizer),gammaRegularizer:qr(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Hs.className="LayerNormalization",et.Lc.registerClass(Hs);class qs extends nn{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new it(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new it(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new it(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new Je({ndim:4})]}computeOutputShape(t){let e,n;return t=He(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Object(et.td)(()=>{return e=Ge(t),n=this.padding,r=this.dataFormat,Object(et.td)(()=>{if(4!==e.rank)throw new it("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new it("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new it(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],et.qc(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function Ks(t,e,n,r,s,a){return Object(et.td)(()=>{let i;Pt(s),Vt(a),Wt(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=as(t,s);const o="same"===r?"same":"valid";return i="max"===a?et.Yb(t,e,n,o):et.C(t,e,n,o),"channelsFirst"===s&&(i=et.xd(i,[0,3,1,2])),i})}function Xs(t,e,n,r,s,a){return Object(et.td)(()=>{let i;Pt(s),Vt(a),Wt(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=is(t,s);const o="same"===r?"same":"valid";return i="max"===a?et.Zb(t,e,n,o):et.D(t,e,n,o),"channelsFirst"===s&&(i=et.xd(i,[0,4,1,2,3])),i})}qs.className="ZeroPadding2D",et.Lc.registerClass(qs);class Ys extends nn{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new it("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(Ct(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new it("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}Ct(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Wt(this.padding),this.inputSpec=[new Je({ndim:3})]}computeOutputShape(t){const e=rs((t=He(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Object(et.td)(()=>{this.invokeCallHook(t,e),t=ne(Ge(t),2);const n=this.poolingFunction(Ge(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return et.gd(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Js extends Ys{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Ks(t,e,n,r,s,"max")}}Js.className="MaxPooling1D",et.Lc.registerClass(Js);class Zs extends Ys{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Ks(t,e,n,r,s,"avg")}}Zs.className="AveragePooling1D",et.Lc.registerClass(Zs);class Qs extends nn{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new it("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];Ct(this.poolSize,"poolSize"),Ct(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Wt(this.padding),this.inputSpec=[new Je({ndim:4})]}computeOutputShape(t){t=He(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=rs(e,this.poolSize[0],this.padding,this.strides[0]),n=rs(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Object(et.td)(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ge(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class ta extends Qs{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Ks(t,e,n,r,s,"max")}}ta.className="MaxPooling2D",et.Lc.registerClass(ta);class ea extends Qs{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Ks(t,e,n,r,s,"avg")}}ea.className="AveragePooling2D",et.Lc.registerClass(ea);class na extends nn{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new it("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Ct(this.poolSize,"poolSize"),Ct(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Wt(this.padding),this.inputSpec=[new Je({ndim:5})]}computeOutputShape(t){t=He(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=rs(e,this.poolSize[0],this.padding,this.strides[0]),n=rs(n,this.poolSize[1],this.padding,this.strides[1]),r=rs(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Object(et.td)(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ge(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class ra extends na{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Xs(t,e,n,r,s,"max")}}ra.className="MaxPooling3D",et.Lc.registerClass(ra);class sa extends na{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Pt(s),Wt(r),Xs(t,e,n,r,s,"avg")}}sa.className="AveragePooling3D",et.Lc.registerClass(sa);class aa extends nn{constructor(t){super(t),this.inputSpec=[new Je({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new ot}}class ia extends aa{constructor(t){super(t||{})}call(t,e){return Object(et.td)(()=>{const e=Ge(t);return et.cc(e,1)})}}ia.className="GlobalAveragePooling1D",et.Lc.registerClass(ia);class oa extends aa{constructor(t){super(t||{})}call(t,e){return Object(et.td)(()=>{const e=Ge(t);return et.Xb(e,1)})}}oa.className="GlobalMaxPooling1D",et.Lc.registerClass(oa);class ua extends nn{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),this.inputSpec=[new Je({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new ot}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class ca extends ua{call(t,e){return Object(et.td)(()=>{const e=Ge(t);return"channelsLast"===this.dataFormat?et.cc(e,[1,2]):et.cc(e,[2,3])})}}ca.className="GlobalAveragePooling2D",et.Lc.registerClass(ca);class la extends ua{call(t,e){return Object(et.td)(()=>{const e=Ge(t);return"channelsLast"===this.dataFormat?et.Xb(e,[1,2]):et.Xb(e,[2,3])})}}function ha(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new it("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function da(t,e,n,r=!1,s,a,i=!1,o=!1){return et.td(()=>{const u=e.shape.length;if(u<3)throw new it(`Input should be at least 3D, but is ${u}D.`);const c=[1,0].concat(te(2,u));if(e=et.xd(e,c),null!=a)throw new ot("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=et.rb(s,-1)),s=et.xd(s,c)),r&&(e=et.Dc(e,0),null!=s&&(s=et.Dc(s,0)));const l=[];let h,d=n;const p=e.shape[0],f=et.zd(e);let m,g;null!=s&&(m=et.zd(s));for(let e=0;e<p;++e){const n=f[e],r=et.td(()=>t(n,d));if(null==s)h=r[0],d=r[1];else{const t=et.td(()=>{const t=m[e],n=et.pc(t).sub(t);return{output:r[0].mul(t).add(d[0].mul(n)),newStates:d.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,d=t.newStates}o&&l.push(h)}if(o){const t=1;g=et.hd(l,t)}return[h,g,d]})}la.className="GlobalMaxPooling2D",et.Lc.registerClass(la);class pa extends nn{constructor(t){let e;if(super(t),null==t.cell)throw new it("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new va({cells:t.cell}):t.cell,null==e.stateSize)throw new it("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new Je({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return te(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Ve(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return et.td(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new ot("Constants support is not implemented in RNN yet.");Ve(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new Je({shape:[e,null,n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!et.Bd.arraysEqual(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new it(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new Je({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Object(et.td)(()=>{if(!this.stateful)throw new st("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new it("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>et.Hd([n,t])):this.states_=[et.Hd([n,this.cell.stateSize])];else if(null==t)et.hb(this.states_),null!=this.keptStates&&(et.hb(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>et.Hd([n,t])):this.states_[0]=et.Hd([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new it(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):et.hb(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!et.Bd.arraysEqual(r.shape,a))throw new it(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>et.Ib(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=ha(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new Je({shape:t.shape}));i=i.concat(this.stateSpec)}null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof Ze){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Object(et.td)(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=Ge(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new it(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=da((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],c=o[1],l=o[2];this.stateful&&this.resetStates(l,r);const h=this.returnSequences?c:u;return this.returnState?[h].concat(l):h})}getInitialState(t){return Object(et.td)(()=>{let e=et.Hd(t.shape);return e=et.kd(e,[1,2]),e=ne(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?ue(e,[1,t]):e):this.cell.stateSize>1?[ue(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=bn(e.cell,n);return new t(Object.assign(e,{cell:r}))}}pa.className="RNN",et.Lc.registerClass(pa);class fa extends nn{}class ma extends fa{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ct(this.units,"units"),this.activation=Wr(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Le(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Le(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Le(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Xr(t.kernelRegularizer),this.recurrentRegularizer=Xr(t.recurrentRegularizer),this.biasRegularizer=Xr(t.biasRegularizer),this.kernelConstraint=Ft(t.kernelConstraint),this.recurrentConstraint=Ft(t.recurrentConstraint),this.biasConstraint=Ft(t.biasConstraint),this.dropout=Zt([1,Qt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Zt([1,Qt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=He(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(et.td)(()=>{if(2!==(t=t).length)throw new it(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Oa(()=>et.pc(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Oa(()=>et.pc(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=le(null!=a?et.ic(t,a):t,this.kernel.read()),null!=this.bias&&(s=fe(s,this.bias.read())),null!=i&&(n=et.ic(n,i));let o=et.r(s,le(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:zr(this.activation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}ma.className="SimpleRNNCell",et.Lc.registerClass(ma);class ga extends pa{constructor(t){t.cell=new ma(t),super(t)}call(t,e){return Object(et.td)(()=>{null!=this.cell.dropoutMask&&(et.hb(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(et.hb(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:zr(this.activation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}ga.className="SimpleRNN",et.Lc.registerClass(ga);class ba extends fa{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new it("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Ct(this.units,"units"),this.activation=Wr(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Wr(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Le(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Le(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Le(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Xr(t.kernelRegularizer),this.recurrentRegularizer=Xr(t.recurrentRegularizer),this.biasRegularizer=Xr(t.biasRegularizer),this.kernelConstraint=Ft(t.kernelConstraint),this.recurrentConstraint=Ft(t.recurrentConstraint),this.biasConstraint=Ft(t.biasConstraint),this.dropout=Zt([1,Qt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Zt([1,Qt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=He(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Object(et.td)(()=>{if(2!==(t=t).length)throw new it("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Oa(()=>et.pc(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Oa(()=>et.pc(r),this.recurrentDropout,n,3));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(t=et.ic(t,s[0]));let c=le(t,this.kernel.read());this.useBias&&(c=fe(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=et.ic(r,a[0]));const l=this.recurrentKernel.read(),[h,d]=et.cd(l,[2*this.units,this.units],l.rank-1),p=le(r,h),[f,m,g]=et.cd(c,3,c.rank-1),[b,y]=et.cd(p,2,p.rank-1);i=this.recurrentActivation.apply(et.r(f,b)),o=this.recurrentActivation.apply(et.r(m,y));const x=le(et.ic(o,r),d);u=this.activation.apply(et.r(g,x));const w=et.r(et.ic(i,r),et.ic(et.r(1,et.kc(i)),u));return[w,w]})}getConfig(){const t={units:this.units,activation:zr(this.activation),recurrentActivation:zr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}ba.className="GRUCell",et.Lc.registerClass(ba);class ya extends pa{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new ba(t),super(t)}call(t,e){return Object(et.td)(()=>{null!=this.cell.dropoutMask&&(et.hb(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(et.hb(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:zr(this.activation),recurrentActivation:zr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}ya.className="GRU",et.Lc.registerClass(ya);class xa extends fa{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ct(this.units,"units"),this.activation=Wr(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Wr(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Le(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Le(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Le(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Xr(t.kernelRegularizer),this.recurrentRegularizer=Xr(t.recurrentRegularizer),this.biasRegularizer=Xr(t.biasRegularizer),this.kernelConstraint=Ft(t.kernelConstraint),this.recurrentConstraint=Ft(t.recurrentConstraint),this.biasConstraint=Ft(t.biasConstraint),this.dropout=Zt([1,Qt([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Zt([1,Qt([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=He(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends xe{apply(e,r){const s=t.apply([n]),a=(new ve).apply([n]),i=t.apply([2*n]);return oe(oe(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Object(et.td)(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new it("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Oa(()=>et.pc(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Oa(()=>et.pc(r),this.recurrentDropout,n,4));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,c,l;0<this.dropout&&this.dropout<1&&(t=et.ic(t,a[0]));let h=le(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=et.ic(r,i[0])),h=et.r(h,le(r,this.recurrentKernel.read())),this.useBias&&(h=fe(h,this.bias.read()));const[d,p,f,m]=et.cd(h,4,h.rank-1);o=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(p),c=et.r(et.ic(u,s),et.ic(o,this.activation.apply(f))),l=this.recurrentActivation.apply(m);const g=et.ic(l,this.activation.apply(c));return[g,g,c]})}getConfig(){const t={units:this.units,activation:zr(this.activation),recurrentActivation:zr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}xa.className="LSTMCell",et.Lc.registerClass(xa);class wa extends pa{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new xa(t),super(t)}call(t,e){return Object(et.td)(()=>{null!=this.cell.dropoutMask&&(et.hb(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(et.hb(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:zr(this.activation),recurrentActivation:zr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Me(this.kernelInitializer),recurrentInitializer:Me(this.recurrentInitializer),biasInitializer:Me(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:qr(this.kernelRegularizer),recurrentRegularizer:qr(this.recurrentRegularizer),biasRegularizer:qr(this.biasRegularizer),activityRegularizer:qr(this.activityRegularizer),kernelConstraint:jt(this.kernelConstraint),recurrentConstraint:jt(this.recurrentConstraint),biasConstraint:jt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}wa.className="LSTM",et.Lc.registerClass(wa);class va extends fa{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Object(et.td)(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;Ve(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{Gt("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(bn(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return Xe(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}Ye(e)}}function Oa(t,e,n=null,r=1){function s(){return me(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(ge(s,t,n));return e.map(t=>et.Ib(t.clone()))}return et.Ib(ge(s,t,n).clone())}va.className="StackedRNNCells",et.Lc.registerClass(va);class Sa extends nn{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=bn(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Ca extends Sa{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=He(t)).length<3)throw new it("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=He(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Object(et.td)(()=>da((t,n)=>[Ge(this.layer.call(t,e)),[]],t=Ge(t),[],!1,null,null,!1,!0)[1])}}Ca.className="TimeDistributed",et.Lc.registerClass(Ca);class Ia extends Sa{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=bn(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=bn(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Ot(Bt,"BidirectionalMergeMode",s),t.weights)throw new ot("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):dt(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=ha(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new it("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new Je({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new ot("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Ze;for(const t of a)if(t instanceof Ze!==o)throw new it("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Object(et.td)(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=et.Dc(s,1)),"concat"===this.mergeMode?i=ie([r,s]):"sum"===this.mergeMode?i=et.r(r,s):"ave"===this.mergeMode?i=et.ic(.5,et.r(r,s)):"mul"===this.mergeMode?i=et.ic(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Gt(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Gt(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=bn(e.layer);if(delete e.layer,null!=e.numConstants)throw new ot("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}function Na(t){return new rn(t)}function ka(t){return new Qr(t)}function Ea(t){return new Yr(t)}function Aa(t){return new Jr(t)}function Ta(t){return new Zr(t)}function $a(t){return new es(t)}function Ra(t){return new ts(t)}function ja(t){return new bs(t)}function Da(t){return new ds(t)}function Fa(t){return new fs(t)}function _a(t){return new ps(t)}function Ma(t){return new gs(t)}function La(t){return new ys(t)}function Ba(t){return new xs(t)}function za(t){return new ws(t)}function Pa(t){return new Is(t)}function Wa(t){return new Ss(t)}function Va(t){return new vs(t)}function Ua(t){return new Os(t)}function Ga(t){return new Cs(t)}function Ha(t){return new Ns(t)}function qa(t){return new ks(t)}function Ka(t){return new Es(t)}function Xa(t){return new Ts(t)}function Ya(t){return new Rs(t)}function Ja(t){return new Ds(t)}function Za(t){return new Ms(t)}function Qa(t){return new Fs(t)}function ti(t){return new _s(t)}function ei(t){return new js(t)}function ni(t){return new Bs(t)}function ri(t){return new Gs(t)}function si(t){return new Hs(t)}function ai(t){return new qs(t)}function ii(t){return new Zs(t)}function oi(t){return ii(t)}function ui(t){return ii(t)}function ci(t){return new ea(t)}function li(t){return ci(t)}function hi(t){return ci(t)}function di(t){return new sa(t)}function pi(t){return di(t)}function fi(t){return di(t)}function mi(t){return new ia(t)}function gi(t){return new ca(t)}function bi(t){return new oa(t)}function yi(t){return new la(t)}function xi(t){return new Js(t)}function wi(t){return new ta(t)}function vi(t){return new ra(t)}function Oi(t){return new ya(t)}function Si(t){return new ba(t)}function Ci(t){return new wa(t)}function Ii(t){return new xa(t)}function Ni(t){return new ga(t)}function ki(t){return new ma(t)}function Ei(t){return new pa(t)}function Ai(t){return new va(t)}function Ti(t){return new Ia(t)}function $i(t){return new Ca(t)}Ia.className="Bidirectional",et.Lc.registerClass(Ia);const Ri=bi,ji=yi,Di=xi,Fi=wi;function _i(t){return new zs(t)}function Mi(t){return new Ps(t)}function Li(t){return new Ws(t)}function Bi(t){return new As(t)}var zi=n(13),Pi=n(2);class Wi{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return Object(Pi.c)(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Object(Pi.c)(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(zi.f)(this.node.rawAttrs,t,e);if(null!=n.s)return Object(zi.i)(this.node.rawAttrs,t,e);if(null!=n.b)return Object(zi.c)(this.node.rawAttrs,t,e);if(null!=n.shape)return Object(zi.k)(this.node.rawAttrs,t,e);if(null!=n.type)return Object(zi.e)(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(zi.g)(this.node.rawAttrs,t,e);if(null!=n.list.s)return Object(zi.h)(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Object(zi.j)(this.node.rawAttrs,t,e);if(null!=n.list.b)return Object(zi.b)(this.node.rawAttrs,t,e);if(null!=n.list.type)return Object(zi.d)(this.node.rawAttrs,t,e)}return e}}var Vi=n(22);function Ui(t,e,n=""){et.Bd.assert(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class Gi{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.id=Gi.nextId++}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(t=>t.tensor.dispose()),this.tensors=[],this.closed_=!0}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),Ui(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n&&n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n&&n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Object(et.od)([],[0].concat(this.elementShape));const n=this.readMany(t);return Ui(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(et.hd)(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Object(et.od)([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return Ui(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(et.S)(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Object(et.zd)(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];Object(et.td)(()=>{e=e.reshape([1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=Object(et.Sc)(e,i,o).reshape(this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}Gi.nextId=0;function Hi(t,e,n){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return et.td(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[et.r(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"AddN":return[et.s(Object(Pi.b)("tensors",t,e,n))];case"FloorMod":case"Mod":return[et.gc(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Mul":return[et.ic(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"RealDiv":case"Div":return[et.ib(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"DivNoNan":return[et.jb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"FloorDiv":return[et.xb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Sub":return[et.jd(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Minimum":return[et.fc(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Maximum":return[et.bc(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Pow":return[et.rc(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"SquaredDifference":return[et.fd(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return et.td(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[et.o(Object(Pi.b)("x",t,e,n))];case"Acos":return[et.p(Object(Pi.b)("x",t,e,n))];case"Acosh":return[et.q(Object(Pi.b)("x",t,e,n))];case"Asin":return[et.x(Object(Pi.b)("x",t,e,n))];case"Asinh":return[et.y(Object(Pi.b)("x",t,e,n))];case"Atan":return[et.z(Object(Pi.b)("x",t,e,n))];case"Atan2":return[et.A(Object(Pi.b)("x",t,e,n),Object(Pi.b)("y",t,e,n))];case"Atanh":return[et.B(Object(Pi.b)("x",t,e,n))];case"Ceil":return[et.P(Object(Pi.b)("x",t,e,n))];case"Complex":return[et.R(Object(Pi.b)("real",t,e,n),Object(Pi.b)("imag",t,e,n))];case"Cos":return[et.bb(Object(Pi.b)("x",t,e,n))];case"Cosh":return[et.cb(Object(Pi.b)("x",t,e,n))];case"Elu":return[et.lb(Object(Pi.b)("x",t,e,n))];case"Erf":return[et.pb(Object(Pi.b)("x",t,e,n))];case"Exp":return[et.qb(Object(Pi.b)("x",t,e,n))];case"Expm1":return[et.sb(Object(Pi.b)("x",t,e,n))];case"Floor":return[et.wb(Object(Pi.b)("x",t,e,n))];case"Log":return[et.Qb(Object(Pi.b)("x",t,e,n))];case"Log1p":return[et.Rb(Object(Pi.b)("x",t,e,n))];case"Imag":return[et.Eb(Object(Pi.b)("x",t,e,n))];case"Neg":return[et.kc(Object(Pi.b)("x",t,e,n))];case"Reciprocal":return[et.yc(Object(Pi.b)("x",t,e,n))];case"Real":return[et.xc(Object(Pi.b)("x",t,e,n))];case"Relu":return[et.Bc(Object(Pi.b)("x",t,e,n))];case"Round":return[et.Fc(Object(Pi.b)("x",t,e,n))];case"Selu":return[et.Jc(Object(Pi.b)("x",t,e,n))];case"Sigmoid":return[et.Oc(Object(Pi.b)("x",t,e,n))];case"Sin":return[et.Qc(Object(Pi.b)("x",t,e,n))];case"Sign":return[et.Pc(Object(Pi.b)("x",t,e,n))];case"Sinh":return[et.Rc(Object(Pi.b)("x",t,e,n))];case"Softplus":return[et.Zc(Object(Pi.b)("x",t,e,n))];case"Sqrt":return[et.dd(Object(Pi.b)("x",t,e,n))];case"Square":return[et.ed(Object(Pi.b)("x",t,e,n))];case"Tanh":return[et.nd(Object(Pi.b)("x",t,e,n))];case"Tan":return[et.md(Object(Pi.b)("x",t,e,n))];case"Relu6":case"ClipByValue":return[et.Q(Object(Pi.b)("x",t,e,n),Object(Pi.b)("clipValueMin",t,e,n),Object(Pi.b)("clipValueMax",t,e,n))];case"Rsqrt":return[et.Gc(Object(Pi.c)(t.inputNames[0],e,n))];case"Prod":return[et.tc(Object(Pi.b)("x",t,e,n),Object(Pi.b)("axes",t,e,n))];case"LeakyRelu":return[et.Kb(Object(Pi.b)("x",t,e,n),Object(Pi.b)("alpha",t,e,n))];case"Prelu":return[et.sc(Object(Pi.b)("x",t,e,n),Object(Pi.b)("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return(async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Object(Pi.b)("thenBranch",t,e,n),s=Object(Pi.b)("elseBranch",t,e,n),a=Object(Pi.b)("cond",t,e,n),i=Object(Pi.b)("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i):n.functionMap[s].executeFunctionAsync(i)}case"While":case"StatelessWhile":{const r=Object(Pi.b)("body",t,e,n),s=Object(Pi.b)("cond",t,e,n),a=Object(Pi.b)("args",t,e,n),i=(await n.functionMap[s].executeFunctionAsync(a))[0];let o=await i.data(),u=a;for(;o[0];){u=await n.functionMap[r].executeFunctionAsync(u);const t=(await n.functionMap[s].executeFunctionAsync(u))[0];o=await t.data()}return u}case"LoopCond":return[Object(Pi.b)("pred",t,e,n).clone()];case"Switch":{const r=Object(Pi.b)("pred",t,e,n),s=Object(Pi.b)("data",t,e,n);return(await r.data())[0]?[void 0,s.clone()]:[s.clone(),void 0]}case"Merge":const r=t.inputNames.find(t=>void 0!==Object(Pi.c)(t,e,n));return r?[Object(Pi.c)(r,e,n).clone()]:void 0;case"Enter":const s=Object(Pi.b)("frameName",t,e,n),a=Object(Pi.b)("tensor",t,e,n);return n.enterFrame(s),[a.clone()];case"Exit":const i=Object(Pi.b)("tensor",t,e,n);return n.exitFrame(),[i.clone()];case"NextIteration":const o=Object(Pi.b)("tensor",t,e,n);return n.nextIteration(),[o.clone()];case"TensorArrayV3":const u=Object(Pi.b)("size",t,e,n),c=Object(Pi.b)("dtype",t,e,n),l=Object(Pi.b)("elementShape",t,e,n),h=Object(Pi.b)("dynamicSize",t,e,n),d=Object(Pi.b)("clearAfterRead",t,e,n),p=Object(Pi.b)("identicalElementShapes",t,e,n),f=Object(Pi.b)("name",t,e,n),m=new Gi(f,c,u,l,p,h,d);return n.addTensorArray(m),[Object(et.Hc)(m.id),Object(et.Hc)(1)];case"TensorArrayWriteV3":const g=Object(Pi.b)("tensorArrayId",t,e,n),b=Object(Pi.b)("index",t,e,n),y=Object(Pi.b)("tensor",t,e,n);return n.getTensorArray(g).write(b,y),[Object(et.Hc)(1)];case"TensorArrayReadV3":const x=Object(Pi.b)("tensorArrayId",t,e,n),w=Object(Pi.b)("index",t,e,n);return[n.getTensorArray(x).read(w)];case"TensorArrayGatherV3":const v=Object(Pi.b)("tensorArrayId",t,e,n),O=Object(Pi.b)("indices",t,e,n),S=Object(Pi.b)("dtype",t,e,n);return[n.getTensorArray(v).gather(O,S)];case"TensorArrayScatterV3":const C=Object(Pi.b)("tensorArrayId",t,e,n),I=Object(Pi.b)("indices",t,e,n),N=Object(Pi.b)("tensor",t,e,n);return n.getTensorArray(C).scatter(I,N),[Object(et.Hc)(1)];case"TensorArrayConcatV3":const k=Object(Pi.b)("tensorArrayId",t,e,n),E=n.getTensorArray(k),A=Object(Pi.b)("dtype",t,e,n);return[E.concat(A)];case"TensorArraySplitV3":const T=Object(Pi.b)("tensorArrayId",t,e,n),$=Object(Pi.b)("tensor",t,e,n),R=Object(Pi.b)("lengths",t,e,n);return n.getTensorArray(T).split(R,$),[Object(et.Hc)(1)];case"TensorArraySizeV3":const j=Object(Pi.b)("tensorArrayId",t,e,n),D=n.getTensorArray(j);return[Object(et.Hc)(D.size(),"int32")];case"TensorArrayCloseV3":const F=Object(Pi.b)("tensorArrayId",t,e,n);return n.getTensorArray(F).clearAndClose(),[Object(et.Hc)(0)];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"convolution":return et.td(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Object(Pi.b)("stride",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("dataFormat",t,e,n).toUpperCase(),i=Object(Pi.b)("dilation",t,e,n);return[et.X(Object(Pi.b)("x",t,e,n),Object(Pi.b)("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("dataFormat",t,e,n).toUpperCase(),i=Object(Pi.b)("dilations",t,e,n);return[et.Y(Object(Pi.b)("x",t,e,n),Object(Pi.b)("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":case"FusedDepthwiseConv2dNative":{const[r,s]=Object(Pi.b)("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=Object(Pi.b)("numArgs",t,e,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const c=Object(Pi.b)("strides",t,e,n),l=Object(Pi.b)("pad",t,e,n),h=Object(Pi.b)("dataFormat",t,e,n).toUpperCase(),d=Object(Pi.b)("dilations",t,e,n),[p,f]=Object(Pi.b)("args",t,e,n);return[("_FusedConv2D"===t.op?et.yb.conv2d:et.yb.depthwiseConv2d)({x:Object(Pi.b)("x",t,e,n),filter:Object(Pi.b)("filter",t,e,n),strides:[c[1],c[2]],pad:l,dataFormat:h,dilations:[d[1],d[2]],bias:p,activation:s,preluActivationWeights:f})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(Pi.b)("outputShape",t,e,n),s=Object(Pi.b)("strides",t,e,n),a=Object(Pi.b)("pad",t,e,n);return[et.Z(Object(Pi.b)("x",t,e,n),Object(Pi.b)("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("dilations",t,e,n),i=Object(Pi.b)("dataFormat",t,e,n).toUpperCase();return[et.fb(Object(Pi.b)("input",t,e,n),Object(Pi.b)("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("dataFormat",t,e,n).toUpperCase(),i=Object(Pi.b)("dilations",t,e,n);return[et.ab(Object(Pi.b)("x",t,e,n),Object(Pi.b)("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("kernelSize",t,e,n);return[et.C(Object(Pi.b)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("kernelSize",t,e,n);return[et.Yb(Object(Pi.b)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("kernelSize",t,e,n),i=Object(Pi.b)("includeBatchInIndex",t,e,n),{result:o,indexes:u}=et.ac(Object(Pi.b)("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("kernelSize",t,e,n);return[et.D(Object(Pi.b)("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Object(Pi.b)("strides",t,e,n),s=Object(Pi.b)("pad",t,e,n),a=Object(Pi.b)("kernelSize",t,e,n);return[et.Zb(Object(Pi.b)("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return et.td(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Object(Pi.b)("shape",t,e,n),s=Object(Pi.b)("dtype",t,e,n),a=Object(Pi.b)("value",t,e,n);return[et.vb(r,a,s)]}case"LinSpace":{const r=Object(Pi.b)("start",t,e,n),s=Object(Pi.b)("stop",t,e,n),a=Object(Pi.b)("num",t,e,n);return[et.Ob(r,s,a)]}case"Multinomial":{const r=Object(Pi.b)("logits",t,e,n),s=Object(Pi.b)("numSamples",t,e,n),a=Object(Pi.b)("seed",t,e,n);return[et.jc(r,s,a)]}case"OneHot":{const r=Object(Pi.b)("indices",t,e,n),s=Object(Pi.b)("depth",t,e,n),a=Object(Pi.b)("onValue",t,e,n),i=Object(Pi.b)("offValue",t,e,n);return[et.nc(r,s,a,i)]}case"Ones":return[et.oc(Object(Pi.b)("shape",t,e,n),Object(Pi.b)("dtype",t,e,n))];case"OnesLike":return[et.pc(Object(Pi.b)("x",t,e,n))];case"RandomUniform":return[et.vc(Object(Pi.b)("shape",t,e,n),Object(Pi.b)("minval",t,e,n),Object(Pi.b)("maxval",t,e,n),Object(Pi.b)("dtype",t,e,n))];case"Range":{const r=Object(Pi.b)("start",t,e,n),s=Object(Pi.b)("stop",t,e,n),a=Object(Pi.b)("step",t,e,n);return[et.wc(r,s,a,Object(Pi.b)("dtype",t,e,n))]}case"TruncatedNormal":{const r=Object(Pi.b)("shape",t,e,n),s=Object(Pi.b)("mean",t,e,n),a=Object(Pi.b)("stdDev",t,e,n),i=Object(Pi.b)("seed",t,e,n);return[et.yd(r,s,a,Object(Pi.b)("dtype",t,e,n),i)]}case"Zeros":return[et.Hd(Object(Pi.b)("shape",t,e,n),Object(Pi.b)("dtype",t,e,n))];case"ZerosLike":return[et.Id(Object(Pi.b)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const r=Object(Pi.b)("boxes",t,e,n),s=Object(Pi.b)("scores",t,e,n),a=Object(Pi.b)("maxOutputSize",t,e,n),i=Object(Pi.b)("iouThreshold",t,e,n),o=Object(Pi.b)("scoreThreshold",t,e,n);if("NonMaxSuppressionV5"===t.op){const u=Object(Pi.b)("softNmsSigma",t,e,n),c=await et.Fb.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[c.selectedIndices,c.selectedScores]}return[await et.Fb.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Object(Pi.b)("condition",t,e,n).asType("bool"),s=[await et.Gd(r)];return r.dispose(),s}case"ListDiff":return et.Nc(Object(Pi.b)("x",t,e,n),Object(Pi.b)("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return et.td(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Object(Pi.b)("x",t,e,n),s=Object(Pi.b)("k",t,e,n),a=Object(Pi.b)("sorted",t,e,n),i=et.vd(r,s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return et.td(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Object(Pi.b)("images",t,e,n),s=Object(Pi.b)("size",t,e,n),a=Object(Pi.b)("alignCorners",t,e,n);return[et.Fb.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=Object(Pi.b)("images",t,e,n),s=Object(Pi.b)("size",t,e,n),a=Object(Pi.b)("alignCorners",t,e,n);return[et.Fb.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=Object(Pi.b)("image",t,e,n),s=Object(Pi.b)("boxes",t,e,n),a=Object(Pi.b)("boxInd",t,e,n),i=Object(Pi.b)("cropSize",t,e,n),o=Object(Pi.b)("method",t,e,n),u=Object(Pi.b)("extrapolationValue",t,e,n);return[et.Fb.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return et.td(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Object(Pi.b)("default",t,e,n);return[Object(Pi.c)(t.name,e,n)||r];case"Placeholder":return[Object(Pi.c)(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Object(Pi.b)("x",t,e,n).clone()];case"IdentityN":return Object(Pi.b)("x",t,e,n).map(t=>t.clone());case"Snapshot":return[Object(Pi.b)("x",t,e,n).clone()];case"Shape":return[et.pd(Object(Pi.b)("x",t,e,n).shape,"int32")];case"ShapeN":return Object(Pi.b)("x",t,e,n).map(t=>et.pd(t.shape));case"Size":return[et.Hc(Object(Pi.b)("x",t,e,n).size,"int32")];case"Rank":return[et.Hc(Object(Pi.b)("x",t,e,n).rank,"int32")];case"NoOp":return[et.Hc(1)];case"Print":const s=Object(Pi.b)("x",t,e,n),a=Object(Pi.b)("data",t,e,n),i=Object(Pi.b)("message",t,e,n),o=Object(Pi.b)("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return et.td(()=>((t,e,n)=>{switch(t.op){case"Equal":return[et.ob(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"NotEqual":return[et.mc(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Greater":return[et.Bb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"GreaterEqual":return[et.Cb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Less":return[et.Lb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"LessEqual":return[et.Mb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"LogicalAnd":return[et.Tb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"LogicalNot":return[et.Ub(Object(Pi.b)("a",t,e,n))];case"LogicalOr":return[et.Vb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];case"Select":case"SelectV2":return[et.Fd(Object(Pi.b)("condition",t,e,n),Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return et.td(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[et.Wb(Object(Pi.b)("a",t,e,n),Object(Pi.b)("b",t,e,n),Object(Pi.b)("transposeA",t,e,n),Object(Pi.b)("transposeB",t,e,n))];case"Transpose":return[et.xd(Object(Pi.b)("x",t,e,n),Object(Pi.b)("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Object(Pi.b)("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=Object(Pi.b)("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=Object(Pi.b)("args",t,e,n);return[et.yb.matMul({a:Object(Pi.b)("a",t,e,n),b:Object(Pi.b)("b",t,e,n),transposeA:Object(Pi.b)("transposeA",t,e,n),transposeB:Object(Pi.b)("transposeB",t,e,n),bias:u,activation:s,preluActivationWeights:c})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return et.td(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[et.G(Object(Pi.b)("x",t,e,n),Object(Pi.b)("mean",t,e,n),Object(Pi.b)("variance",t,e,n),Object(Pi.b)("offset",t,e,n),Object(Pi.b)("scale",t,e,n),Object(Pi.b)("epsilon",t,e,n))];case"LRN":return[et.Pb(Object(Pi.b)("x",t,e,n),Object(Pi.b)("radius",t,e,n),Object(Pi.b)("bias",t,e,n),Object(Pi.b)("alpha",t,e,n),Object(Pi.b)("beta",t,e,n))];case"Softmax":return[et.Yc(Object(Pi.b)("x",t,e,n))];case"LogSoftmax":return[et.Sb(Object(Pi.b)("x",t,e,n))];case"SparseToDense":return[et.bd(Object(Pi.b)("sparseIndices",t,e,n),Object(Pi.b)("outputShape",t,e,n),Object(Pi.b)("sparseValues",t,e,n),Object(Pi.b)("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return et.td(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.Xb(Object(Pi.b)("x",t,e,n),r,s)]}case"Mean":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.cc(Object(Pi.b)("x",t,e,n),r,s)]}case"Min":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.ec(Object(Pi.b)("x",t,e,n),r,s)]}case"Sum":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.kd(Object(Pi.b)("x",t,e,n),r,s)]}case"All":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.t(Object(Pi.b)("x",t,e,n),r,s)]}case"Any":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.u(Object(Pi.b)("x",t,e,n),r,s)]}case"ArgMax":{const r=Object(Pi.b)("axis",t,e,n);return[et.v(Object(Pi.b)("x",t,e,n),r)]}case"ArgMin":{const r=Object(Pi.b)("axis",t,e,n);return[et.w(Object(Pi.b)("x",t,e,n),r)]}case"Prod":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("keepDims",t,e,n);return[et.tc(Object(Pi.b)("x",t,e,n),r,s)]}case"Cumsum":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("exclusive",t,e,n),a=Object(Pi.b)("reverse",t,e,n);return[et.db(Object(Pi.b)("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return et.td(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Object(Pi.b)("n",t,e,n),s=Object(Pi.b)("axis",t,e,n);let a=Object(Pi.b)("tensors",t,e,n);return a=a.slice(0,r),[et.S(a,s)]}case"GatherV2":case"Gather":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("x",t,e,n),a=Object(Pi.b)("indices",t,e,n);return[et.zb(s,a.asType("int32"),r)]}case"ReverseV2":case"Reverse":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("x",t,e,n);return[et.Dc(s,r)]}case"Slice":{const r=Object(Pi.b)("begin",t,e,n),s=Object(Pi.b)("size",t,e,n);return[et.Sc(Object(Pi.b)("x",t,e,n),r,s)]}case"StridedSlice":{const r=Object(Pi.b)("begin",t,e,n),s=Object(Pi.b)("end",t,e,n),a=Object(Pi.b)("strides",t,e,n),i=Object(Pi.b)("beginMask",t,e,n),o=Object(Pi.b)("endMask",t,e,n),u=Object(Pi.b)("ellipsisMask",t,e,n),c=Object(Pi.b)("newAxisMask",t,e,n),l=Object(Pi.b)("shrinkAxisMask",t,e,n),h=Object(Pi.b)("x",t,e,n);if(1===r.length&&h.shape.length>1)for(let t=1;t<h.shape.length;t++)r.push(0),s.push(h.shape[t]),a.push(a[0]);return[et.id(h,r,s,a,i,o,u,c,l)]}case"Pack":return et.td(()=>{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("tensors",t,e,n),a=s[0].shape,i=s[0].squeeze().shape,o=s.map(t=>{const e=et.Bd.arraysEqual(t.shape,a);if(!e&&!et.Bd.arraysEqual(t.squeeze().shape,i))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)});return[et.hd(o,r)]});case"Unpack":return et.td(()=>{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("tensor",t,e,n);return et.zd(s,r)});case"Tile":{const r=Object(Pi.b)("reps",t,e,n);return[et.ud(Object(Pi.b)("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Object(Pi.b)("axis",t,e,n),s=Object(Pi.b)("numOrSizeSplits",t,e,n);return et.cd(Object(Pi.b)("x",t,e,n),s,r)}case"ScatterNd":{const r=Object(Pi.b)("indices",t,e,n),s=Object(Pi.b)("values",t,e,n),a=Object(Pi.b)("shape",t,e,n);return[et.Ic(r,s,a)]}case"GatherNd":{const r=Object(Pi.b)("x",t,e,n),s=Object(Pi.b)("indices",t,e,n);return[et.Ab(r,s)]}case"SparseToDense":{const r=Object(Pi.b)("sparseIndices",t,e,n),s=Object(Pi.b)("outputShape",t,e,n),a=Object(Pi.b)("sparseValues",t,e,n),i=Object(Pi.b)("defaultValue",t,e,n);return[et.bd(r,a,s,a.dtype===i.dtype?i:i.asType(a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return et.td(()=>((t,e,n)=>{switch(t.op){case"FFT":return[et.ub(Object(Pi.b)("x",t,e,n))];case"IFFT":return[et.Db(Object(Pi.b)("x",t,e,n))];case"RFFT":return[et.Ec(Object(Pi.b)("x",t,e,n))];case"IRFFT":return[et.Hb(Object(Pi.b)("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return et.td(()=>((t,e,n)=>{switch(t.op){case"Cast":return[et.O(Object(Pi.b)("x",t,e,n),Object(Pi.b)("dtype",t,e,n))];case"ExpandDims":{const r=Object(Pi.b)("axis",t,e,n);return[et.rb(Object(Pi.b)("x",t,e,n),r)]}case"Squeeze":{const r=Object(Pi.b)("axis",t,e,n);return[et.gd(Object(Pi.b)("x",t,e,n),r)]}case"Reshape":return[et.Cc(Object(Pi.b)("x",t,e,n),Object(Pi.b)("shape",t,e,n))];case"PadV2":case"Pad":return[et.qc(Object(Pi.b)("x",t,e,n),Object(Pi.f)(Object(Pi.b)("padding",t,e,n),2),Object(Pi.b)("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Object(Pi.b)("blockShape",t,e,n),s=Object(Pi.f)(Object(Pi.b)("paddings",t,e,n),2);return[et.ad(Object(Pi.b)("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Object(Pi.b)("blockShape",t,e,n),s=Object(Pi.f)(Object(Pi.b)("crops",t,e,n),2);return[et.K(Object(Pi.b)("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Object(Pi.b)("blockSize",t,e,n),s=Object(Pi.b)("dataFormat",t,e,n).toUpperCase();return[et.eb(Object(Pi.b)("x",t,e,n),r,s)]}case"BroadcastTo":return[et.L(Object(Pi.b)("x",t,e,n),Object(Pi.b)("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const r=Object(Vi.a)(t.op);if(r&&r.customExecutor)return r.customExecutor(new Wi(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r instanceof Promise?r.then(t=>[].concat(t)):[].concat(r)}class qi{constructor(t,e,n={}){this.weightMap=t,this.tensorArrayMap=e,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}}function Ki(t,e,n){const r=new Set,s=[];let a=null,i=null;const o=new Set,u=Object.keys(t).map(t=>Object(Pi.e)(t)[0]),c=[...e];for(;c.length>0;){const t=c.pop();(Ji(t)||Zi(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===u.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),c.push(t))}):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}const Xi=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile"],Yi=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function Ji(t){return Xi.indexOf(t.op)>=0}function Zi(t){return Yi.indexOf(t.op)>=0}class Qi{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new Qi(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Ki(t,e,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(t=>Object(Pi.e)(t)[0]).map(e=>t.nodes[e]).forEach(t=>{r.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{r.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&r.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map(t=>this.graph.nodes[Object(Pi.e)(t)[0]]),s=e.map(t=>this.graph.nodes[Object(Pi.e)(t)[0]]),a=this.getCompilationKey(r,s);let i=this.compiledMap.get(a);null==i&&(i=this.compile(t,s),this.compiledMap.set(a,i));const o={};return Object(et.td)(()=>{const n=new qi(this.weightMap,o,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=Object(Pi.e)(e),a=[];a[s]=t[e],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let t=0;t<i.length;t++){const o=i[t];if(!r[o.name]){const t=Hi(o,r,n);if(t instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=t,this.checkTensorForDisposal(o.name,o,r,n,s,e,a)}}return e.map(t=>Object(Pi.c)(t,r,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=Object(Pi.d)(t.name,n,r);null!=e&&e.forEach(t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e,n=!1){t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=new qi(this.weightMap,{},this.functionExecutorMap),s=await this.executeWithControlFlow(t,r,e,n),a=e.map(t=>Object(Pi.c)(t,s,r)),i=new Set(a.map(t=>t.id)),o=new Set(Object.keys(t).map(e=>t[e].id));return Object.keys(s).forEach(t=>{s[t].forEach(t=>{!t||t.isDisposed||i.has(t.id)||o.has(t.id)||-1!==this.weightIds.indexOf(t.id)||t.dispose()})}),a}async executeFunctionAsync(t){const e=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this.executeAsync(e,this.outputNodes,!0)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map(t=>this.graph.nodes[Object(Pi.e)(t)[0]]),i=n.map(t=>this.graph.nodes[Object(Pi.e)(t)[0]]),{usedNodes:o,missingInputs:u,dynamicNode:c,syncInputs:l}=Ki(t,i,this.weightMap),h=[...a,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),d=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=Object(Pi.e)(e),s=[];s[r]=t[e],d[n]=s});const p={},f=this.getFrozenTensorIds(d),m={};for(;h.length>0;){const t=this.processStack(a,h,e,d,m,f,n,p,o);await Promise.all(t)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter(t=>!Ji(t)&&!Object(Pi.c)(t.name,d,e)).map(t=>t.name);if(g.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${l}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${t}`)}return d}processStack(t,e,n,r,s,a,i,o,u){const c=[];for(;e.length>0;){const l=e.pop();n.currentContext=l.contexts;let h="";if("Enter"===l.node.op&&Object(Pi.b)("isConstant",l.node,r,n)&&([h]=Object(Pi.a)(l.node.name,n)),-1===t.indexOf(l.node)){const t=Hi(l.node,r,n);h||([h]=Object(Pi.a)(l.node.name,n));const d=n.currentContext;t instanceof Promise?c.push(t.then(t=>(r[h]=t,n.currentContext=d,this.checkTensorForDisposal(h,l.node,r,n,a,i,o),this.processChildNodes(l.node,e,n,r,s,u),t))):(r[h]=t,this.checkTensorForDisposal(h,l.node,r,n,a,i,o),this.processChildNodes(l.node,e,n,r,s,u))}else this.processChildNodes(l.node,e,n,r,s,u)}return c}processChildNodes(t,e,n,r,s,a){t.children.forEach(t=>{const[i]=Object(Pi.a)(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!Object(Pi.c)(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!Object(Pi.c)(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[r]=Object(Pi.e)(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value,e=t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e);et.Bd.assert(e,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&et.Bd.assert(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=Object(Pi.e)(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=Object(Pi.e)(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class to{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=et.Gb.browserHTTPRequest(t,this.loadOptions);else{const e=et.Gb.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(et.Gb.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=et.Gb.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new Qi(zi.a.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0}async save(t,e){if("string"==typeof t){const e=et.Gb.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof et.l||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,r)=>(e[n]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}async function eo(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new to(t,e);return await n.load(),n}var no=n(18),ro=n(12),so=n(17);class ao{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return et.Bd.assert(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),io(async()=>(await n.iterator()).columnMajorBatch(t,e,oo),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,io(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,io(async()=>(await e.iterator()).filter(e=>et.td(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return io(async()=>(await e.iterator()).map(e=>et.td(()=>t(e))),this.size)}mapAsync(t){const e=this;return io(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return io(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,io(async()=>{const n=Object(ro.e)(async()=>({value:await e.iterator(),done:!1}));return Object(ro.d)(n.take(t))},n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,io(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=no.alea(e||et.Bd.now().toString());return io(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,io(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function io(t,e=null){return new class extends ao{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function oo(t){if(null===t)return null;const e=t[0];if(Object(so.a)(e)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof et.l?et.hd(t):et.od(t)}(t),recurse:!1}}return{value:null,recurse:!0}}ao.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");ro.a;ro.a;var uo=n(49);uo.a;function co(t,e,n,r){const s=et.Bd.getTypedArrayFromDType(r,et.Bd.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function lo(t,e,n,r,s){const a=e.length,i=et.Bd.sizeFromShape(e),o=et.Bd.computeStrides(e),u=et.Bd.computeStrides(s),c=et.Bd.getTypedArrayFromDType(n,et.Bd.sizeFromShape(s));for(let e=0;e<i;++e){const n=et.Bd.indexToLoc(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];c[et.Bd.locToIndex(s,a,u)]=t[e]}return c}function ho(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&et.Bd.assert("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function po(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,l=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Object(et.N)(s.outShape,n),g=m.values,b=s.outShape[1]*s.outShape[2]*s.outShape[3],y=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*b,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let b=0;b<s.outHeight;++b){const w=b*i-d,v=Math.max(0,w),O=Math.min(s.inHeight,l+w),S=n+b*y;for(let n=0;n<s.outWidth;++n){const i=n*o-p,l=Math.max(0,i),d=Math.min(s.inWidth,h+i);let b=f,y=0,w=0;for(let n=v;n<O;n+=u){const s=m+n*r[1];for(let n=l;n<d;n+=c){const i=t[s+n*r[2]+e];"max"===a&&i>b?b=i:"avg"===a&&(y+=i,w++)}if(isNaN(b))break}g[S+n*x+e]="avg"===a?y/w:b}}}return m}function fo(t,e,n,r,s=!1,a=!1){const i=Object(et.N)(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=Object(et.N)(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-p;let b=g;for(;b<0;)b+=c;const y=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let p=h;for(;p<0;)p+=l;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=b;n<y;n+=c){const i=n-g;for(let o=p;o<x;o+=l){const u=o-h,c=m.get(t,n,o,e);c>w&&(w=c,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*d+u)}}i.set(v,t,n,o,e)}}return i}const mo=et.Jb.nonMaxSuppressionV3,go=et.Jb.split,bo=et.Jb.tile,yo=et.Jb.topkImpl,xo=et.Jb.whereImpl;function wo(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class vo extends et.d{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new et.a(this,Object(et.mb)())}write(t,e,n){this.firstUse&&(this.firstUse=!1,Object(et.nb)().get("IS_NODE")&&et.F.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n}),r}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){const t=this.readSync(n.real.dataId),e=this.readSync(n.imag.dataId);return et.F.mergeRealAndImagArrays(t,e)}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>et.Bd.decodeString(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return et.N(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Object(et.mb)().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=et.Bd.now();t();return{kernelMs:et.Bd.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Object(et.mb)().keep(t.clone()),imag:Object(et.mb)().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){ho(t,"slice");if(et.Xc.isSliceContinous(t.shape,e,n)){const r=et.Xc.computeFlatOffset(e,t.strides),s=et.Bd.sizeFromShape(n),a=this.readSync(t.dataId);return et.od(a.subarray(r,r+s),n,t.dtype)}const r=et.N(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){ho(t,"stridedSlice");const s=et.Xc.computeOutShape(e,n,r);if(s.some(t=>0===t))return et.od([],s);const a=et.N(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=et.N([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){ho(t,"reverse");const n=et.N(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>et.xc(t)),r=t.map(t=>et.Eb(t));return et.R(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=et.Bd.sizeFromShape(t.shape.slice(e));return t.as2D(-1,n)}),r=et.F.computeOutShape(n.map(t=>t.shape),1),s=et.N(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=et.F.computeOutShape(t.map(t=>t.shape),e);return et.od(s,a,t[0].dtype)}neg(t){return ho(t,"neg"),this.multiply(et.Hc(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,Object(et.Ad)(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){ho(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=et.N(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=et.Bd.parseAxisParam([e],t.shape),r=Object(et.Xb)(t,n),s=et.F.expandShapeToKeepDim(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return et.ib(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,Object(et.Ad)(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return ho([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){ho([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),[l,h,d]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[p,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,b=et.N([o,a,i],t.dtype),y=b.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),b=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<b;e++){let n=0;for(let a=r;a<w;a++)n+=u[t*l+s*h+a*d]*c[a*p+e*f+t*m];y[t*g+(s*i+e)]+=n}}return b.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=wo(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,Object(et.Ad)(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){ho([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){ho(t,"sum"),et.F.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=Object(et.Ad)(t.dtype,"int32"),a=et.Hd(n,s),i=et.Bd.sizeFromShape(r),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=0;for(let t=0;t<i;++t)n+=u[e+t];o[t]=n}return a}prod(t,e){ho(t,"sum");const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=Object(et.Ad)(t.dtype,"int32"),a=et.Hd(n,s),i=et.Bd.sizeFromShape(r),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=1;for(let t=0;t<i;++t)n*=u[e+t];o[t]=n}return a}unsortedSegmentSum(t,e,n){ho(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=et.Hc(s,"int32"),a=et.ob(n,e).asType("float32").mul(t).sum(0);r.push(a)}return et.hd(r)}argMin(t,e){ho(t,"argMin");const n=[e];et.F.assertAxesAreInnerMostDims("argMin",n,t.rank);const[r,s]=et.F.computeOutAndReduceShapes(t.shape,n),a=et.Hd(r,"int32"),i=et.Bd.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){ho(t,"argMax");const n=[e];et.F.assertAxesAreInnerMostDims("argMax",n,t.rank);const[r,s]=et.F.computeOutAndReduceShapes(t.shape,n),a=et.Hd(r,"int32"),i=et.Bd.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(ho(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=Object(et.Ad)(t.dtype,"int32"),a=et.Hd(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=u)for(let e=0;e<u;e++){const r=c(t,e);if(0===e)i[r]=n?0:o[r];else{const s=c(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return ho([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return ho([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return ho([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return ho([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return ho([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return ho([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){ho(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return ho([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return ho([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){ho([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=et.Hd(e.shape,Object(et.Ad)(e.dtype,n.dtype)),o=this.readSync(i.dataId);let u=0;const c=0===t.rank||t.rank>1||1===e.rank?1:et.Bd.sizeFromShape(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<c;e++)1===r[t]?o[u++]=s[t]:o[u++]=a[t];return i}where(t){ho([t],"where");const e=this.readSync(t.dataId);return xo(t.shape,e)}topk(t,e,n){ho(t,"topk");const r=this.readSync(t.dataId);return yo(r,t.shape,t.dtype,e,n)}min(t,e){ho(t,"min"),et.F.assertAxesAreInnerMostDims("min",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Hd(n,t.dtype),a=et.Bd.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return ho([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return ho([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return ho([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){ho(t,"all"),et.F.assertAxesAreInnerMostDims("all",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Hd(n,t.dtype),a=et.Bd.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){ho(t,"any"),et.F.assertAxesAreInnerMostDims("any",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Hd(n,t.dtype),a=et.Bd.sizeFromShape(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return ho([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){ho(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){ho(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){ho(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){ho(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){ho(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){ho(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){ho(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){ho(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){ho(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){ho(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){ho(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){ho(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){ho(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){ho(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){ho(t,"relu");const e=et.Hd(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){ho(t,"relu");const e=et.Hd(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return ho([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){ho(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){ho([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){ho(t,"selu");const e=et.F.SELU_SCALEALPHA,n=et.F.SELU_SCALE,r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>=0?n*a:e*(Math.exp(a)-1)}return this.makeOutput(r,t.shape,"float32")}clip(t,e,n){ho(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){ho(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){ho(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){ho(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){ho(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){ho(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){ho(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){ho(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){ho(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){ho(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return ho([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){ho(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){ho(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){ho(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=et.Bd.tanh(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){ho(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){ho(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){ho(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){ho(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId),r=et.F.ERF_P,s=et.F.ERF_A1,a=et.F.ERF_A2,i=et.F.ERF_A3,o=et.F.ERF_A4,u=et.F.ERF_A5;for(let t=0;t<n.length;++t){const c=Math.sign(n[t]),l=Math.abs(n[t]),h=1/(1+r*l);e[t]=c*(1-((((u*h+o)*h+i)*h+a)*h+s)*h*Math.exp(-l*l))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){ho(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=wo(this,i,s,a)),i}conv2d(t,e,n){ho([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=et.N(n.outShape,t.dtype),h=t.strides[0],d=c?t.strides[1]:t.strides[2],p=c?t.strides[2]:1,f=c?1:t.strides[1],m=l.strides[0],g=c?l.strides[1]:l.strides[2],b=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=l.values;for(let t=0;t<n.batchSize;++t){const c=t*h,l=t*m;for(let t=0;t<n.outHeight;++t){const h=l+t*g,m=t*n.strideHeight-u;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const u=t*e.strides[0],l=c+r*d;for(let t=0;t<n.outWidth;++t){const r=h+t*b,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=l+s*p;let c=u+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*y]+=e*w[c+t];c+=n.outChannels}}}}}}return l.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,d=et.N(n.outShape,t.dtype),p=this.readSync(t.dataId),f=this.readSync(e.dataId),m=d.values;for(let g=0;g<n.batchSize;++g){const b=g*t.strides[0],y=g*d.strides[0];for(let g=0;g<n.outDepth;++g){const x=y+g*d.strides[1],w=g*n.strideDepth-c;for(let c=0;c<r;c++){const r=w+c*i;if(r<0||r>=n.inDepth)continue;const g=c*e.strides[0],y=b+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*d.strides[2],c=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=c+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],d=y+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-l;for(let t=0;t<a;t++){const a=s+t*u;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=d+a*n.inChannels;let c=i;for(let t=0;t<n.inChannels;++t){const e=p[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[c+t];c+=n.outChannels}}}}}}}}return d.toTensor()}conv2dDerInput(t,e,n){ho([t,e],"conv2dDerInput");const r=et.N(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,u,c]=e.strides,{batchSize:l,filterHeight:h,filterWidth:d,inChannels:p,inHeight:f,inWidth:m,outChannels:g,outHeight:b,outWidth:y,strideHeight:x,strideWidth:w,dataFormat:v}=n,O=h-1-n.padInfo.top,S=d-1-n.padInfo.left,C="channelsLast"===v,I=r.strides[0],N=C?r.strides[1]:r.strides[2],k=C?r.strides[2]:1,E=C?1:r.strides[1],A=t.strides[0],T=C?t.strides[1]:t.strides[2],$=C?t.strides[2]:1,R=C?1:t.strides[1];for(let t=0;t<l;++t)for(let e=0;e<p;++e)for(let n=0;n<f;++n){const r=n-O,l=Math.max(0,Math.ceil(r/x)),p=Math.min(b,(h+r)/x);for(let f=0;f<m;++f){const m=f-S,b=Math.max(0,Math.ceil(m/w)),v=Math.min(y,(d+m)/w);let O=0;for(let n=l;n<p;++n){const s=n*x-r;for(let r=b;r<v;++r){const l=A*t+T*n+$*r,p=o*(h-1-s)+u*(d-1-(r*w-m))+c*e;for(let t=0;t<g;++t){O+=a[l+R*t]*i[p+t]}}}s[I*t+N*n+k*f+E*e]=O}}return r.toTensor()}conv3dDerInput(t,e,n){const r=et.N(n.inShape,"float32"),s=r.values,[a,i,o,u]=r.strides,c=this.readSync(t.dataId),[l,h,d,p]=t.strides,f=this.readSync(e.dataId),[m,g,b,y]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:O,inChannels:S,inDepth:C,inHeight:I,inWidth:N,outChannels:k,outDepth:E,outHeight:A,outWidth:T,strideDepth:$,strideHeight:R,strideWidth:j}=n,D=w-1-n.padInfo.front,F=v-1-n.padInfo.top,_=O-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<S;++e)for(let n=0;n<C;++n){const r=n-D,x=Math.max(0,Math.ceil(r/$)),S=Math.min(E,(w+r)/$);for(let C=0;C<I;++C){const I=C-F,E=Math.max(0,Math.ceil(I/R)),D=Math.min(A,(v+I)/R);for(let A=0;A<N;++A){const N=A-_,F=Math.max(0,Math.ceil(N/j)),M=Math.min(T,(O+N)/j);let L=0;for(let n=x;n<S;++n){const s=n*$-r;for(let r=E;r<D;++r){const a=r*R-I;for(let i=F;i<M;++i){const o=l*t+h*n+d*r+p*i,u=m*(w-1-s)+g*(v-1-a)+b*(O-1-(i*j-N))+y*e;for(let t=0;t<k;++t){L+=c[o+t]*f[u+t]}}}}s[a*t+i*n+o*C+u*A+e]=L}}}return r.toTensor()}conv2dDerFilter(t,e,n){ho([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,u=et.N(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((l-t)/r)),a=Math.min(n.outHeight,(n.inHeight+l-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((c-p)/s)),f=Math.min(n.outWidth,(n.inWidth+c-p)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let b=0;for(let u=0;u<n.batchSize;++u)for(let n=e;n<a;++n){const e=t+n*r-l;for(let t=i;t<f;++t){const r=p+t*s-c;b+=o?h.get(u,e,r,m)*d.get(u,n,t,g):h.get(u,m,e,r)*d.get(u,g,n,t)}}u.set(b,t,p,m,g)}}}return u.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,c=et.N(n.filterShape,"float32"),l=c.values,[h,d,p,f]=c.strides,m=this.readSync(e.dataId),[g,b,y,x]=e.strides,w=this.readSync(t.dataId),[v,O,S,C]=t.strides,I=n.padInfo.front,N=n.padInfo.left,k=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((I-t)/r)),i=Math.min(n.outDepth,(n.inDepth+I-t)/r),c=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((k-h)/s)),E=Math.min(n.outHeight,(n.inHeight+k-h)/s),A=h*d+c;for(let c=0;c<u;++c){const u=Math.max(0,Math.ceil((N-c)/a)),d=Math.min(n.outWidth,(n.inWidth+N-c)/a),T=c*p+A;for(let p=0;p<n.inChannels;++p){const A=p*f+T;for(let f=0;f<n.outChannels;++f){let T=0;for(let l=0;l<n.batchSize;++l){const n=l*v,A=l*g;for(let l=e;l<i;++l){const e=(t+l*r-I)*O+n,i=l*b+A;for(let t=o;t<E;++t){const n=(h+t*s-k)*S+e,r=t*y+i;for(let t=u;t<d;++t){const e=t*x+r;T+=w[(c+t*a-N)*C+n+p]*m[e+f]}}}}l[A+f]=T}}}}}return c.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=wo(this,i,s,a)),i}depthwiseConv2D(t,e,n){ho([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=et.N(n.outShape,t.dtype),h=this.readSync(t.dataId),d=this.readSync(e.dataId),p=l.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*l.strides[0];for(let f=0;f<n.outHeight;++f){const b=g+f*l.strides[1],y=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=y+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=b+t*l.strides[2],a=t*n.strideWidth-u;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],u=g+s*n.inChannels;let l=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[u+t];for(let t=0;t<c;++t)p[l+t]+=e*d[m+t];l+=c,m+=c}}}}}}return l.toTensor()}depthwiseConv2DDerInput(t,e,n){ho([t,e],"depthwiseConv2DDerInput");const r=et.N(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,u=this.readSync(t.dataId),[c,l,h]=t.strides,d=this.readSync(e.dataId),[p,f,m]=e.strides,{batchSize:g,filterHeight:b,filterWidth:y,inChannels:x,inHeight:w,inWidth:v,outChannels:O,outHeight:S,outWidth:C,strideHeight:I,strideWidth:N}=n,k=b-1-n.padInfo.top,E=y-1-n.padInfo.left,A=O/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-k,g=Math.max(0,Math.ceil(r/I)),x=Math.min(S,(b+r)/I);for(let w=0;w<v;++w){const v=w-E,O=Math.max(0,Math.ceil(v/N)),S=Math.min(C,(y+v)/N);let k=0;for(let n=g;n<x;++n){const s=n*I-r;for(let r=O;r<S;++r){const a=c*t+l*n+h*r,i=p*(b-1-s)+f*(y-1-(r*N-v))+m*e;for(let t=0;t<A;++t){k+=u[a+(e*A+t)]*d[i+t]}}}s[a*t+i*n+o*w+e]=k}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){ho([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=et.N(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((u-p)/s)),f=Math.min(n.outWidth,(n.inWidth+u-p)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/l),b=m%l;let y=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=p+t*s-u;y+=h.get(o,e,r,g)*d.get(o,n,t,m)}}o.set(y,t,p,g,b)}}}return o.toTensor()}tile(t,e){return ho(t,"tile"),bo(this.bufferSync(t),e)}pad(t,e,n){ho(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=et.N(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=a.indexToLoc(e),n=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...n)}return i.toTensor()}gather(t,e,n){ho([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=et.N(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){ho([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=et.F.getReshaped(t.shape,e,r),a=et.F.getPermuted(s.length,e.length),i=et.F.getReshapedPermuted(t.shape,e,r),o=et.F.getSliceBeginCoords(n,e.length),u=et.F.getSliceSize(i,n,e.length);return et.xd(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){ho([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=et.F.getReshaped(a.shape,e,r,!1),o=et.F.getPermuted(i.length,e.length,!1),u=et.F.getReshapedPermuted(a.shape,e,r,!1);return et.xd(a.reshape(i),o).reshape(u)}maxPool(t,e){ho(t,"maxPool");return po(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){ho([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=Object(et.N)(r.outShape,e.dtype,fo(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=h-1-r.padInfo.left,p=l-1-r.padInfo.top,f=et.N(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-p,b=s-d;let y=0;for(let n=0;n<l;n+=u){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=c){const u=(b+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=l*h-1-a.get(t,s,u,e)===n*h+i?1:0;if(0===c)continue;y+=m.get(t,s,u,e)*c}}f.set(y,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){ho([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,d=c-1-n.padInfo.top,p=et.N(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-d,b=i-h;let y=0;for(let a=0;a<c;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<l;r+=u){const a=(b+r)/s;if(a<0||a>=n.outWidth||Math.floor(a)!==a)continue;y+=m.get(t,i,a,e)}}p.set(y*f,t,a,i,e)}return p.toTensor()}pool3d(t,e,n){ho(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),b=et.N(e.outShape,t.dtype),y=b.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],O=e.outShape[4];for(let b=0;b<e.batchSize;++b){const S=b*x,C=b*t.strides[0];for(let b=0;b<e.inChannels;++b)for(let x=0;x<e.outDepth;++x){const I=x*r-d;let N=I;for(;N<0;)N+=i;const k=Math.min(e.inDepth,c+I),E=S+x*w;for(let r=0;r<e.outHeight;++r){const c=r*s-p;let d=c;for(;d<0;)d+=o;const x=Math.min(e.inHeight,l+c),w=E+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let c=s;for(;c<0;)c+=u;const l=Math.min(e.inWidth,h+s),p=w+r*O;let v=m,S=0,I=0;for(let e=N;e<k;e+=i){const r=C+e*t.strides[1];for(let e=d;e<x;e+=o){const s=r+e*t.strides[2];for(let e=c;e<l;e+=u){const r=g[s+e*t.strides[3]+b];if("max"===n&&r>v?v=r:"avg"===n&&(S+=r,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}y[p+b]="avg"===n?S/I:v}}}}return b.toTensor()}avgPool3d(t,e){return ho(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){ho([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,d=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=d-1-n.padInfo.front,g=f-1-n.padInfo.left,b=p-1-n.padInfo.top,y=et.N(e.shape,"float32"),x=1/(i*o*u),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let u=0;u<n.inWidth;++u){const v=i-m,O=o-b,S=u-g;let C=0;for(let i=0;i<d;i+=c){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<p;r+=l){const i=(O+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(S+r)/a;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;C+=w.get(t,o,i,s,e)}}}y.set(C*x,t,i,o,u,e)}return y.toTensor()}maxPool3d(t,e){return ho(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=et.N(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let b=0;b<e.outDepth;++b){const y=b*r-d;let x=y;for(;x<0;)x+=i;const w=Math.min(e.inDepth,c+y);for(let r=0;r<e.outHeight;++r){const c=r*s-p;let d=c;for(;d<0;)d+=o;const v=Math.min(e.inHeight,l+c);for(let s=0;s<e.outWidth;++s){const p=s*a-f;let O=p;for(;O<0;)O+=u;const S=Math.min(e.inWidth,h+p);let C=Number.NEGATIVE_INFINITY,I=-1;for(let e=x;e<w;e+=i){const n=e-y;for(let r=d;r<v;r+=o){const s=r-c;for(let a=O;a<S;a+=u){const i=a-p,o=m.get(t,e,r,a,g);o>=C&&(C=o,I=n*l*h+s*l+i)}}}n.set(I,t,b,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){ho([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,d=r.effectiveFilterHeight,p=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=p-1-r.padInfo.left,g=d-1-r.padInfo.top,b=et.N(e.shape,"float32"),y=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,O=s-g,S=w-m;let C=0;for(let n=0;n<h;n+=u){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<d;a+=c){const u=(O+a)/i;if(!(u<0||u>=r.outHeight||Math.floor(u)!==u))for(let i=0;i<p;i+=l){const c=(S+i)/o;if(c<0||c>=r.outWidth||Math.floor(c)!==c)continue;const l=h*d*p-1-y.get(t,s,u,c,e)===n*d*p+a*p+i?1:0;if(0===l)continue;C+=x.get(t,s,u,c,e)*l}}}b.set(C,t,n,s,w,e)}return b.toTensor()}cast(t,e){return et.F.castTensor(t,e,this)}reshape(t,e){return et.F.reshapeTensor(t,e)}avgPool(t,e){ho(t,"avgPool"),ho(t,"maxPool");return po(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){ho(t,"resizeBilinear");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),c=new Float32Array(et.Bd.sizeFromShape([s,e,n,o])),l=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let d=0;const p=l[0]/h[0],f=l[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=p*s,l=Math.floor(e),h=e-l,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+l*t.strides[1],b=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),l=g+r*t.strides[2],p=b+r*t.strides[2],m=g+a*t.strides[2],y=b+a*t.strides[2];for(let t=0;t<o;t++){const e=u[l+t],n=u[p+t],r=e+(u[m+t]-e)*s,a=r+(n+(u[y+t]-n)*s-r)*h;c[d++]=a}}}return et.od(c,[s,e,n,o])}resizeBilinearBackprop(t,e,n){ho([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,c=new Float32Array(r*s*a*i),l=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=l[0]/h[0],p=l[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*d,o=Math.floor(r),l=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+l*e.strides[1],b=r-o,y=1-b;for(let t=0;t<u;t++){const n=t*p,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,l=h+r*e.strides[2],d=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=y*u,O=y*o,S=b*u,C=b*o;for(let t=0;t<i;t++){const e=f[m++];c[l+t]+=e*v,c[d+t]+=e*O,c[x+t]+=e*S,c[w+t]+=e*C}}}}return et.rd(c,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){ho(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),c=new Float32Array(s*e*n*o),l=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=l[0]/h[0],p=l[1]/h[1];let f=0;for(let l=0;l<s;l++){const s=l*t.strides[0];for(let l=0;l<e;l++){const e=d*l,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=p*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=u[s+t];c[f++]=e}}}}return et.od(c,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){ho([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,c=new Float32Array(r*s*a*i),l=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],d=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=h[0]/d[0],f=h[1]/d[1],m=1/p,g=1/f,b=2*Math.ceil(m)+2,y=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const d=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-b/2);for(let m=0;m<a;m++){const x=d+m*e.strides[2],v=Math.floor(m*g),O=Math.floor(v-y/2);for(let e=0;e<i;e++){let i=0;for(let c=0;c<b;c++){const d=c+w;if(d<0||d>=o)continue;const g=r+d*t.strides[1],b=d*p;if(h===Math.min(s-1,n?Math.round(b):Math.floor(b)))for(let r=0;r<y;r++){const s=r+O;if(s<0||s>=u)continue;const o=g+s*t.strides[2],c=s*f;m===Math.min(a-1,n?Math.round(c):Math.floor(c))&&(i+=l[o+e])}}c[x+e]=i}}}}return et.rd(c,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){ho([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=this.readSync(n.dataId),c=s?this.readSync(s.dataId):new Float32Array([1]),l=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),d=l.length,p=c.length,f=u.length,m=o.length;let g=0,b=0,y=0,x=0;for(let t=0;t<i.length;++t)h[t]=l[g++]+(i[t]-o[b++])*c[y++]/Math.sqrt(u[x++]+a),g>=d&&(g=0),b>=m&&(b=0),y>=p&&(y=0),x>=f&&(x=0);return et.rd(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){ho(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let t=0;t<u;t++){const e=l(t),a=o[t]*Math.pow(n+r*e,-s);c[t]=a}return et.rd(c,t.shape)}LRNGrad(t,e,n,r,s,a,i){ho(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),d=t.size;for(let t=0;t<d;t++){const e=t%o,n=t-e+Math.max(0,e-r),d=t-e+Math.min(o,e+r+1);let p=0;for(let t=n;t<d;t++)p+=Math.pow(c[t],2);p=a*p+s;for(let e=n;e<d;e++){let n=-2*a*i*c[e]*l[t]/p;t===e&&(n+=Math.pow(p,-i)),n*=u[t],h[e]+=n}}return et.rd(h,t.shape)}multinomial(t,e,n,r){ho(t,"multinomial");const s=e?t:et.Yc(t),a=s.shape[0],i=s.shape[1],o=et.Hd([a,n],"int32"),u=this.readSync(o.dataId),c=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=c[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+c[e+t];const a=no.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();u[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){u[o+t]=n;break}}}return o}oneHot(t,e,n,r){ho(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return et.qd(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){ho(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return mo(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=et.N(t.shape,"float32"),a=et.N(t.shape,"float32"),i=et.xc(t).as2D(n,r),o=et.Eb(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),u=o.slice([t,0],[1,r]),c=et.R(n,u),l=this.readSync(this.fftImpl(c,e).dataId);for(let e=0;e<r;e++){const n=et.F.getComplexWithIndex(l,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return et.R(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=et.R(et.xc(s).div(et.Hc(r)),et.Eb(s).div(et.Hc(r)))),s}{const n=this.readSync(t.dataId),s=this.fourierTransformByMatmul(n,r,e),a=et.F.splitRealAndImagArrays(s);return et.R(a.real,a.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=et.F.complexWithEvenIndex(r);let i=et.R(a.real,a.imag).as1D();const o=et.F.complexWithOddIndex(r);let u=et.R(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),u=this.fftRadix2(u,s,n);const c=et.F.exponents(e,n),l=et.R(c.real,c.imag).mul(u),h=i.add(l),d=i.sub(l),p=et.xc(h).concat(et.xc(d)),f=et.Eb(h).concat(et.Eb(d));return et.R(p,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=et.F.exponent(s*r,e,n),u=et.F.getComplexWithIndex(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),et.F.assignToTypedArray(r,a,i,s)}return r}depthToSpace(t,e,n){et.Bd.assert("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),et.Bd.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,u=a*e,c=i/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*o*u*c);let d=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<u;++n){const u=Math.floor(n/e),p=(o*e+n%e)*c;for(let e=0;e<c;++e){const n=e+p+i*(u+a*(r+s*t));h[d++]=l[n]}}}return et.rd(h,[r,o,u,c])}broadcastedBinaryOp(t,e,n,r){const s=et.F.assertAndGetBroadcastShape(t.shape,e.shape),a=et.N(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=et.F.getBroadcastDims(t.shape,s),c=et.F.getBroadcastDims(e.shape,s),l=a.values;if(u.length+c.length===0)for(let t=0;t<l.length;++t)l[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<l.length;++h){const d=a.indexToLoc(h),p=d.slice(-t.rank);u.forEach(t=>p[t]=0);const f=n.locToIndex(p),m=d.slice(-e.rank);c.forEach(t=>m[t]=0);const g=s.locToIndex(m);l[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=et.F.assertAndGetBroadcastShape(t.shape,e.shape),s=et.N(r,"float32"),a=et.N(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=et.F.getBroadcastDims(t.shape,r),c=et.F.getBroadcastDims(e.shape,r),l=s.values,h=a.values;if(u.length+c.length===0)for(let t=0;t<l.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);l[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let d=0;d<l.length;d++){const p=s.indexToLoc(d),f=p.slice(-t.rank);u.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=p.slice(-e.rank);c.forEach(t=>g[t]=0);const b=a.locToIndex(g),y=n(i[2*m],i[2*m+1],o[2*b],o[2*b+1]);l[d]=y.real,h[d]=y.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return go(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,c]=t.shape,l=e.shape[0],[h,d]=r,p=et.N([l,h,d,c],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),b=t.strides,y=p.strides;for(let t=0;t<l;t++){const e=4*t,n=f[e],r=f[e+1],l=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(l-n)*(o-1)/(h-1):0,O=d>1?(x-r)*(u-1)/(d-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+l)*(o-1);if(i<0||i>o-1)for(let n=0;n<d;n++)for(let r=0;r<c;r++){const s=r+n*y[2]+e*y[1]+t*y[0];p.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<d;i++){const l=d>1?r*(u-1)+i*O:.5*(r+x)*(u-1);if(l<0||l>u-1){for(let n=0;n<c;n++){const r=n+i*y[2]+e*y[1]+t*y[0];p.values[r]=a}continue}const h=Math.floor(l),f=Math.ceil(l),m=l-h;for(let r=0;r<c;r++){let a=r+h*b[2]+n*b[1]+w*b[0];const u=g[a];a=r+f*b[2]+n*b[1]+w*b[0];const c=g[a];a=r+h*b[2]+s*b[1]+w*b[0];const l=g[a];a=r+f*b[2]+s*b[1]+w*b[0];const d=u+(c-u)*m,x=l+(g[a]-l)*m;a=r+i*y[2]+e*y[1]+t*y[0],p.values[a]=d+(x-d)*o}}}else for(let n=0;n<d;++n){const s=d>1?r*(u-1)+n*O:.5*(r+x)*(u-1);if(s<0||s>u-1){for(let r=0;r<c;r++){const s=r+n*y[2]+e*y[1]+t*y[0];p.values[s]=a}continue}const o=Math.round(s),l=Math.round(i);for(let r=0;r<c;r++){const s=r+o*b[2]+l*b[1]+w*b[0],a=r+n*y[2]+e*y[1]+t*y[0];p.values[a]=g[s]}}}}return p.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=et.F.calculateShapes(e,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=et.F.prepareAndValidate(t,e);if(0===a)return et.od([],s,t.dtype);const u=new et.m([a,i],t.dtype),c=this.readSync(e.dataId),l=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=c[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[e*i+t]=l[s*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=et.F.calculateShapes(e,t,n),u=et.Hc(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}fill(t,e,n){n=n||et.Bd.inferDtype(e);const r=et.Bd.getArrayFromDType(n,et.Bd.sizeFromShape(t));return r.fill(e),Object(et.mb)().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=et.Bd.getArrayFromDType(t.dtype,et.Bd.sizeFromShape(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return et.F.linspaceImpl(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,c){const l=[r/s,s],h=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return et.od([],n,e.dtype);const p=new et.m(l,e.dtype);p.values.fill(this.readSync(u.dataId)[0]);for(let t=0;t<a;t++){const a=[];let u=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),u+=n*o[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)c?p.values[u*s+n]+=d[t*s+n]:p.values[u*s+n]=0===e.rank?d[0]:d[t*s+n]}return p.toTensor().reshape(n)}}function Oo(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;ho([s,a],t);const o=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,[c,l]=e(s.shape,a.shape,o,u,s.dtype);return{dataId:i.write(c,l,s.dtype),shape:l,dtype:s.dtype}}}}function So(t){return(e,n,r,s,a)=>{const i=et.F.assertAndGetBroadcastShape(e,n),o=i.length,u=et.Bd.computeStrides(i),c=et.Bd.sizeFromShape(i),l=et.Bd.getTypedArrayFromDType(a,c),h=e.length,d=n.length,p=et.Bd.computeStrides(e),f=et.Bd.computeStrides(n),m=et.F.getBroadcastDims(e,i),g=et.F.getBroadcastDims(n,i);if(m.length+g.length===0)for(let e=0;e<l.length;++e)l[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<l.length;++e){const n=et.Bd.indexToLoc(e,o,u),a=n.slice(-h);m.forEach(t=>a[t]=0);const i=et.Bd.locToIndex(a,h,p),c=n.slice(-d);g.forEach(t=>c[t]=0);const b=et.Bd.locToIndex(c,d,f);l[e]=t(r[i],s[b])}return[l,i]}}const Co=So((t,e)=>t/e),Io=Oo(et.b,Co),No={kernelName:et.e,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s}=e,a=n;let i=r.shape;const o=i.length;let u=et.Bd.parseAxisParam(s,i);const c=et.F.getAxesPermutation(u,o);let l=a.data.get(r.dataId).values;if(null!=c){const t=new Array(o);for(let e=0;e<t.length;e++)t[e]=i[c[e]];l=lo(l,i,r.dtype,c,t),u=et.F.getInnerMostAxes(u.length,o),i=t}ho(r,"max"),et.F.assertAxesAreInnerMostDims("max",u,o);const[h,d]=et.F.computeOutAndReduceShapes(i,u),p=co(l,et.Bd.sizeFromShape(d),h,r.dtype);return{dataId:a.write(p,h,r.dtype),shape:h,dtype:r.dtype}}};const ko={kernelName:et.f,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;ho(r,"MaxPoolWithArgmax");const c=u.data.get(r.dataId).values,l=et.F.computePool2DInfo(r.shape,s,a,[1,1],i),[h,d]=function(t,e,n,r,s){const a=po(t,0,n,et.Bd.computeStrides(e),s,"max"),i=fo(t,e,n,s,!0,r);return[a.values,i.values]}(c,r.shape,r.dtype,o,l),p=u.write(h,l.outShape,r.dtype),f=u.write(d,l.outShape,r.dtype);return[{dataId:p,shape:l.outShape,dtype:r.dtype},{dataId:f,shape:l.outShape,dtype:"int32"}]}},Eo=et.Jb.nonMaxSuppressionV5,Ao={kernelName:et.h,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,c=e;ho(r,"NonMaxSuppressionWithScore");const l=c.data.get(r.dataId).values,h=c.data.get(s.dataId).values,d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:b}=Eo(l,h,d,p,f,m);return[g,b]}},To={kernelName:et.j,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;ho(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},$o=So((t,e)=>{const n=t-e;return n*n}),Ro=[Ao,To,Oo(et.k,$o),Io,{kernelName:et.n,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;ho(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];const u=lo(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(u,o,r.dtype),shape:o,dtype:r.dtype}}},ko,No];for(const t of Ro)Object(et.Ac)(t);Object(et.zc)("cpu",()=>new vo,1);const jo={},Do={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Fo(t){t in jo||(jo[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete jo[t]},!1),1===t)return e.getContext("webgl",Do)||e.getContext("experimental-webgl",Do);return e.getContext("webgl2",Do)}(t));const e=jo[t];return e.isContextLost()?(delete jo[t],Fo(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),jo[t])}var _o,Mo,Lo;function Bo(t,e){return[e,t]}function zo(t){const e=et.Bd.sizeFromShape(t),n=Math.ceil(e/4);return et.Bd.sizeToSquarishShape(n)}function Po(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Wo(t,e){const n=t;let r,s,a,i,o,u,c,l,h,d;return 2===Object(et.nb)().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,c=4,l=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,c=4,l=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:l,textureTypeHalfFloat:h,textureTypeFloat:d}}function Vo(t,e,n){const r=n();return e&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(_o||(_o={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Mo||(Mo={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Lo||(Lo={}));function Uo(t){return!!(Object(et.nb)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Go(t,e,n){return tu(t,e,()=>t.getExtension(n),'Extension "'+n+'" not supported on this browser.')}function Ho(t,e,n){const r=tu(t,e,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Vo(t,e,()=>t.shaderSource(r,n)),Vo(t,e,()=>t.compileShader(r)),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){const n=qo.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>et.Bd.rightPad((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const u=i.slice(0,r-1),c=i.slice(r-1,r),l=i.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+et.Bd.rightPad(c[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(l.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}const qo=/ERROR: [0-9]+:([0-9]+):/g;function Ko(t,e,n){if(Vo(t,e,()=>t.validateProgram(n)),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Xo(t,e,n,r,s,a,i,o){const u=t.getAttribLocation(n,r);return-1!==u&&(Vo(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),Vo(t,e,()=>t.vertexAttribPointer(u,a,t.FLOAT,!1,i,o)),Vo(t,e,()=>t.enableVertexAttribArray(u)),!0)}function Yo(t,e,n,r,s,a){Vo(t,e,()=>function(t,e,n,r){eu(t,r),Vo(t,e,()=>t.activeTexture(t.TEXTURE0+r)),Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,n))}(t,e,r,a)),Vo(t,e,()=>t.uniform1i(s,a))}function Jo(t,e,n,r){Vo(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,r)),Vo(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0))}function Zo(t,e,n){Vo(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),Vo(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function Qo(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function tu(t,e,n,r){const s=Vo(t,e,()=>n());if(null==s)throw new Error(r);return s}function eu(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function nu(t,e=2){return et.Bd.sizeFromShape(t.slice(0,t.length-e))}function ru(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function su(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[nu(t),...ru(t)]),e}function au(t){return t%2==0}function iu(t,e){if(t=t.slice(-2),e=e.slice(-2),et.Bd.arraysEqual(t,e))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(au(n)&&au(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&au(t[0])&&au(e[0])}let ou,uu;function cu(t,e){return null!=t.getExtension(e)}function lu(t){try{if(null!=Fo(t))return!0}catch(t){return!1}return!1}function hu(t){if(0===t)return!1;const e=Fo(t);if(1!==t){if(cu(e,"EXT_color_buffer_float"))return du(e);const t="EXT_color_buffer_half_float";if(cu(e,t)){const n=e.getExtension(t);return function(t,e){const n=Wo(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}if(!cu(e,"OES_texture_float"))return!1;if(!cu(e,"WEBGL_color_buffer_float"))return!1;return du(e)}function du(t){const e=Wo(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const pu=Object(et.nb)();pu.registerFlag("HAS_WEBGL",()=>pu.getNumber("WEBGL_VERSION")>0),pu.registerFlag("WEBGL_VERSION",()=>lu(2)?2:lu(1)?1:0),pu.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===pu.get("WEBGL_VERSION")),pu.registerFlag("WEBGL_CPU_FORWARD",()=>!0),pu.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),pu.registerFlag("WEBGL_PACK",()=>pu.getBool("HAS_WEBGL")),pu.registerFlag("WEBGL_PACK_NORMALIZATION",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_CLIP",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),pu.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_PACK_REDUCE",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_LAZILY_UNPACK",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_CONV_IM2COL",()=>pu.getBool("WEBGL_PACK")),pu.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==ou){const e=Fo(t);ou=e.getParameter(e.MAX_TEXTURE_SIZE)}return ou}(pu.getNumber("WEBGL_VERSION"))),pu.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==uu){const e=Fo(t);uu=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,uu)}(pu.getNumber("WEBGL_VERSION"))),pu.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=pu.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Fo(t);return e=cu(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:cu(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),pu.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>pu.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!et.gb.isMobile()),pu.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Fo(t);if(1===t){if(!cu(e,"OES_texture_float"))return!1}else if(!cu(e,"EXT_color_buffer_float"))return!1;return du(e)}(pu.getNumber("WEBGL_VERSION"))),pu.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!pu.getBool("WEBGL_FORCE_F16_TEXTURES")&&pu.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),pu.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>hu(pu.getNumber("WEBGL_VERSION"))),pu.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=pu.getNumber("WEBGL_VERSION"))&&null!=Fo(t).fenceSync;var t}),pu.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>pu.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);class fu{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class mu{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class gu{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function bu(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function yu(t,e){return 1===e?[t]:bu(t,e)}function xu(){let t,e,n,r,s,a,i,o,u,c;return 2===Object(et.nb)().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:c}}function wu(t,e,n="index"){const r=et.Bd.computeStrides(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function vu(t){const e=et.Bd.computeStrides(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const Ou="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Su}=et.F;function Cu(t,e,n,r){const s=[];t.forEach(t=>{const e=et.Bd.sizeFromShape(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?Nu(t):Iu(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Su(t.shapeInfo.logicalShape,e.logicalShape),u=Du(i),c=i-a;let l;const h=["x","y","z","w","u","v"];l=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+c]} = 0;`).join("\n");let d="";d=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+c]).join(", ");let p="return outputValue;";const f=1===et.Bd.sizeFromShape(t.shapeInfo.logicalShape),m=1===et.Bd.sizeFromShape(e.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?p="return vec4(outputValue.x);":o.indexOf(t)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${l}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===u&&null==t.shapeInfo.flatOffset&&et.Bd.arraysEqual(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=Du(u),l=Su(t.shapeInfo.logicalShape,e.logicalShape),h=u-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":u<2&&l.length>=1?"coords = 0;":l.map(t=>`coords.${p[t+h]} = 0;`).join("\n");let f="";f=u<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+p[e+h]).join(", ");return`\n    float ${s}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,u=xu(),c=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let l,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ku}\n    ${Eu}\n    ${Au}\n  `}(u);e.isPacked?(l=function(t,e){switch(t.length){case 0:return $u();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(et.Bd.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(l=function(t,e){switch(t.length){case 0:return $u();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(et.Bd.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=wu(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=wu(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=wu(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=wu(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=Tu);return[d,c,h,a,l,i,n].join("\n")}function Iu(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Ru(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${ju(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Ru(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&et.Bd.arraysEqual(e,s)){const t=s[0],e=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=et.Bd.squeezeShape(e),o=a;if(o.length<e.length){const e=Fu(t,o),n=["row","col"];return`\n      ${Iu(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${_u(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${ju(t)}\n      }\n    `;const u=s[0],c=s[1],l=Ru(n);if(1===c)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${l};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=et.Bd.squeezeShape(e),u=i;if(u.length<e.length){const e=Fu(t,u),n=["row","col","depth"];return`\n        ${Iu(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${_u(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${ju(t)}\n      }\n    `;const c=t.shapeInfo.texShape,l=c[0],h=c[1],d=t.shapeInfo.flatOffset;if(h===s&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${l}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const p=Ru(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${p};\n        vec2 uv = uvFromFlat(${l}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:u}=et.Bd.squeezeShape(e);if(o.length<e.length){const e=Fu(t,o),n=["row","col","depth","depth2"];return`\n      ${Iu(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${_u(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${ju(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,l=t.shapeInfo.texShape,h=l[0],d=l[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=Ru(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:u,keptDims:c}=et.Bd.squeezeShape(e);if(u.length<e.length){const e=Fu(t,u),n=["row","col","depth","depth2","depth3"];return`\n      ${Iu(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${_u(n,c)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${ju(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Ru(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=et.Bd.squeezeShape(e);if(s.length<e.length){const e=Fu(t,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Iu(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${_u(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,u=e[3]*o,c=e[2]*u,l=e[1]*c;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${c}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${ju(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===l&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Ru(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${c} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Nu(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=xu();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=xu();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=xu();if(null!=s&&et.Bd.arraysEqual(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=e.slice(1),s=[1,2],a=Fu(t,n),i=["b","row","col"];return`\n        ${Nu(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${_u(i,s)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(e[2]/2),c=u*Math.ceil(e[1]/2),l=xu();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${c}, ${u}, b, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],c=Math.ceil(e[n-1]/2);let l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${l} + (row / 2) * ${c} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,l*=e[n-t-1],d=`b${t} * ${l} + `+d;const p=xu();return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `}(t)}}const ku="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Eu="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Au="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Tu="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function $u(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Ru(t){return"offset"+t}function ju(t){const e=t.name,n=et.Bd.sizeFromShape(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Du(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Fu(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function _u(t,e){return e.map(e=>t[e]).join(", ")}class Mu{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,et.Bd.assert(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=Du(o),c=yu("coords",o);let l,h;if(1===a){h=o+1;const t=Du(h);l=`\n        ${t} sourceLocR = ${t}(${c.join()}, 0);\n        ++${c[o-1]};\n        ${t} sourceLocG = ${t}(${c.join()}, 0);\n        ++${c[o-2]};\n        ${t} sourceLocA = ${t}(${c.join()}, 0);\n        --${c[o-1]};\n        ${t} sourceLocB = ${t}(${c.join()}, 0);\n        --${c[o-2]};`}else h=o,l=`\n        ${u} sourceLocR = coords;\n        ++${c[o-1]};\n        ${u} sourceLocG = coords;\n        ++${c[o-2]};\n        ${u} sourceLocA = coords;\n        --${c[o-1]};\n        ${u} sourceLocB = coords;\n        --${c[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(t=>"int "+t),m=yu("sourceLocR",h-1).concat("inIdx.r"),g=yu("sourceLocG",h-1).concat("inIdx.g"),b=yu("sourceLocB",h-1).concat("inIdx.b"),y=yu("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,O=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${O}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${c[o-2]} < ${i[o-2]-1};\n        ${l}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Lu{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Bu{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=l-1-t.padInfo.front,f=h-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zu{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],et.F.assertAndGetBroadcastShape(t,e),et.F.assertAndGetBroadcastShape(t,n);let i="0.0";null!=r&&(et.F.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(et.F.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Pu{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],et.F.assertAndGetBroadcastShape(t,e),et.F.assertAndGetBroadcastShape(t,n);let i="vec4(0.0)";null!=r&&(et.F.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(et.F.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Wu="return areal * breal - aimag * bimag;",Vu="return areal * bimag + aimag * breal;";class Uu{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=et.F.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Gu="return a + b;",Hu="return a - b;",qu="return a * b;",Ku="return (a < 0.) ? b * a : a;";class Xu{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=et.F.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Yu="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Ju{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=et.F.assertAndGetBroadcastShape(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===et.Bd.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Du(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=yu("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class Zu{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Qu{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class tc{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class ec{constructor(t){this.outputShape=[],this.outputShape=et.F.computeOutShape(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class nc{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=et.F.computeOutShape(t,e);const n=this.outputShape,r=n.length,s=Du(r),a=yu("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const u=i[e],c=i.slice(-2),l=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${l}), vec2(${c.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${u} < ${o[t]}  && ${u} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${rc(i,u,e)}),\n            vec2(${rc(c,u,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${rc(i,u,p)}),\n          vec2(${rc(c,u,p)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function rc(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class sc{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ac{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ic{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oc{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uc{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cc{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lc{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,b=f?3:1;let y="",x="";n&&(y=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class hc{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dc{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${g}\n        setOutput(result);\n      }\n    `}}class pc{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=p;let m="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*l};\n          xC = xCCorner + ${n*h};\n        `,1===c){if(n<p&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=o%2==0?et.Bd.nearestLargerEven(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<p&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",b="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${y}\n        ${b}\n        setOutput(result);\n      }\n    `}}class fc{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[c]=e,[l,h]=n;this.outputShape=[c,l,h,u];const d="bilinear"===r?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,b]=l>1?[""+(i-1)/(l-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[y,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${y});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class mc{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=t[t.length-1],a=n?"<":">";this.userCode=`\n      int getIndex(int i) {\n        ${n?`return ${s} -i - 1;`:"return i;"}\n      }\n\n      void main() {\n        ${Du(r)} coords = getOutputCoords();\n        int end = ${gc(r,"coords")};\n        float val = 0.0;\n        for (int i = ${s} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${a} end) {\n            continue;\n          }\n          if (idx == end && ${e}) {\n            continue;\n          }\n          ${gc(r,"coords")} = idx;\n          val += getX(${function(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function gc(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class bc{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=_o.DENSE;const e=zo(t),n=xu();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${wu(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class yc{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=_o.DENSE;const e=zo(t),n=xu();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${wu(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class xc{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class wc{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class vc{constructor(t){this.variableNames=["A"],this.outTexUsage=Mo.DOWNLOAD;const e=xu();this.outputShape=t,this.userCode=`\n      ${Ou}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Oc{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Mo.DOWNLOAD;const e=xu();this.outputShape=t,this.userCode=`\n      ${Ou}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class Sc{constructor(t,e,n=!1){this.variableNames=["A"];const r=xu(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${vu(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Cc{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=xu(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${vu(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const Ic="return real * expR - imag * expI;",Nc="return real * expI + imag * expR;";class kc{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Ec{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Ac{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Du(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class Tc{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Du(e.length),s=Du(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function $c(t,e){const n=xu();return function(t,e,n){const r=tu(t,e,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Vo(t,e,()=>t.shaderSource(r,n)),Vo(t,e,()=>t.compileShader(r)),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}(t,e,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Rc(t,e){return function(t,e,n){const r=tu(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Vo(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Vo(t,e,()=>t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function jc(t,e){return function(t,e,n){const r=tu(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Vo(t,e,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)),Vo(t,e,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Uint16Array([0,1,2,2,1,3]))}function Dc(t,e,n,r,s,a,i){!function(t,e){const n=Object(et.nb)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(n,r);const o=function(t,e){return tu(t,e,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t,e),u=t.TEXTURE_2D;return Vo(t,e,()=>t.bindTexture(u,o)),Vo(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),Vo(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),Vo(t,e,()=>t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)),Vo(t,e,()=>t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)),Vo(t,e,()=>t.texImage2D(u,0,s,n,r,0,a,i,null)),Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,null)),o}function Fc(t,e,n,r,s,a,i,o){const u=t,c=new Float32Array(function(t,e){const[n,r]=Po(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}class _c{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=Object(et.nb)().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){jo[t]=e}(e,t)):this.gl=Fo(e);let n="WEBGL_color_buffer_float";if(1===Object(et.nb)().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Go(this.gl,this.debug,t),cu(this.gl,e))this.textureHalfFloatExtension=Go(this.gl,this.debug,e);else if(Object(et.nb)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),cu(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Go(this.gl,this.debug,"EXT_color_buffer_half_float");else if(Object(et.nb)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",cu(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!cu(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Rc(this.gl,this.debug),this.indexBuffer=jc(this.gl,this.debug),this.framebuffer=function(t,e){return tu(t,e,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl,this.debug),this.textureConfig=Wo(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(et.nb)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Vo(t,this.debug,()=>t.finish()),Vo(t,this.debug,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),Vo(t,this.debug,()=>t.deleteFramebuffer(this.framebuffer)),Vo(t,this.debug,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),Vo(t,this.debug,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),Vo(t,this.debug,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Bo(n,r);return Dc(t,e,a,i,s.internalFormatFloat,s.textureFormatFloat,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Bo(n,r);return Dc(t,e,a,i,s.internalFormatHalfFloat,s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Bo(n,r);return Dc(t,e,a,i,t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}(this.gl,this.debug,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n,r){Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),r.data instanceof Uint8Array?Vo(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)):Vo(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)),Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a,i){let o,u,c;Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),a instanceof Uint8Array?(o=new Uint8Array(r*s*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(o=new Float32Array(r*s*4),u=t.FLOAT,c=i.internalFormatPackedFloat),o.set(a),Vo(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,c,r,s,0,t.RGBA,u,o)),Vo(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Po(n,r);return Dc(t,e,a,i,s.internalFormatPackedHalfFloat,t.RGBA,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Po(n,r);return Dc(t,e,a,i,s.internalFormatPackedFloat,t.RGBA,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Zo(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Vo(this.gl,this.debug,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r,s){const[a,i]=Bo(n,r),o=new Uint8Array(n*r*4);return Vo(t,e,()=>t.readPixels(0,0,a,i,s.downloadTextureFormat,t.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}(this.gl,this.debug,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return Fc(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r,s){const a=t.createBuffer();Vo(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,a));const i=16*n*r;return Vo(t,e,()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)),Vo(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)),Vo(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),a}(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(Object(et.nb)().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const s=new Float32Array(n*r*4);return Vo(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,s)),s}(this.gl,this.debug,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=Ho(e,this.debug,t),r=$c(e,this.debug),s=function(t,e){return tu(t,e,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e,this.debug);return Vo(e,this.debug,()=>e.attachShader(s,r)),Vo(e,this.debug,()=>e.attachShader(s,n)),function(t,e,n){if(Vo(t,e,()=>t.linkProgram(n)),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(e,this.debug,s),this.debug&&Ko(e,this.debug,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n,r){return Vo(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Xo(t,e,n,"clipSpacePos",r,3,20,0)&&Xo(t,e,n,"uv",r,2,20,12)}(e,this.debug,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Vo(this.gl,this.debug,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Ko(this.gl,this.debug,this.program),Vo(this.gl,this.debug,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n,r){return tu(t,e,()=>t.getUniformLocation(n,r),'uniform "'+r+'" not present in program.')}(this.gl,this.debug,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Vo(this.gl,this.debug,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),Yo(this.gl,this.debug,this.program,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=Po(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Ko(this.gl,this.debug,this.program),Qo(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Vo(t,this.debug,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Vo(this.gl,this.debug,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Go(this.gl,this.debug,2===Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await et.Bd.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||et.Bd.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Jo(this.gl,this.debug,t,this.framebuffer),this.debug&&Qo(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Jo(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Qo(this.gl)):Zo(this.gl,this.debug,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;Jo(r,this.debug,t,this.framebuffer),this.debug&&Qo(r),this.outputTexture=t,Vo(r,this.debug,()=>r.viewport(0,0,e,n)),Vo(r,this.debug,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),Vo(this.gl,this.debug,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Mc(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!et.Bd.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!et.Bd.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class Lc{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:c,dilationHeight:l,dataFormat:h}=n,{left:d,top:p}=o,f=s*r,m=xu(),g="channelsLast"===h,b=g?0:1,y=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${p};\n            d0 = offsetY + ${l} * (pos / ${f});\n\n            if(d0 < ${e[b]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${c} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[y]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class Bc{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class zc{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Pc{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class Wc{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vc{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=o-1-t.padInfo.front,h=u-1-t.padInfo.top,d=c-1-t.padInfo.left,p=o*u*c-1;this.userCode=`\n      const ivec3 pads = ivec3(${l}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uc{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],u=Math.ceil(o/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";a&&(p=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${c});\n          vec4 b = getMatrixB(rc.x, ${l});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Gc{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Hc{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class qc{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=yu("rc",e),r=Du(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class Kc{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Du(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Xc{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Du(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=yu("rc",r),u=yu("source",r),c=`${o[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${c}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let t=0,e=1===r?2:4;t<e;t++)p+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${l});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class Yc{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let b="0.0";if(f||(b="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${l};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(y="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${l};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${y});\n      }\n    `}}class Jc{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;const y="avg"===e;let x="0.0";if(y||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${l}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),O=a%4,S=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${b});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===O}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Zc{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(n/4),l=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class Qc{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${wu(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${vu(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class tl{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],c=o[0]/u[0],l=o[1]/u[1],h=1/c,d=1/l,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class el{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class nl{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class rl{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],c=o[0]/u[0],l=o[1]/u[1],h=1/c,d=1/l,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class sl{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${l})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class al{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Du(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class il{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=yu("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Du(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class ol{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Du(s.length),u=Du(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const l=`getIndices(${c})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${l});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class ul{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ";let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}class cl{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Du(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class ll{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Du(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return hl.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${hl[e]} = start[${e}] + coords.${hl[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const hl=["x","y","z","w","u","v"];class dl{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Du(this.rank),n=yu("coords",this.rank),r=yu("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class pl{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Du(n.length),a=Du(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class fl{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=ml(e,n),s=gl(t,r,n);if(s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]),this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let a;return this.numUsedTextures++,this.log(),r===Lo.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===Lo.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===Lo.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===Lo.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===Lo.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),a}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=gl(e,ml(n,r),r);s in this.freeTextures||(this.freeTextures[s]=[]),this.freeTextures[s].push(t),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures[s],i=a.indexOf(t);if(i<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(i,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`)}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}}}function ml(t,e){if(t===Mo.UPLOAD)return Lo.PACKED_2X2_FLOAT32;if(t===Mo.RENDER||null==t)return function(t){return Object(et.nb)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Lo.PACKED_2X2_FLOAT32:Lo.UNPACKED_FLOAT32:t?Lo.PACKED_2X2_FLOAT16:Lo.UNPACKED_FLOAT16}(e);if(t===Mo.DOWNLOAD||t===Mo.PIXELS)return Lo.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function gl(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class bl{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Du(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class yl{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const xl="return abs(x);",wl="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",vl="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Ol=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${et.F.SELU_SCALEALPHA};\n  float scale = ${et.F.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Sl="return -x;",Cl="return ceil(x);",Il="return floor(x);",Nl="return exp(x);",kl="return exp(x) - 1.0;",El=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${et.F.ERF_P};\n  float a1 = ${et.F.ERF_A1};\n  float a2 = ${et.F.ERF_A2};\n  float a3 = ${et.F.ERF_A3};\n  float a4 = ${et.F.ERF_A4};\n  float a5 = ${et.F.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,Al="return x;",Tl="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",$l="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Rl="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class jl{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Dl{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=yu("rc",e),r=Du(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:Fl}=et.F,_l=et.Jb.split,Ml=et.Jb.tile,Ll=et.Jb.topkImpl,Bl=et.Jb.whereImpl,zl={};function Pl(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?Tl:wl;if("elu"===t)return e?Rl:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===t)return e?$l:vl;if("prelu"===t)return e?Yu:Ku;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class Wl extends et.d{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Object(et.nb)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Fo(Object(et.nb)().getNumber("WEBGL_VERSION"));this.binaryCache=((e=Object(et.nb)().getNumber("WEBGL_VERSION"))in zl||(zl[e]={}),zl[e]),this.gpgpu=new _c(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new fl(this.gpgpu),this.numMBBeforeWarning=null==Object(et.nb)().global.screen?1024:Object(et.nb)().global.screen.height*Object(et.nb)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new et.a(this,Object(et.mb)())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if(Object(et.nb)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:Mo.UPLOAD}),r}move(t,e,n,r){if(Object(et.nb)().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:Mo.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new jl(i,Al):new yl(i,Al);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let c,l;if(u&&(c=et.Bd.now()),"complex64"===r){const t=s.real.dataSync(),e=s.imag.dataSync();l=et.F.mergeRealAndImagArrays(t,e)}else l=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=et.Bd.now()-c),this.convertAndCacheOnCPU(t,l)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:a,complexTensors:i,isPacked:o}=e;if(null!=s){let e;e=o?new jl(r,Al):new yl(r,Al);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!Object(et.nb)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(et.nb)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,l=null;if("complex64"!==a&&Object(et.nb)().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);l=this.gpgpu.createBufferFromTexture(e.texture,...zo(r))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([i.real.data(),i.imag.data()]),e=t[0],n=t[1];c=et.F.mergeRealAndImagArrays(e,n)}else if(null==l)c=this.getValuesFromTexture(t);else{const t=et.Bd.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(l,t)}null!=u&&this.disposeData(u.dataId);const h=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(h)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!Uo(n)){if(Object(et.nb)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=et.Bd.sizeFromShape(e);if(Object(et.nb)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...zo(e)).subarray(0,s);return this.disposeData(n.dataId),a}const a=Object(et.nb)().getBool("WEBGL_PACK")&&!0===r,i=a?su(e):e,o=a?new Oc(i):new vc(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),c=this.texData.get(u.dataId),l=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeData(u.dataId),l}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=et.Bd.flatten(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),a=et.Bd.flatten(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);i.kernelMs=et.Bd.sum(t),i.getExtraProfileInfo=()=>t.map((t,e)=>({name:a[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}}startTimer(){return Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:et.Bd.now(),endMs:null}}endTimer(t){return Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=et.Bd.now(),t)}async getQueryTime(t){if(Object(et.nb)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return Object(et.nb)().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Object(et.mb)().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){return null!=this.getCPUBackend()&&t.every(t=>null==this.texData.get(t.dataId).texture&&et.Bd.sizeFromShape(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Object(et.mb)().keep(t.clone()),imag:Object(et.mb)().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===et.Bd.sizeFromShape(n))return Object(et.od)([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=et.Xc.isSliceContinous(t.shape,e,n);if(r||!s){const r=Object(et.nb)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new dl(n):new ll(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=et.Xc.computeFlatOffset(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=et.Xc.computeOutShape(e,n,r);if(s.some(t=>0===t))return Object(et.od)([],s);const a=new pl(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new il(t.shape,e):new al(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Object(et.xc)(t)),r=t.map(t=>Object(et.Eb)(t));return Object(et.R)(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>Object(et.nb)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(Object(et.nb)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new nc(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=et.F.computeOutShape(t.map(t=>t.shape),e),r=t.map(t=>t.as2D(-1,et.Bd.sizeFromShape(t.shape.slice(e)))),s=new ec(r.map(t=>t.shape));return this.compileAndRun(s,r).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Sl,t.dtype);const e=new yl(t.shape,Sl);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Object(et.xd)(t,[0,2,1])),r&&(e=Object(et.xd)(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,c=1===a?e.as3D(o,1,i):e;return this.multiply(s,c).sum(u,!0)}const u=Object(et.Ad)(t.dtype,e.dtype),c=new Uc(t.shape,[o,s,a],n,r);return this.compileAndRun(c,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],[c,,]=t.shape,l=Object(et.Ad)(t.dtype,e.dtype),h=null!=s,d=null!=i,p=a?Pl(a,!0):null,f=new Uc(t.shape,[c,o,u],n,r,h,p,d),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,l)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new Uu(Wu,t.shape,e.shape),a=new Uu(Vu,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),u=this.compileAndRun(a,i),c=this.complex(o,u);return o.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,qu,t.dtype);const n=new Xu(qu,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNorm(t,e,n,r,s,a){const i=[t,e,n];let o=null;null!=r&&(o=r.shape,i.push(r));let u=null;if(null!=s&&(u=s.shape,i.push(s)),Object(et.nb)().getBool("WEBGL_PACK_NORMALIZATION")){const r=new Pu(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(r,i)}const c=new zu(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(c,i)}localResponseNormalization4D(t,e,n,r,s){const a=Object(et.nb)().getBool("WEBGL_PACK_NORMALIZATION")?new Pc(t.shape,e,n,r,s):new Bc(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new zc(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>et.Bd.decodeString(t)),r=Object(et.N)(t.shape,t.dtype,n);return Ml(r,e)}const n=new bl(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=Object(et.nb)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Xc(t.shape,e,n):new Kc(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Ac(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){et.Bd.assert(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=et.F.getReshaped(t.shape,e,r),a=et.F.getPermuted(s.length,e.length),i=et.F.getReshapedPermuted(t.shape,e,r),o=et.F.getSliceBeginCoords(n,e.length),u=et.F.getSliceSize(i,n,e.length);return Object(et.xd)(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){et.Bd.assert(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=et.F.getReshaped(a.shape,e,r,!1),o=et.F.getPermuted(i.length,e.length,!1),u=et.F.getReshapedPermuted(a.shape,e,r,!1);return Object(et.xd)(a.reshape(i),o).reshape(u)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=et.F.computeOptimalWindowSize(s),i=new Zc({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=et.F.computeOptimalWindowSize(s),i=new gu({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const u=this.compileAndRun(i,o,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=r[r.length-1],a=et.F.computeOptimalWindowSize(s),i=new Mu(r,a,e,null==n),o=null==n?[t]:[t,n],u=this.compileAndRun(i,o,"int32");return u.rank===t.rank?this.argReducePacked(t,e,u):u}sum(t,e){et.F.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Bd.sizeFromShape(r),a=t.as2D(-1,s),i=et.ld(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Bd.sizeFromShape(r),a=t.as2D(-1,s),i=et.ld(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=et.F.getAxesPermutation([r],t.rank);let a=t;null!=s&&(a=Object(et.xd)(t,s),r=et.F.getInnerMostAxes(1,t.rank)[0]);const i=Fl.computeOutShape(a.shape,r,n),o=et.Bd.sizeFromShape([a.shape[r]]),u=a.as2D(-1,o),c=et.ld(t.dtype);let l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(i);return null!=s&&(l=Object(et.xd)(l,et.F.getUndoAxesPermutation(s))),l}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=Fl.segOpComputeOptimalWindowSize(i,s),u=new ul({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===s?c:(n=Object(et.wc)(0,s).tile([i/o]),this.segOpCompute(c,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(et.F.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!Object(et.nb)().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=et.F.computeOutAndReduceShapes(t.shape,r),a=et.Bd.sizeFromShape(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=new mc(t.shape,n,r);return this.compileAndRun(s,[t])}equal(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Xu("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Xu("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Xu("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Xu("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Xu("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Xu("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new yl(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Xu("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Xu("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new cl(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Object(et.Ad)(e.dtype,n.dtype))}where(t){et.F.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return Bl(t.shape,e)}topk(t,e,n){const r=t.dataSync();return Ll(r,t.shape,t.dtype,e,n)}min(t,e){et.F.assertAxesAreInnerMostDims("min",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Bd.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Xu("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Xu("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Xu("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){et.F.assertAxesAreInnerMostDims("all",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Bd.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){et.F.assertAxesAreInnerMostDims("any",e,t.rank);const[n,r]=et.F.computeOutAndReduceShapes(t.shape,e),s=et.Bd.sizeFromShape(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new Xu("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Gu);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=Object(et.Ad)(t.dtype,e.dtype);if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Gu,n);const r=new Xu(Gu,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new jl(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new Ju(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),u=new Xu(n,t.shape,e.shape);return this.compileAndRun(u,[i,o],Object(et.Ad)(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>Object(et.nb)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>Object(et.Ad)(t,e)),n=t.map(t=>t.shape),r=Object(et.nb)().getBool("WEBGL_PACK")?new mu(t[0].shape,n):new fu(t[0].shape,n);return this.compileAndRun(r,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Hu);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=Object(et.Ad)(t.dtype,e.dtype);if(Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Hu,t.dtype);const r=new Xu(Hu,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}pow(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Xu("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Object(et.Ad)(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Cl,t.dtype);const e=new yl(t.shape,Cl);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Il,t.dtype);const e=new yl(t.shape,Il);return this.compileAndRun(e,[t])}sign(t){const e=new yl(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new yl(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new yl(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new yl(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new yl(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Nl,t.dtype);const e=new yl(t.shape,Nl);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,kl,t.dtype);const e=new yl(t.shape,kl);return this.compileAndRun(e,[t])}softmax(t,e){const n=et.Bd.parseAxisParam([e],t.shape),r=Object(et.Xb)(t,n),s=et.F.expandShapeToKeepDim(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return Object(et.ib)(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new yl(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new yl(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new yl(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new yl(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new yl(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=Object(et.nb)().getBool("WEBGL_PACK")?new jl(t.shape,Tl):new yl(t.shape,wl),this.compileAndRun(e,[t])}relu6(t){let e;return e=Object(et.nb)().getBool("WEBGL_PACK")?new jl(t.shape,$l):new yl(t.shape,vl),this.compileAndRun(e,[t])}prelu(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju(Yu,t.shape,e.shape):new Xu(Ku,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Rl,t.dtype);const e=new yl(t.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(e,[t])}eluDer(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Xu("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new yl(t.shape,Ol);return this.compileAndRun(e,[t])}int(t){const e=new yl(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let r;r=Object(et.nb)().getBool("WEBGL_PACK_CLIP")?new Qu(t.shape):new Zu(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(Object(et.nb)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,xl,t.dtype);const e=new yl(t.shape,xl);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new tc(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new yl(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new yl(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new yl(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Xu("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new yl(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new yl(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new yl(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new yl(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new yl(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new yl(t.shape,El);return this.compileAndRun(e,[t])}step(t,e){const n=new yl(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,a){const i=t.shape,o=this.texData.get(t.dataId),u=n.inChannels,c=i[0]*i[1]*i[2],l=n.outChannels,h="channelsLast"===n.dataFormat,d=(1===c||1===l)&&u>1e3,p=i[2]%2!=0&&!!o.isPacked;if(d||!Object(et.nb)().getBool("WEBGL_LAZILY_UNPACK")||!Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){const o=h?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=this.reshape(t,[1,o,n.inChannels]),c=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:c,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),n.outShape)}const f=h?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:t.dataId,shape:[1,f,n.inChannels],dtype:t.dtype},g=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,et.Bd.assert(iu(o.shape,m.shape),()=>`packed reshape ${o.shape} to ${m.shape} isn't free`);const b=this.reshape(e,[1,n.inChannels,n.outChannels]),y=this.fusedBatchMatMul({a:m,b:b,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),x=this.texData.get(y.dataId);return et.Bd.assert(x.isPacked,()=>"batchMatMul result is expected to be packed"),o.shape=g,x.shape=n.outShape,Object(et.mb)().makeTensorFromDataId(y.dataId,n.outShape,y.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:c,outHeight:l,dataFormat:h}=n,d="channelsLast"===h,p=i*o*u,f=l*c,m=[p,f],g=t.squeeze([0]),b=e.reshape([1,p,-1]),y=new Lc(m,g.shape,n),x=this.compileAndRun(y,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,O=s?Pl(s,!0):null,S=new Uc(x.shape,[1,f,n.outChannels],!0,!1,w,O,v),C=[x,b];r&&C.push(r),v&&C.push(a);const I=this.compileAndRun(S,C);return d?I.reshape([1,l,c,n.outChannels]):I.reshape([1,n.outChannels,l,c])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(Object(et.nb)().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,u=s?Pl(s,!1):null,c=new lc(n,i,u,o),l=[t,e];return r&&l.push(r),a&&l.push(a),this.compileAndRun(c,l)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(Object(et.nb)().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new lc(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new ac(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new sc(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=Object(et.nb)().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?Pl(s,i):null,u=[t,e],c=null!=r,l=null!=a;let h;return c&&u.push(r),l&&u.push(a),i?(h=new pc(n,c,o,l),this.compileAndRun(h,u)):(h=new dc(n,c,o,l),this.compileAndRun(h,u))}depthwiseConv2D(t,e,n){let r;return Object(et.nb)().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new pc(n),this.compileAndRun(r,[t,e])):(r=new dc(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new cc(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new uc(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new hc(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new oc(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new ic(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new Yc(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new Yc(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new Yc(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Wc(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new Lu(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return et.F.castTensor(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new Jc(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new Bu(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Jc(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new Jc(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Vc(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!iu(t.shape,e)&&(null===n.texture||!iu(n.shape,e))){const n=this.packedReshape(t,e);return Object(et.mb)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return et.F.reshapeTensor(t,e)}resizeBilinear(t,e,n,r){const s=Object(et.nb)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new nl(t.shape,e,n,r):new el(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new tl(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new sl(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new rl(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Object(et.Yc)(t),a=s.shape[0],i=s.shape[1],o=new Gc(a,i,n),u=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",u)}oneHot(t,e,n,r){const s=new Hc(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new wc(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new fc(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){et.Bd.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,u=a*e,c=i/(e*e),l=new xc("NHWC"===n?[r,o,u,c]:[r,c,o,u],e,n);return this.compileAndRun(l,[t])}split(t,e,n){return _l(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=et.F.calculateShapes(e,t,n),u=[o/a,a],c=t.reshape([s,r]),l=e.reshape([s,a]);if(0===o)return et.F.reshapeTensor(Object(et.od)([]),n);const h=Object(et.Hc)(0),d=new ol(s,r,c.rank,l.rank,i,u);return this.compileAndRun(d,[l,c,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=et.F.calculateShapes(e,t,n),u=new ol(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new kc(Ic,t.shape,e),s=new kc(Nc,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),u=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),u}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=et.F.prepareAndValidate(t,e),u=e.reshape([a,r]),c=t.reshape([t.size/i,i]),l=new Tc(r,o,[a,i]);return this.compileAndRun(l,[c,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||et.Bd.inferDtype(e))){const r=et.Bd.getArrayFromDType(n,et.Bd.sizeFromShape(t));return r.fill(e),Object(et.mb)().makeTensor(r,t,n,this)}{const r=new Ec(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return et.F.linspaceImpl(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return Object(et.mb)().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new Dl(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new qc(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[nu(t.shape),...ru(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[nu(e),...ru(e)],a=new Qc(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=su(r);let i;i=n?new yc(a):new bc(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===_o.DENSE){const e=zo(t.outputShape);i.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===et.Bd.sizeFromShape(a.shape))return i.values=et.Bd.getTypedArrayFromDType(a.dtype,0),a;const o=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&et.Bd.sizeFromShape(e.shape)<=Object(et.nb)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!iu(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const c={shape:a.shape,texData:i,isUniform:!1},l=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,c),h=this.getAndSaveBinary(l,()=>function(t,e,n,r){const s=e.userCode,a=n.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),i=a.map(t=>t.shapeInfo),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Cu(a,o,s,e.packedInputs),c=t.createProgram(u);let l=null;const h=t.getUniformLocation(c,"NAN",!1);1===Object(et.nb)().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:i,outShapeInfo:o,infLoc:l,nanLoc:h}}(this.gpgpu,t,u,c)),d=null!=this.activeTimers;let p;if(d&&(p=this.startTimer()),function(t,e,n,r,s){Mc(e.inShapeInfos,n),Mc([e.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===Object(et.nb)().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(et.Bd.sizeFromShape(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,u,c,r),o.forEach(t=>this.disposeData(t.dataId)),d&&(p=this.endTimer(p),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(p)})),!Object(et.nb)().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(a);return this.disposeData(a.dataId),t}return a}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return Object(et.mb)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(et.nb)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(et.td)(()=>{if(!Object(et.nb)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=Object(et.nb)().getBool("DEBUG");Object(et.nb)().set("DEBUG",!1);const e=this.abs(Object(et.Hc)(1e-8)).dataSync()[0];if(Object(et.nb)().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const u=null!=this.activeTimers;let c;u&&(c=et.Bd.now());let l=e.texShape;if(null==l&&(l=function(t,e=!1){let n=Object(et.nb)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?et.Bd.nearestLargerEven(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=et.Bd.squeezeShape(t);t=e.newShape}let r=et.Bd.sizeFromShape(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=nu(t);let n=2,s=2;return t.length&&([n,s]=ru(t)),r=e*(n/2)*(s/2),et.Bd.sizeToSquarishShape(r).map(t=>2*t)}return et.Bd.sizeToSquarishShape(r)}(n,o),e.texShape=l),null!=s){const t=su(n);let a,i=l[1],h=l[0];const d=s instanceof Uint8Array;o?([i,h]=Po(l[0],l[1]),a=new Cc(t,[h,i],d)):a=new Sc(t,[h,i],d);const p=this.makeTensorInfo([h,i],r);this.texData.get(p.dataId).usage=d?Mo.PIXELS:Mo.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),i,h,s);const f=!0,m=this.runWebGLProgram(a,[p],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(p.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=et.Bd.now()-c)}else{const t=this.acquireTexture(l,i,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*et.Bd.bytesPerElement(e)}}const Vl={kernelName:et.b,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t;return function(t,e,n){let r=new Xu("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new Ju("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(n,r,e)}};class Ul{constructor(t){this.variableNames=["A"];const e=xu(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Gl{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=xu(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const Hl={kernelName:et.c,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],l=[c,u],h=[c,u,a];(o||i)&&(null==ql&&(ql=document.createElement("canvas").getContext("2d")),ql.canvas.width=u,ql.canvas.height=c,ql.drawImage(s,0,0,u,c),s=ql.canvas);const d=n.makeTensorInfo(l,"int32");n.texData.get(d.dataId).usage=Mo.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=Object(et.nb)().getBool("WEBGL_PACK")?new Gl(h):new Ul(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let ql;const{maxImpl:Kl,transposeImpl:Xl}=s;function Yl(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||iu(t.shape,e)||null!==r.texture&&iu(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[nu(t.shape),...ru(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[nu(e),...ru(e)],i=new Qc(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}function Jl(t,e,n,r){const s=et.Bd.sizeFromShape(e),a=Yl(t,[et.Bd.sizeFromShape(t.shape)/s,s],r),i=function t(e,n,r,s){const[a,i]=e.shape,o=et.F.computeOptimalWindowSize(i),u=new Zc({windowSize:o,inSize:i,batchSize:a},r),c=s.runWebGLProgram(u,[e],n);return 1===c.shape[1]?c:t(c,n,r,s)}(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),Yl(i,n,r)}class Zl{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Du(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class Ql{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Du(this.rank),s=bu("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function th(t,e,n){const r=Object(et.nb)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ql(t.shape,e):new Zl(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const eh={kernelName:et.e,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s}=e,a=n,i=r.shape.length;let o=et.Bd.parseAxisParam(s,r.shape);const u=et.F.getAxesPermutation(o,i),c=null!=u,l=a.shouldExecuteOnCPU([r]);let h=r;if(c){if(l){const t=a.texData.get(h.dataId).values,e=new Array(i);for(let t=0;t<e.length;t++)e[t]=r.shape[u[t]];const n=Xl(t,r.shape,r.dtype,u,e);h=a.makeTensorInfo(e,r.dtype);a.texData.get(h.dataId).values=n}else h=th(r,u,a);o=et.F.getInnerMostAxes(o.length,i)}et.F.assertAxesAreInnerMostDims("max",o,i);const[d,p]=et.F.computeOutAndReduceShapes(h.shape,o);let f;if(l){const t=a.texData.get(h.dataId).values,e=Kl(t,et.Bd.sizeFromShape(p),d,r.dtype);f=a.makeTensorInfo(d,r.dtype);a.texData.get(f.dataId).values=e}else f=Jl(h,p,d,a);return c&&a.disposeData(h.dataId),f}};const nh={kernelName:et.f,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;et.Bd.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const c=[1,1];et.Bd.assert(et.F.eitherStridesOrDilationsAreOne(a,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const l=et.F.computePool2DInfo(r.shape,s,a,c,i),[h,d]=function(t,e,n,r){let s=new Yc(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new Yc(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,l,u);return[h,d]}},rh={kernelName:et.g,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{et.F.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e,c=u.readSync(r.dataId),l=u.readSync(s.dataId),h=a,d=i,p=o;return et.Jb.nonMaxSuppressionV3(c,l,h,d,p)}},sh=et.Jb.nonMaxSuppressionV5,ah=[eh,Hl,Vl,rh,{kernelName:et.h,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{et.F.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,c=e,l=c.readSync(r.dataId),h=c.readSync(s.dataId),d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:b}=sh(l,h,d,p,f,m);return[g,b]}},{kernelName:et.j,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new yl(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:et.k,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t,s=e,a=Object(et.nb)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ju("return (a - b) * (a - b);",n.shape,r.shape):new Xu("return (a - b) * (a - b);",n.shape,r.shape);return s.compileAndRun(a,[n,r])}},{kernelName:et.n,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let u;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=Xl(t,r.shape,r.dtype,s,o);u=a.makeTensorInfo(o,r.dtype);a.texData.get(u.dataId).values=e}else u=th(r,s,a);return u}},nh];for(const t of ah)Object(et.Ac)(t);et.gb.isBrowser()&&Object(et.zc)("webgl",()=>new Wl,2);et.Ed;const ih=async(t,e,n)=>{const r=document.createElement("a");r.style.display="none",document.body.appendChild(r);const s=new Blob([t],{type:n});r.href=URL.createObjectURL(s),r.download=e,r.click()};function oh(t,e){return e&&t.then(t=>(e(void 0,t),t)).catch(t=>(e(t),t)),t}function uh(t,e=null){return et.td(()=>{let n=et.M.fromPixels(t);e&&(n=et.Fb.resizeBilinear(n,e));return(t=>{const e=Math.min(t.shape[0],t.shape[1]),n=t.shape[0]/2-e/2,r=t.shape[1]/2-e/2;return t.slice([n,r,0],[e,e,3])})(n).expandDims(0).toFloat().div(et.Hc(127)).sub(et.Hc(1))})}class ch{constructor(t,e){this.videoElt=null,this.size=e,this.videoReady=!1,t instanceof HTMLVideoElement?this.videoElt=t:null!==t&&"object"==typeof t&&t.elt instanceof HTMLVideoElement&&(this.videoElt=t.elt)}async loadVideo(){let t;return new Promise(e=>{this.video=document.createElement("video");const n=navigator.userAgent;t=n.indexOf("Firefox")>-1?this.videoElt.mozCaptureStream():this.videoElt.captureStream(),this.video.srcObject=t,this.video.width=this.size,this.video.height=this.size,this.video.autoplay=!0,this.video.playsinline=!0,this.video.muted=!0;const r=this.video.play();void 0!==r&&r.then(()=>{e(this.video)})})}}const lh=1,hh=.25,dh=1e-4,ph=100,fh=20,mh=2,gh=.4,bh="conv_pw_13_relu",yh={1:{.25:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",.5:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",.75:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",1:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1"},2:{.5:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",.75:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",1:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2"}},xh={1:"module_apply_default/MobilenetV1/Logits/global_pool",2:"module_apply_default/MobilenetV2/Logits/AvgPool"};var wh=class{constructor(t,e){this.mobilenet=null,this.topKPredictions=10,this.hasAnyTrainedClass=!1,this.customModel=null,this.jointModel=null,this.config={epochs:t.epochs||fh,version:t.version||lh,hiddenUnits:t.hiddenUnits||ph,numLabels:t.numLabels||mh,learningRate:t.learningRate||dh,batchSize:t.batchSize||gh,layer:t.layer||bh,alpha:t.alpha||hh},this.model=null,this.url=yh[this.config.version][this.config.alpha],this.normalizationOffset=et.Hc(127.5),this.mobilenetURL=t.mobilenetURL||`https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v${this.config.version}_${this.config.alpha}_224/model.json`,this.graphModelURL=t.graphModelURL||this.url,this.isPredicting=!1,this.mapStringToIndex=[],this.usageType=null,this.ready=oh(this.loadModel(),e)}async loadModel(){this.mobilenet=await Ir(this.mobilenetURL),this.graphModelURL.includes("https://tfhub.dev/")?this.model=await eo(this.graphModelURL,{fromTFHub:!0}):this.model=await eo(this.graphModelURL,{fromTFHub:!1});const t=this.mobilenet.getLayer(this.config.layer);var e;return this.mobilenetFeatures=await(e={inputs:this.mobilenet.inputs,outputs:t.output},new vr(e)),this.video&&await this.mobilenetFeatures.predict(uh(this.video)),this}classification(t,e=null,n){let r;return this.usageType="classifier","object"==typeof e?Object.assign(this.config,e):"function"==typeof e&&(r=e),"function"==typeof n&&(r=n),t&&oh(this.loadVideo(t),r),this}regression(t,e){return this.usageType="regressor",t&&oh(this.loadVideo(t),e),this}async loadVideo(t){let e=null;if(t instanceof HTMLVideoElement?e=t:"object"==typeof t&&t.elt instanceof HTMLVideoElement&&(e=t.elt),e){const t=new ch(e,224);this.video=await t.loadVideo()}return this}async addImage(t,e,n){let r,s,a=n;return t instanceof HTMLImageElement||t instanceof HTMLVideoElement||t instanceof HTMLCanvasElement||t.elt instanceof ImageData?r=t:"object"==typeof t&&(t.elt instanceof HTMLImageElement||t.elt instanceof HTMLVideoElement||t.elt instanceof HTMLCanvasElement||t.elt instanceof ImageData)?r=t.elt:"string"!=typeof t&&"number"!=typeof t||(r=this.video,s=t),"string"==typeof e||"number"==typeof e?s=e:"function"==typeof e&&(a=e),"string"==typeof s&&(s=this.mapStringToIndex.includes(s)?this.mapStringToIndex.indexOf(s):this.mapStringToIndex.push(s)-1),oh(this.addImageInternal(r,s),a)}async addImageInternal(t,e){return await this.ready,et.td(()=>{const n=t===this.video?null:[224,224],r=uh(t,n),s=this.mobilenetFeatures.predict(r);let a;if("classifier"===this.usageType?a=et.td(()=>et.nc(et.pd([e],"int32"),this.config.numLabels)):"regressor"===this.usageType&&(a=et.qd([[e]])),null==this.xs)this.xs=et.Ib(s),this.ys=et.Ib(a),this.hasAnyTrainedClass=!0;else{const t=this.xs;this.xs=et.Ib(t.concat(s,0));const e=this.ys;this.ys=et.Ib(e.concat(a,0)),t.dispose(),e.dispose(),a.dispose()}}),this}async train(t){if(!this.hasAnyTrainedClass)throw new Error("Add some examples before training!");this.isPredicting=!1,"classifier"===this.usageType?(this.loss="categoricalCrossentropy",this.customModel=Cr({layers:[r.flatten({inputShape:[7,7,256]}),r.dense({units:this.config.hiddenUnits,activation:"relu",kernelInitializer:"varianceScaling",useBias:!0}),r.dense({units:this.config.numLabels,kernelInitializer:"varianceScaling",useBias:!1,activation:"softmax"})]})):"regressor"===this.usageType&&(this.loss="meanSquaredError",this.customModel=Cr({layers:[r.flatten({inputShape:[7,7,256]}),r.dense({units:this.config.hiddenUnits,activation:"relu",kernelInitializer:"varianceScaling",useBias:!0}),r.dense({units:1,useBias:!1,kernelInitializer:"Zeros",activation:"linear"})]})),this.jointModel=Cr(),this.jointModel.add(this.mobilenetFeatures),this.jointModel.add(this.customModel);const e=et.wd.adam(this.config.learningRate);this.customModel.compile({optimizer:e,loss:this.loss});const n=Math.floor(this.xs.shape[0]*this.config.batchSize);if(!(n>0))throw new Error("Batch size is 0 or NaN. Please choose a non-zero fraction.");return this.customModel.fit(this.xs,this.ys,{batchSize:n,epochs:this.config.epochs,callbacks:{onBatchEnd:async(e,n)=>{t(n.loss.toFixed(5)),await et.lc()},onTrainEnd:()=>t(null)}})}async classify(t,e){let n,r;return t instanceof HTMLImageElement||t instanceof HTMLVideoElement||t instanceof HTMLCanvasElement||t instanceof ImageData?n=t:"object"==typeof t&&(t.elt instanceof HTMLImageElement||t.elt instanceof HTMLVideoElement||t.elt instanceof HTMLCanvasElement||t.elt instanceof ImageData)?n=t.elt:"function"==typeof t&&(n=this.video,r=t),"function"==typeof e&&(r=e),oh(this.classifyInternal(n),r)}async classifyInternal(t){if("classifier"!==this.usageType)throw new Error("Mobilenet Feature Extraction has not been set to be a classifier.");await et.lc(),this.isPredicting=!0;const e=et.td(()=>{const e=t===this.video?null:[224,224],n=uh(t,e),r=this.jointModel.predict(n);return Array.from(r.as1D().dataSync())});return await e.map((t,e)=>({label:this.mapStringToIndex.length>0&&this.mapStringToIndex[e]?this.mapStringToIndex[e]:e,confidence:t})).sort((t,e)=>e.confidence-t.confidence)}async predict(t,e){let n,r;return t instanceof HTMLImageElement||t instanceof HTMLVideoElement||t instanceof HTMLCanvasElement||t instanceof ImageData?n=t:"object"==typeof t&&(t.elt instanceof HTMLImageElement||t.elt instanceof HTMLVideoElement||t.elt instanceof HTMLCanvasElement||t.elt instanceof ImageData)?n=t.elt:"function"==typeof t&&(n=this.video,r=t),"function"==typeof e&&(r=e),oh(this.predictInternal(n),r)}async predictInternal(t){if("regressor"!==this.usageType)throw new Error("Mobilenet Feature Extraction has not been set to be a regressor.");await et.lc(),this.isPredicting=!0;const e=et.td(()=>{const e=t===this.video?null:[224,224],n=uh(t,e);return this.jointModel.predict(n).as1D()}),n=await e.data();return e.dispose(),{value:n[0]}}async load(t=null,e){if("string"!=typeof t){let e=null,n=null;Array.from(t).forEach(t=>{if(t.name.includes(".json")){e=t;const n=new FileReader;n.onload=t=>{JSON.parse(t.target.result).ml5Specs&&(this.mapStringToIndex=JSON.parse(t.target.result).ml5Specs.mapStringToIndex)},n.readAsText(t)}else t.name.includes(".bin")&&(n=t)}),this.jointModel=await Ir(et.Gb.browserFiles([e,n]))}else fetch(t).then(t=>t.json()).then(t=>{t.ml5Specs&&(this.mapStringToIndex=t.ml5Specs.mapStringToIndex)}),this.jointModel=await Ir(t),e&&e();return this.jointModel}async save(t,e){if(!this.jointModel)throw new Error("No model found.");this.jointModel.save(et.Gb.withSaveHandler(async n=>{let r="model";e&&(r=e),this.weightsManifest={modelTopology:n.modelTopology,weightsManifest:[{paths:[`./${r}.weights.bin`],weights:n.weightSpecs}],ml5Specs:{mapStringToIndex:this.mapStringToIndex}},await ih(n.weightData,r+".weights.bin","application/octet-stream"),await ih(JSON.stringify(this.weightsManifest),r+".json","text/plain"),t&&t()}))}mobilenetInfer(t,e=!1){let n=t;return n instanceof et.l||n instanceof ImageData||n instanceof HTMLImageElement||n instanceof HTMLCanvasElement||n instanceof HTMLVideoElement?et.td(()=>{n instanceof et.l||(n=et.M.fromPixels(n));const t=n.toFloat().sub(this.normalizationOffset).div(this.normalizationOffset);let r=t;if(224!==n.shape[0]||224!==n.shape[1]){const e=!0;r=et.Fb.resizeBilinear(t,[224,224],e)}const s=r.reshape([-1,224,224,3]);let a;if(e){const t=xh[this.config.version];a=this.model.execute(s,t).squeeze([1,2])}else{a=this.model.predict(s).slice([0,1],[-1,1e3])}return a}):null}infer(t,e){let n,r;if(t instanceof HTMLImageElement||t instanceof HTMLVideoElement||t instanceof HTMLCanvasElement||t instanceof ImageData)n=t;else{if("object"!=typeof t||!(t.elt instanceof HTMLImageElement||t.elt instanceof HTMLVideoElement||t.elt instanceof HTMLCanvasElement||t.elt instanceof ImageData))throw new Error("No input image found.");n=t.elt}return r=e&&"string"==typeof e?e:"conv_preds",this.mobilenetInfer(n,r)}};function vh(t,e){return null==t&&null==e?null:null==t?e.clone():null===e?t.clone():t.concat(e,0)}function Oh(t,e){for(var n=[],r=0;r<t.length;r++)n.push({value:t[r],index:r});n.sort((function(t,e){return e.value-t.value}));var s=new Float32Array(e),a=new Int32Array(e);for(r=0;r<e;r++)s[r]=n[r].value,a[r]=n[r].index;return{values:s,indices:a}}var Sh=function(){function t(){this.classDatasetMatrices={},this.classExampleCount={},this.labelToClassId={},this.nextClassId=0}return t.prototype.addExample=function(t,e){var n=this;if(null==this.exampleShape&&(this.exampleShape=t.shape),!et.Bd.arraysEqual(this.exampleShape,t.shape))throw new Error("Example shape provided, "+t.shape+" does not match previously provided example shapes "+this.exampleShape+".");this.clearTrainDatasetMatrix(),e in this.labelToClassId||(this.labelToClassId[e]=this.nextClassId++),Object(et.td)((function(){var r=n.normalizeVectorToUnitLength(t.flatten()),s=r.shape[0];if(null==n.classDatasetMatrices[e])n.classDatasetMatrices[e]=r.as2D(1,s);else{var a=n.classDatasetMatrices[e].as2D(n.classExampleCount[e],s).concat(r.as2D(1,s),0);n.classDatasetMatrices[e].dispose(),n.classDatasetMatrices[e]=a}Object(et.Ib)(n.classDatasetMatrices[e]),null==n.classExampleCount[e]&&(n.classExampleCount[e]=0),n.classExampleCount[e]++}))},t.prototype.similarities=function(t){var e=this;return Object(et.td)((function(){var n=e.normalizeVectorToUnitLength(t.flatten()),r=n.shape[0];if(null==e.trainDatasetMatrix){var s=null;for(var a in e.classDatasetMatrices)s=vh(s,e.classDatasetMatrices[a]);e.trainDatasetMatrix=s}if(null==e.trainDatasetMatrix)return console.warn("Cannot predict without providing training examples."),null;Object(et.Ib)(e.trainDatasetMatrix);var i=e.getNumExamples();return e.trainDatasetMatrix.as2D(i,r).matMul(n.as2D(r,1)).as1D()}))},t.prototype.predictClass=function(t,e){return void 0===e&&(e=3),function(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?s(t.value):new n((function(e){e(t.value)})).then(i,o)}u((r=r.apply(t,e||[])).next())}))}(this,void 0,void 0,(function(){var n,r,s,a,i=this;return function(t,e){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}(this,(function(o){switch(o.label){case 0:if(e<1)throw new Error("Please provide a positive integer k value to predictClass.");if(0===this.getNumExamples())throw new Error("You have not added any examples to the KNN classifier. Please add examples before calling predictClass.");return n=Object(et.td)((function(){return i.similarities(t).asType("float32")})),r=Math.min(e,this.getNumExamples()),a=Oh,[4,n.data()];case 1:return s=a.apply(void 0,[o.sent(),r]).indices,n.dispose(),[2,this.calculateTopClass(s,r)]}}))}))},t.prototype.clearClass=function(t){if(null==this.classDatasetMatrices[t])throw new Error("Cannot clear invalid class "+t);this.classDatasetMatrices[t].dispose(),delete this.classDatasetMatrices[t],delete this.classExampleCount[t],this.clearTrainDatasetMatrix()},t.prototype.clearAllClasses=function(){for(var t in this.classDatasetMatrices)this.clearClass(t)},t.prototype.getClassExampleCount=function(){return this.classExampleCount},t.prototype.getClassifierDataset=function(){return this.classDatasetMatrices},t.prototype.getNumClasses=function(){return Object.keys(this.classExampleCount).length},t.prototype.setClassifierDataset=function(t){for(var e in this.clearTrainDatasetMatrix(),this.classDatasetMatrices=t,t)this.classExampleCount[e]=t[e].shape[0]},t.prototype.calculateTopClass=function(t,e){var n,r={};if(null==t)return{classIndex:this.labelToClassId[n],label:n,confidences:r};var s={},a=0;for(var i in this.classDatasetMatrices)a+=this.classExampleCount[i],s[i]=a;var o={};for(var i in this.classDatasetMatrices)o[i]=0;for(var u=0;u<t.length;u++){var c=t[u];for(var i in this.classDatasetMatrices)if(c<s[i]){o[i]++;break}}var l=0;for(var i in this.classDatasetMatrices){var h=o[i]/e;h>l&&(l=h,n=i),r[i]=h}return{classIndex:this.labelToClassId[n],label:n,confidences:r}},t.prototype.clearTrainDatasetMatrix=function(){null!=this.trainDatasetMatrix&&(this.trainDatasetMatrix.dispose(),this.trainDatasetMatrix=null)},t.prototype.normalizeVectorToUnitLength=function(t){return Object(et.td)((function(){var e=t.norm();return Object(et.ib)(t,e)}))},t.prototype.getNumExamples=function(){var t=0;for(var e in this.classDatasetMatrices)t+=this.classExampleCount[e];return t},t.prototype.dispose=function(){for(var t in this.clearTrainDatasetMatrix(),this.classDatasetMatrices)this.classDatasetMatrices[t].dispose()},t}();var Ch=class{constructor(){this.knnClassifier=new Sh,this.mapStringToIndex=[],this.kNum=25}addExample(t,e){let n,r;"string"==typeof e?n=this.mapStringToIndex.includes(e)?this.mapStringToIndex.indexOf(e):this.mapStringToIndex.push(e)-1:"number"==typeof e&&(n=e),r=Array.isArray(t)?et.od(t):t,this.knnClassifier.addExample(r,n)}async classify(t,e,n){let r,s=this.kNum,a=n;return"number"==typeof e?s=e:"function"==typeof e&&(a=e),r=Array.isArray(t)?et.od(t):t,oh(this.classifyInternal(r,s),a)}async classifyInternal(t,e){if(this.knnClassifier.getNumClasses()<=0)throw new Error("There is no example in any class");{const n=await this.knnClassifier.predictClass(t,e);if(this.mapStringToIndex.length>0){if(n.classIndex||0===n.classIndex){const t=this.mapStringToIndex[n.classIndex];t&&(n.label=t)}if(n.confidences){n.confidencesByLabel={};const{confidences:t}=n;Object.keys(t).forEach(e=>{const r=this.mapStringToIndex[e];n.confidencesByLabel[r]=t[e]})}}return n}}clearLabel(t){let e;"string"==typeof t?this.mapStringToIndex.includes(t)&&(e=this.mapStringToIndex.indexOf(t)):"number"==typeof t&&(e=t),this.knnClassifier.clearClass(e)}clearAllLabels(){this.mapStringToIndex=[],this.knnClassifier.clearAllClasses()}getCountByLabel(){const t=this.knnClassifier.getClassExampleCount();if(this.mapStringToIndex.length>0){const e={};return Object.keys(t).forEach(n=>{if(this.mapStringToIndex[n]){const r=this.mapStringToIndex[n];e[r]=t[n]}}),e}return t}getCount(){return this.knnClassifier.getClassExampleCount()}getClassifierDataset(){return this.knnClassifier.getClassifierDataset()}setClassifierDataset(t){this.knnClassifier.setClassifierDataset(t)}getNumLabels(){return this.knnClassifier.getNumClasses()}dispose(){this.knnClassifier.dispose()}async save(t){const e=this.knnClassifier.getClassifierDataset();this.mapStringToIndex.length>0&&Object.keys(e).forEach(t=>{this.mapStringToIndex[t]&&(e[t].label=this.mapStringToIndex[t])});const n=Object.keys(e).map(t=>{const n=e[t];return n?n.dataSync():null});let r="myKNN.json";t&&(r=t.endsWith(".json")?t:t+".json"),await ih(JSON.stringify({dataset:e,tensors:n}),r,"application/octet-stream")}async load(t,e){let n;if(n="object"==typeof t?t:await(async(t,e)=>fetch(t).then(t=>t.json()).then(t=>(e&&e(null,t),t)).catch(t=>{throw e&&e(t),console.error("There has been a problem loading the file: "+t.message),alert("There has been a problem loading the file: "+t.message),t}))(t),n){const{dataset:t,tensors:r}=n;if(!t)return void alert("There has been a problem loading the file. JSON file may not contain appropriate dataset for this classification");this.mapStringToIndex=Object.keys(t).map(e=>t[e].label);const s=r.map((e,n)=>{if(e){const r=Object.keys(e).map(t=>e[t]);return et.od(r,t[n].shape,t[n].dtype)}return null}).reduce((t,e,n)=>(t[n]=e,t),{});this.knnClassifier.setClassifierDataset(s),e&&e()}}};let Ih=new wh("MobileNet",()=>{}),Nh=new Ch;window.onbeforeunload=function(){if(!Z)return"Changes you made may not be saved"}}]);